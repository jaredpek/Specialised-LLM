input,output
What are system call traces in the context of monitored data?,System call traces are a type of monitored data collected by the Operating System (OS) that describe the activities or behaviors of processes running within the system.
What kind of information is captured in a log file for monitoring?,A log file captures information on user activity. This includes details such as user login records and the history of commands executed by the user.
Explain the purpose of file integrity checksums as a type of monitored data.,File integrity checksums are used to periodically scan critical files for changes. They work by comparing cryptographic checksums for these files against a record of known good values. This process helps detect unauthorized modifications to files.
"What does registry access monitoring entail, and to which OS is it specific?",Registry access monitoring involves observing and recording access attempts to the system's registry. This type of monitoring is specific to Windows operating systems.
What insight does kernel and driver-level monitoring provide?,Kernel and driver-level monitoring provides insight into Operating System (OS) kernel-level anomalies. This means it helps in detecting unusual or potentially malicious activities occurring at the core of the operating system and its device drivers.
How can resource usage data indicate malicious behavior?,"Resource usage data, which includes CPU, memory, or I/O utilization and activities, can indicate the execution of some malicious behaviors. Unusual spikes or patterns in these resources might suggest unauthorized or harmful processes are running."
What do network activities include as a type of monitored data?,"Network activities, as a type of monitored data, include established connections and received packets. Monitoring these activities helps in understanding network traffic patterns and detecting suspicious communications."
What is an Intrusion Detection System (IDS)?,An Intrusion Detection System (IDS) is a system specifically designed to detect unauthorized intrusions into computer systems. Its primary function is to identify and alert about activities that deviate from normal or authorized behavior.
How can an Intrusion Detection System (IDS) be implemented?,"An Intrusion Detection System (IDS) can be implemented at different layers within a computer environment. Common implementations include network-based IDS, which monitors network traffic, and host-based IDS, which monitors activities on a single host."
What is the primary focus of a host-based IDS?,"The primary focus of a host-based IDS is to monitor the characteristics of a single host for suspicious activities. This involves observing system calls, log files, resource usage, and other host-specific data to detect potential intrusions."
What are the three logical components that comprise an IDS?,"An Intrusion Detection System (IDS) comprises three logical components: Sensors, Analyzers, and a User interface. Each component plays a distinct role in the overall detection process."
What is the role of Sensors in an Intrusion Detection System (IDS)?,"In an Intrusion Detection System (IDS), Sensors are responsible for collecting data. This data can include system logs, network packets, system call traces, and other relevant information from the monitored environment."
What is the function of Analyzers within an Intrusion Detection System (IDS)?,Analyzers within an Intrusion Detection System (IDS) are responsible for determining if an intrusion has occurred and identifying the possible evidence. They may also provide guidance about what actions to take as a result of the detected intrusion.
Describe the purpose of the User interface component in an IDS.,"The User interface component in an Intrusion Detection System (IDS) enables a user to view output from the system, such as alerts and reports, and to control the behavior of the system, allowing for configuration and management of the IDS."
What is signature-based detection?,Signature-based detection is a methodology used in intrusion detection that flags any activity that matches the structure of a known attack. It relies on predefined patterns or signatures of malicious activities.
Explain the concept of blacklisting in signature-based detection.,"In signature-based detection, blacklisting involves maintaining a list of patterns that are explicitly not allowed. If the system detects any activity matching an entry on this blacklist, it generates an alert, indicating a known malicious activity."
What is an advantage of using signature-based detection?,"An advantage of using signature-based detection is that it is simple and easy to build. It is also very good at accurately detecting known attacks because it relies on specific, pre-identified patterns."
What is a disadvantage of signature-based detection?,"A significant disadvantage of signature-based detection is its inability to catch new attacks without a known signature. It can only detect threats for which it has a pre-existing pattern, making it ineffective against zero-day exploits."
What is anomaly-based detection?,"Anomaly-based detection is a methodology that involves developing a model of what normal activities look like within a system. It then alerts on any activities that deviate significantly from these established normal activities, indicating a potential intrusion."
Explain the concept of whitelisting in anomaly-based detection.,"In anomaly-based detection, whitelisting involves maintaining a list of allowed patterns or behaviors. If the system observes any activity that is not on this whitelist, it generates an alert, as such activity is considered anomalous or potentially malicious."
What is an advantage of using anomaly-based detection?,"An advantage of using anomaly-based detection is its capability to detect attacks that have not been seen before. By identifying deviations from normal behavior, it can potentially catch novel threats, including zero-day attacks."
What is a disadvantage of anomaly-based detection?,"A disadvantage of anomaly-based detection is that its false positive rate can be high. This means it may frequently flag many non-attacks as unusual or suspicious, leading to a large number of alerts that are not actual threats."
What are the security protection stages in an Operating System (OS)?,"The security protection stages in an Operating System (OS) include Authentication, Authorization with Access Control, and Logging, Monitoring & Auditing. These stages work together to secure the system."
What is Authentication in the context of OS security?,"Authentication, in the context of Operating System (OS) security, is the process of verifying the identity of a user or process attempting to access the system. It ensures that only legitimate entities can proceed."
What is Authorization with Access Control in OS security?,Authorization with Access Control in Operating System (OS) security refers to the process of determining what authenticated users or processes are permitted to do within the system. It dictates their level of access to resources and functions.
"What does Logging, Monitoring & Auditing refer to in OS security?","Logging, Monitoring & Auditing in Operating System (OS) security refers to the continuous recording of system activities (logging), real-time observation of these activities for anomalies (monitoring), and periodic review of logs and system behavior for security compliance and incident investigation (auditing)."
What are the two main operating modes in an OS based on privilege levels?,"The two main operating modes in an Operating System (OS) based on privilege levels are Kernel mode and User mode. Kernel mode has the highest privilege, while user mode has the least privilege."
Describe Kernel mode in terms of privilege and function.,"Kernel mode is the operating mode within an OS that possesses the highest privilege. In this mode, the system runs critical functions and services, having full access to all hardware and memory resources."
Describe User mode in terms of privilege.,"User mode is the operating mode within an OS that has the least privilege. In this mode, applications and user processes run with restricted access to system resources and hardware, requiring the kernel to perform privileged operations on their behalf."
How do entities in higher privilege rings interact with functions and objects in lower rings?,"Entities operating in higher privilege rings cannot directly call the functions or access the objects located in the lower privilege rings. A specific mechanism, such as a context switch, is required for such interactions."
What is required for entities in higher rings to access functions and objects in lower rings?,A context switch is required for entities in higher privilege rings to achieve the procedure of accessing functions and objects in lower rings. This mechanism facilitates operations like system calls and interrupts.
What is the purpose of a status flag in the context of operating modes?,"A status flag allows the system to work in different operating modes, such as kernel mode and user mode. It is a mechanism used by the CPU to track and manage the current privilege level of execution."
What are the privilege levels associated with Ring 0 and Ring 3 in the OS?,"In the context of privileged rings inside an OS, Ring 0 is associated with the highest privilege, typically where the Kernel operates. Ring 3 is associated with the least privilege, where Applications typically run."
What events can trigger a transition from user to kernel levels?,"Different events can trigger a transition from user to kernel levels, including a System call, where a user application explicitly requests privileged operations, a Trap, where an exceptional event or error occurs, and a Hardware interrupt, where hardware issues a signal for immediate attention."
What is a system call in the context of user-to-kernel transition?,"A system call, in the context of user-to-kernel transition, occurs when a user application explicitly makes a request to the kernel for privileged operations. This is a deliberate action by the application to access kernel-level services."
What is a trap in the context of user-to-kernel transition?,"A trap, in the context of user-to-kernel transition, occurs when a user application encounters an exceptional event or an error and requests the kernel to handle it. Unlike a system call, a trap is often triggered by an unexpected condition."
How are system calls and traps categorized in terms of interrupts?,Both system calls and traps are categorized as software interrupts. They are mechanisms initiated by software (user applications) to request services or handle exceptions at the kernel level.
What is a hardware interrupt?,A hardware interrupt is an event where hardware components issue a signal to the CPU to indicate that an event needs immediate attention. This allows the CPU to pause its current task and handle the hardware event.
Describe the first step of the CPU's switch procedure during a context switch.,"The first step of the CPU's switch procedure during a context switch involves the CPU storing the current process's states. Following this, it switches to the kernel mode by setting the status flag, indicating a change in privilege level."
How does the kernel handle an interrupt during the switch procedure?,"During the switch procedure, the kernel handles an interrupt based on the interrupt vector. This vector is an entry in an interrupt table that points to the specific interrupt handler routine designed to address the particular type of interrupt."
What is a system call?,A system call is an interface that allows a user-level process to request functions or services from the kernel level. It acts as a programmatic way for applications to interact with the operating system's core functionalities.
What types of functions or services can a user-level process request from the kernel level via a system call?,"A user-level process can request various types of functions or services from the kernel level via a system call, including process control, file management, and device management. These cover fundamental operating system operations."
What is a system call table?,"A system call table is a table of pointers located in the kernel region. Each pointer in this table corresponds to a different system call function, allowing the kernel to dispatch requests from user processes to the appropriate handler."
How does a user process issue a system call using the `syscall` API?,"A user process issues a system call using the `syscall` API by passing the index of the desired system call and its parameters. The API typically follows a format like `syscall(SYS_call, arg1, arg2, ...)` where `SYS_call` is the index and `arg1, arg2, ...` are the arguments."
Provide an example of a system call function related to process control.,"An example of a system call function related to process control is `sys_waitpid`. This function allows a process to wait for a child process to change state, such as termination."
Provide an example of a system call function related to file management.,An example of a system call function related to file management is `sys_read`. This function allows a process to read data from a file descriptor.
What is a rootkit?,"A rootkit is a type of malware that obtains root privileges to compromise a computer. Once installed, it allows an attacker to maintain privileged access to the system while attempting to hide its presence."
What capabilities does a root user possess that a rootkit exploits?,"A root user possesses the capability to bypass security checks and perform any actions on the system. A rootkit exploits this by gaining root privileges, thereby allowing it to execute arbitrary malicious code and manipulate system functions without restriction."
How do rootkits hide their existence?,"Rootkits hide their existence by manipulating system components to conceal malicious processes, files, and network sockets from being detected by legitimate system monitoring tools. This allows them to operate stealthily within the compromised system."
What are some ways an attacker can gain root privileges to deploy a rootkit?,"An attacker can gain root privileges to deploy a rootkit by exploiting vulnerabilities in the software stack. Common vulnerabilities include buffer overflows and format string bugs, which can be leveraged to execute arbitrary code with elevated privileges."
