input,output
Compare a subject with an object in the context of access control.,"A **subject** is typically held accountable for the actions they have initiated. There can be three types of subjects: Owner, Group, and Other. An **object**, conversely, is a resource to which access is controlled. It is an entity used to contain and/or receive information. Examples of objects include records, blocks, pages, segments, files, directories, mailboxes, messages, and programs. In essence, subjects perform operations on objects."
What are the differences between an Owner and a Group as types of subjects?,"An **Owner** is a type of **subject** that may be the creator of a resource. For system resources, ownership may belong to a system administrator. A **Group**, on the other hand, is a type of subject where privileges can be assigned to a collection of users in addition to individual users. A user joining the group will automatically have the corresponding privileges, while a user quitting the group will lose the corresponding permissions. A user may belong to multiple groups. The concept of groups makes it easier to manage and update permissions. Both Owner and Group are categories of subjects, which are entities held accountable for the actions they initiate."
Compare the 'Owner' subject type with the 'Other' subject type.,"An **Owner** is a type of **subject** that may be the creator of a resource, or for system resources, a system administrator. This implies a high level of control and responsibility. In contrast, **Other** is a type of subject that is granted the least amount of access. These are users who can access the system but are not included in the categories of owner and group for a specific resource. Both are types of subjects, which are entities held accountable for the actions they initiate."
What are the differences between a 'Group' subject type and an 'Other' subject type?,"A **Group** is a type of **subject** where privileges are assigned to a collection of users. Users gain or lose privileges automatically by joining or quitting the group, and groups facilitate easier permission management. A user may belong to multiple groups. **Other**, however, refers to users who are able to access the system but are not part of the owner or group categories for a specific resource, and they are granted the least amount of access. Both Group and Other are categories of subjects, which are entities held accountable for the actions they initiate."
Compare the 'Read' operation with the 'Write' operation.,"The **Read** operation allows a **subject** to view information in a system **resource** (an **object**), such as a file, selected records, or fields within a record. Read access specifically includes the ability to copy or print. The **Write** operation, conversely, allows a subject to modify data in a system resource, which can include files, records, or programs. Both are types of **operations**, which describe the way a subject may access an object. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
What are the differences between the 'Read' and 'Execute' operations?,"The **Read** operation permits a **subject** to view information in a system **resource** (an **object**), encompassing actions like copying or printing. The **Execute** operation, in contrast, allows a subject to execute specified programs. While Read is about accessing and consuming information, Execute is about running a program. Both are types of **operations**, which describe the way a subject may access an object. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
Compare the 'Read' operation with the 'Delete' operation.,"The **Read** operation enables a **subject** to view information in a system **resource** (an **object**), including the ability to copy or print. The **Delete** operation, however, allows a subject to delete certain system resources, such as files or records. Read is about passive consumption of information, while Delete is about active removal of resources. Both are types of **operations**, which describe the way a subject may access an object. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
What are the differences between the 'Read' and 'Create' operations?,"The **Read** operation allows a **subject** to view information in a system **resource** (an **object**), including the ability to copy or print. The **Create** operation, conversely, allows a subject to create new files, records, or fields. Read focuses on existing information, while Create focuses on bringing new resources into existence. Both are types of **operations**, which describe the way a subject may access an object. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
Compare the 'Read' operation with the 'Search' operation.,"The **Read** operation allows a **subject** to view information within a system **resource** (an **object**), such as a file's content, and includes copying or printing. The **Search** operation, on the other hand, allows a subject to list the files in a directory or otherwise search the directory. Read is about accessing the content of a known resource, while Search is about discovering or locating resources within a directory structure. Both are types of **operations**, which describe the way a subject may access an object. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
What are the differences between the 'Write' and 'Execute' operations?,"The **Write** operation allows a **subject** to modify data in a system **resource** (an **object**), such as files or programs. The **Execute** operation, in contrast, allows a subject to execute specified programs. Write is about changing data, while Execute is about running code. Both are types of **operations**, which describe the way a subject may access an object. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
Compare the 'Write' operation with the 'Delete' operation.,"The **Write** operation allows a **subject** to modify data in a system **resource** (an **object**), such as files or records. The **Delete** operation, however, allows a subject to delete certain system resources, such as files or records. While both involve changing the state of a resource, Write alters its content, whereas Delete removes the resource entirely. Both are types of **operations**, which describe the way a subject may access an object. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
What are the differences between the 'Write' and 'Create' operations?,"The **Write** operation allows a **subject** to modify data in an existing system **resource** (an **object**), such as files or records. The **Create** operation, conversely, allows a subject to bring new files, records, or fields into existence. Write operates on existing resources, while Create is responsible for the initial generation of resources. Both are types of **operations**, which describe the way a subject may access an object. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
Compare the 'Write' operation with the 'Search' operation.,"The **Write** operation allows a **subject** to modify data in a system **resource** (an **object**), such as files or programs. The **Search** operation, on the other hand, allows a subject to list the files in a directory or otherwise search the directory. Write is about altering the content of a resource, while Search is about discovering or locating resources. Both are types of **operations**, which describe the way a subject may access an object. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
What are the differences between the 'Execute' and 'Delete' operations?,"The **Execute** operation allows a **subject** to execute specified programs. The **Delete** operation, however, allows a subject to delete certain system **resources** (objects), such as files or records. Execute is about running a program, while Delete is about removing a resource. Both are types of **operations**, which describe the way a subject may access an object. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
Compare the 'Execute' operation with the 'Create' operation.,"The **Execute** operation allows a **subject** to execute specified programs. The **Create** operation, conversely, allows a subject to create new files, records, or fields (objects). Execute runs existing programs, while Create brings new resources into existence. Both are types of **operations**, which describe the way a subject may access an object. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
What are the differences between the 'Execute' and 'Search' operations?,"The **Execute** operation allows a **subject** to execute specified programs. The **Search** operation, on the other hand, allows a subject to list the files in a directory or otherwise search the directory. Execute is about running a program, while Search is about locating resources. Both are types of **operations**, which describe the way a subject may access an object. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
Compare the 'Delete' operation with the 'Create' operation.,"The **Delete** operation allows a **subject** to delete certain system **resources** (objects), such as files or records. The **Create** operation, conversely, allows a subject to create new files, records, or fields (objects). Delete removes existing resources, while Create brings new resources into existence. They are inverse operations in terms of resource lifecycle. Both are types of **operations**, which describe the way a subject may access an object. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
What are the differences between the 'Delete' and 'Search' operations?,"The **Delete** operation allows a **subject** to delete certain system **resources** (objects), such as files or records. The **Search** operation, on the other hand, allows a subject to list the files in a directory or otherwise search the directory. Delete is about removing resources, while Search is about finding them. Both are types of **operations**, which describe the way a subject may access an object. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
Compare the 'Create' operation with the 'Search' operation.,"The **Create** operation allows a **subject** to create new files, records, or fields (objects). The **Search** operation, on the other hand, allows a subject to list the files in a directory or otherwise search the directory. Create is about generating new resources, while Search is about locating existing ones. Both are types of **operations**, which describe the way a subject may access an object. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
What are the differences between an Access Control Matrix and an Access Control List (ACL)?,"An **Access Control Matrix** is a popular conceptual implementation of an access control policy. It has two dimensions: one lists identified **subjects** (entities held accountable for actions), and the other lists **objects** (resources with controlled access). Each entry in the matrix indicates the access rights of a particular subject for a particular object. An **Access Control List (ACL)** is a practical implementation of an access control matrix achieved by decomposition by columns. For each object, an ACL lists the users (subjects) and their permitted access rights. ACLs are convenient for determining which subjects have which access to a particular resource. While the matrix is a comprehensive conceptual model, an ACL is an object-centric, column-wise representation of its permissions."
Compare an Access Control Matrix with a Capability List (C-List).,"An **Access Control Matrix** is a popular conceptual implementation of an access control policy, with dimensions for **subjects** (entities held accountable for actions) and **objects** (resources with controlled access), where entries specify access rights. A **Capability List (C-List)** is a practical implementation of an access control matrix achieved by decomposition by rows. For each subject, a C-List specifies the authorized objects and the operations that subject can perform. C-Lists are convenient for determining the access rights available to a specific user. While the matrix is a comprehensive conceptual model, a C-List is a subject-centric, row-wise representation of its permissions."
What are the differences between an Access Control List (ACL) and a Capability List (C-List)?,"Both an **Access Control List (ACL)** and a **Capability List (C-List)** are implementations of an **access control matrix**, which is a popular way to represent access control policy with **subjects** (entities held accountable for actions) and **objects** (resources with controlled access). The primary difference lies in their decomposition method: an ACL is implemented by decomposition by columns. For each **object**, an ACL lists the users (subjects) and their permitted access rights, making it convenient for determining which subjects have access to a particular resource. A C-List, conversely, is implemented by decomposition by rows. For each **subject**, a C-List specifies the authorized objects and the operations that subject can perform, making it convenient for determining the access rights available to a specific user. Essentially, ACLs are object-centric, and C-Lists are subject-centric."
Compare the operation 'Create subject s' with 'Destroy subject s' in an Access Control Matrix.,"In the context of updating an **Access Control Matrix** (a representation of access control policy with **subjects** and **objects**), 'Create subject s' involves adding a new row 's' to the matrix. This action is typically performed by the system administrator. Conversely, 'Destroy subject s' involves deleting the row 's' from the matrix, also typically done by the system administrator. 'Create subject s' introduces a new subject into the system, while 'Destroy subject s' removes an existing subject. A **subject** is an entity held accountable for actions they initiate."
What are the differences between 'Create object o' and 'Destroy object o' in an Access Control Matrix?,"In the context of updating an **Access Control Matrix** (a representation of access control policy with **subjects** and **objects**), 'Create object o' involves creating a new column 'o' in the matrix. This action is typically performed by the system administrator. Conversely, 'Destroy object o' involves deleting the column 'o' from the matrix, also typically done by the system administrator. 'Create object o' introduces a new object into the system, while 'Destroy object o' removes an existing object. An **object** is a resource to which access is controlled."
Compare 'Grant permission r for subject s over object o' with 'Revoke permission r for subject s over object o'.,"In the context of updating an **Access Control Matrix** (a representation of access control policy with **subjects** and **objects**), 'Grant permission r for subject s over object o' involves entering the permission 'r' into the entry M_s,o (the cell corresponding to subject 's' and object 'o'). This action is typically done by the resource owner or system administrator. Conversely, 'Revoke permission r for subject s over object o' involves deleting the permission 'r' from the entry M_s,o. This is also typically done by the resource owner or system administrator. Granting permission adds an access right, while revoking permission removes an access right. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
What are the differences between creating a subject and granting a permission in an Access Control Matrix?,"In an **Access Control Matrix** (a representation of access control policy with **subjects** and **objects**), 'Create subject s' involves adding a new row 's' to the matrix, typically done by the system administrator. This action introduces a new **subject** (an entity held accountable for actions) to the system. 'Grant permission r for subject s over object o', on the other hand, involves entering a specific permission 'r' into an existing entry M_s,o within the matrix. This action, typically done by the resource owner or system administrator, assigns an access right to an existing subject for an existing **object** (a resource with controlled access). Creating a subject expands the matrix's dimensions, while granting permission populates an existing cell."
Compare the Unix file type '-' (file) with 'd' (directory).,"In Unix OS resource management, '-' denotes a regular **file**, which is an **object** of access control containing data. 'd' denotes a **directory**, which is also an object of access control but serves as a container for other files and directories. Both are resources, but a file holds content directly, while a directory organizes resources hierarchically. All resources in Unix OS, including files and directories, have a single user owner and group owner."
What are the differences between the Unix file type '-' (file) and 's' (socket)?,"In Unix OS resource management, '-' denotes a regular **file**, which is an **object** of access control containing data. 's' denotes a **socket**, which is also an object of access control but represents an endpoint for communication. While a regular file typically stores persistent data on disk, a socket is used for inter-process communication or network communication. Both are uniformly treated as resources in Unix OS and have a single user owner and group owner."
Compare the Unix file type '-' (file) with 'b' (block device file).,"In Unix OS resource management, '-' denotes a regular **file**, which is an **object** of access control containing data. 'b' denotes a **block device file**, which is also an object of access control but represents a hardware device (like a hard disk) that transfers data in fixed-size blocks. A regular file is a logical storage unit, whereas a block device file provides an interface to a physical device. Both are uniformly treated as resources in Unix OS and have a single user owner and group owner."
What are the differences between the Unix file type '-' (file) and 'l' (symbolic link)?,"In Unix OS resource management, '-' denotes a regular **file**, which is an **object** of access control containing data. 'l' denotes a **symbolic link**, which is also an object of access control but is essentially a pointer or reference to another file or directory. A regular file contains its own data, while a symbolic link merely points to another resource. Both are uniformly treated as resources in Unix OS and have a single user owner and group owner."
Compare the Unix file type '-' (file) with 'c' (character device file).,"In Unix OS resource management, '-' denotes a regular **file**, which is an **object** of access control containing data. 'c' denotes a **character device file**, which is also an object of access control but represents a hardware device (like a terminal or printer) that transfers data character by character. A regular file is a logical storage unit, whereas a character device file provides an interface to a physical streaming device. Both are uniformly treated as resources in Unix OS and have a single user owner and group owner."
What are the differences between the Unix file type 'd' (directory) and 's' (socket)?,"In Unix OS resource management, 'd' denotes a **directory**, which is an **object** of access control used to organize other files and directories hierarchically. 's' denotes a **socket**, which is also an object of access control but represents an endpoint for communication. A directory is for file system organization, while a socket is for inter-process or network communication. Both are uniformly treated as resources in Unix OS and have a single user owner and group owner."
Compare the Unix file type 'd' (directory) with 'b' (block device file).,"In Unix OS resource management, 'd' denotes a **directory**, which is an **object** of access control used to organize other files and directories. 'b' denotes a **block device file**, which is also an object of access control but represents a hardware device that transfers data in fixed-size blocks. A directory is a logical structure for organizing files, whereas a block device file is an interface to a physical storage device. Both are uniformly treated as resources in Unix OS and have a single user owner and group owner."
What are the differences between the Unix file type 'd' (directory) and 'l' (symbolic link)?,"In Unix OS resource management, 'd' denotes a **directory**, which is an **object** of access control used to organize other files and directories. 'l' denotes a **symbolic link**, which is also an object of access control but is a pointer to another file or directory. A directory is a container, while a symbolic link is a reference. Both are uniformly treated as resources in Unix OS and have a single user owner and group owner."
Compare the Unix file type 'd' (directory) with 'c' (character device file).,"In Unix OS resource management, 'd' denotes a **directory**, which is an **object** of access control used to organize other files and directories. 'c' denotes a **character device file**, which is also an object of access control but represents a hardware device that transfers data character by character. A directory is a logical structure for organizing files, whereas a character device file is an interface to a physical streaming device. Both are uniformly treated as resources in Unix OS and have a single user owner and group owner."
What are the differences between a user owner and a group owner for a resource in Unix OS?,"In Unix OS resource management, each **resource** (an **object** of access control like a file or directory) has a single **user owner** and a single **group owner**. The user owner is a specific individual **subject** (an entity held accountable for actions) who has primary control over the resource. The group owner is a specific **group** (a collection of users, also a type of subject) that has collective control over the resource. Permissions are typically defined for the user owner, the group owner, and 'other' users, allowing for differentiated access control."
Compare the 'Read' operation with the ability to 'Copy' in access control.,"The **Read** operation describes the way a **subject** may access an **object** by viewing information in a system resource. The ability to **copy** is explicitly included as part of Read access. Therefore, Read access grants the permission to view information and, as a consequence, to make a copy of that information. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
What are the differences between the 'Read' operation and the ability to 'Print' in access control?,"The **Read** operation describes the way a **subject** may access an **object** by viewing information in a system resource. The ability to **print** is explicitly included as part of Read access. Thus, if a subject has Read access to an object, they can view its information and also print it. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
Compare modifying data with viewing information in the context of operations.,"In the context of **operations** (ways a **subject** may access an **object**), **modifying data** is achieved through the **Write** operation, which allows a subject to change data in a system resource like files or programs. **Viewing information**, on the other hand, is achieved through the **Read** operation, which allows a subject to see information in a system resource, including the ability to copy or print. Modifying data implies altering the resource's content, while viewing information implies observing it without alteration. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
What are the differences between creating new resources and deleting existing resources?,"In the context of **operations** (ways a **subject** may access an **object**), **creating new resources** is performed by the **Create** operation, which allows a subject to bring new files, records, or fields into existence. **Deleting existing resources** is performed by the **Delete** operation, which allows a subject to remove certain system resources like files or records. Create adds resources to the system, while Delete removes them. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
Compare listing files in a directory with viewing file content.,"In the context of **operations** (ways a **subject** may access an **object**), **listing files in a directory** is part of the **Search** operation, which allows a subject to enumerate the contents of a directory. **Viewing file content**, however, is part of the **Read** operation, which allows a subject to view the actual information within a system resource. Listing files provides metadata about the files present, while viewing file content provides the data itself. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
What are the differences between a row and a column in an Access Control Matrix?,"In an **Access Control Matrix** (a popular implementation of an access control policy), one dimension consists of identified **subjects** (entities held accountable for actions) that may attempt access to resources, typically represented as **rows**. The other dimension lists the **objects** (resources to which access is controlled) that may be accessed, typically represented as **columns**. Each entry at the intersection of a row and a column indicates the access rights of a particular subject for a particular object. Therefore, rows represent subjects, and columns represent objects."
Compare the dimensions of an Access Control Matrix with its entries.,"An **Access Control Matrix** is a popular implementation of an access control policy. Its **dimensions** consist of identified **subjects** (entities held accountable for actions) along one axis (rows) and **objects** (resources to which access is controlled) along the other axis (columns). The **entries** in the matrix are the specific access rights (e.g., Read, Write, Execute) that a particular subject has for a particular object. The dimensions define the scope of subjects and objects, while the entries specify the permissions at their intersections."
What are the differences between decomposition by columns and decomposition by rows for an access control matrix?,"Decomposition by columns and decomposition by rows are two ways to implement an **access control matrix** when it is sparse. **Decomposition by columns** leads to an **Access Control List (ACL)**, where for each **object** (a resource with controlled access), a list specifies the users (subjects) and their permitted access rights. This is convenient for determining which subjects have access to a particular resource. **Decomposition by rows** leads to a **Capability List (C-List)**, where for each **subject** (an entity held accountable for actions), a list specifies the authorized objects and the operations that subject can perform. This is convenient for determining the access rights available to a specific user. The former is object-centric, and the latter is subject-centric."
Compare object-centric access control with subject-centric access control.,"**Object-centric access control** is exemplified by an **Access Control List (ACL)**, which is an implementation of an **access control matrix** by decomposition by columns. In this approach, for each **object** (a resource with controlled access), the ACL lists the users (**subjects**) and their permitted access rights. This makes it convenient for determining which subjects have access to a particular resource. **Subject-centric access control** is exemplified by a **Capability List (C-List)**, which is an implementation of an access control matrix by decomposition by rows. Here, for each **subject** (an entity held accountable for actions), the C-List specifies the authorized objects and the operations that subject can perform. This makes it convenient for determining the access rights available to a specific user."
What are the differences in convenience between an ACL and a C-List?,"An **Access Control List (ACL)** is convenient when determining which **subjects** (entities held accountable for actions) have which access to a particular **resource** (an **object**). This is because an ACL is implemented by decomposition by columns, meaning for each object, it lists the users and their permitted access rights. A **Capability List (C-List)**, on the other hand, is convenient when determining the access rights available to a specific **user** (subject). This is because a C-List is implemented by decomposition by rows, meaning for each subject, it specifies the authorized objects and operations. Both are implementations of an **access control matrix**."
Compare the 'Read' file permission with the 'Write' file permission in Unix OS.,"In Unix OS, **file permissions** describe the access rights for resources. The **Read** permission allows a **subject** to view the information within a file. The **Write** permission allows a subject to modify the data in the file. Both are operations that a subject can perform on an **object** (resource). A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
What are the differences between the 'Read' and 'Execute' file permissions in Unix OS?,"In Unix OS, **file permissions** describe the access rights for resources. The **Read** permission allows a **subject** to view the information within a file. The **Execute** permission allows a subject to execute the file as a program. While Read is about consuming the file's content, Execute is about running it. Both are operations that a subject can perform on an **object** (resource). A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
Compare the 'Write' file permission with the 'Execute' file permission in Unix OS.,"In Unix OS, **file permissions** describe the access rights for resources. The **Write** permission allows a **subject** to modify the data within a file. The **Execute** permission allows a subject to execute the file as a program. Write is about altering the file's content, while Execute is about running the file's code. Both are operations that a subject can perform on an **object** (resource). A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
What are the differences between a 'file' and a 'socket' as resources in Unix OS?,"In Unix OS, **files** and **sockets** are both uniformly treated as **resources**, which are **objects** of access control. A file (denoted by '-') is a general-purpose resource used to store data. A socket (denoted by 's') is a specific type of resource used as an endpoint for communication. While files are primarily for storage, sockets are for facilitating data exchange between processes or over a network. Both have a single user owner and group owner."
Compare a 'file' and a 'block device file' as resources in Unix OS.,"In Unix OS, **files** and **block device files** are both uniformly treated as **resources**, which are **objects** of access control. A file (denoted by '-') is a general-purpose resource used to store data. A block device file (denoted by 'b') is a specific type of resource that represents a hardware device (like a hard disk) and allows data transfer in fixed-size blocks. Files are logical storage units, whereas block device files provide an interface to physical block-oriented devices. Both have a single user owner and group owner."
What are the differences between a 'file' and a 'symbolic link' as resources in Unix OS?,"In Unix OS, **files** and **symbolic links** are both uniformly treated as **resources**, which are **objects** of access control. A file (denoted by '-') is a general-purpose resource used to store data. A symbolic link (denoted by 'l') is a specific type of resource that acts as a pointer or reference to another file or directory. A file contains its own data, while a symbolic link merely points to the location of other data. Both have a single user owner and group owner."
Compare a 'file' and a 'character device file' as resources in Unix OS.,"In Unix OS, **files** and **character device files** are both uniformly treated as **resources**, which are **objects** of access control. A file (denoted by '-') is a general-purpose resource used to store data. A character device file (denoted by 'c') is a specific type of resource that represents a hardware device (like a terminal or printer) and allows data transfer character by character. Files are logical storage units, whereas character device files provide an interface to physical streaming devices. Both have a single user owner and group owner."
What are the differences between a 'directory' and a 'symbolic link' as resources in Unix OS?,"In Unix OS, **directories** and **symbolic links** are both uniformly treated as **resources**, which are **objects** of access control. A directory (denoted by 'd') is a resource used to organize other files and directories hierarchically. A symbolic link (denoted by 'l') is a resource that acts as a pointer or reference to another file or directory. A directory is a container for resources, while a symbolic link is a reference to a resource. Both have a single user owner and group owner."
Compare the 'Link counter' with the 'File size' attribute for a Unix resource.,"In Unix OS resource management, the **Link counter** is an attribute of a resource that indicates the number of links, specifically the number of directory entries pointing to the file. The **File size**, on the other hand, is an attribute that indicates the size of the file in bytes. The link counter relates to the file's references within the file system, while the file size relates to the amount of data it contains. Both are attributes of a **resource**, which is an **object** of access control."
"What are the differences between the 'Owner', 'Group', and 'Other' subject types?","The three types of **subjects** (entities held accountable for actions they initiate) are **Owner**, **Group**, and **Other**. An **Owner** may be the creator of a resource, or for system resources, a system administrator, implying direct and often primary control. A **Group** allows privileges to be assigned to a collection of users; users automatically gain or lose privileges by joining or quitting the group, simplifying management. **Other** refers to users who can access the system but are not included in the owner or group categories for a specific resource, and they are granted the least amount of access. These categories define different levels and mechanisms of accountability and access for subjects."
"Compare the operations 'Read', 'Write', and 'Execute'.","The **Read** operation allows a **subject** to view information in a system **resource** (an **object**), including the ability to copy or print. The **Write** operation allows a subject to modify data in a system resource. The **Execute** operation allows a subject to execute specified programs. Read is for passive consumption, Write is for modification, and Execute is for running code. All three are types of **operations**, which describe the way a subject may access an object. A **subject** is an entity held accountable for actions, and an **object** is a resource with controlled access."
What are the differences between 'Create object o' and 'Grant permission r for subject s over object o'?,"In an **Access Control Matrix** (a representation of access control policy with **subjects** and **objects**), 'Create object o' involves creating a new column 'o' in the matrix, typically done by the system administrator. This action introduces a new **object** (a resource with controlled access) to the system. 'Grant permission r for subject s over object o', on the other hand, involves entering a specific permission 'r' into an existing entry M_s,o within the matrix. This action, typically done by the resource owner or system administrator, assigns an access right to an existing **subject** (an entity held accountable for actions) for an existing object. Creating an object expands the matrix's dimensions, while granting permission populates an existing cell for an existing object."
Compare 'Destroy subject s' with 'Revoke permission r for subject s over object o'.,"In an **Access Control Matrix** (a representation of access control policy with **subjects** and **objects**), 'Destroy subject s' involves deleting the entire row 's' from the matrix, typically done by the system administrator. This action completely removes a **subject** (an entity held accountable for actions) from the system. 'Revoke permission r for subject s over object o', on the other hand, involves deleting a specific permission 'r' from an existing entry M_s,o within the matrix. This action, typically done by the resource owner or system administrator, removes a specific access right for an existing subject over an existing **object** (a resource with controlled access), but the subject itself remains in the system. Destroying a subject removes all its permissions, while revoking permission removes only a specific one."
What are the differences between 'Destroy object o' and 'Revoke permission r for subject s over object o'?,"In an **Access Control Matrix** (a representation of access control policy with **subjects** and **objects**), 'Destroy object o' involves deleting the entire column 'o' from the matrix, typically done by the system administrator. This action completely removes an **object** (a resource with controlled access) from the system. 'Revoke permission r for subject s over object o', on the other hand, involves deleting a specific permission 'r' from an existing entry M_s,o within the matrix. This action, typically done by the resource owner or system administrator, removes a specific access right for an existing **subject** (an entity held accountable for actions) over an existing object, but the object itself remains in the system. Destroying an object removes all permissions related to it, while revoking permission removes only a specific one for a particular subject."
Compare the concept of 'privileges' for individual users versus groups.,"In the context of **subjects** (entities held accountable for actions), **privileges** can be assigned to individual users, but they can also be assigned to a **group** of users. When privileges are assigned to a group, a user joining that group will automatically have the corresponding privileges, and a user quitting the group will lose those permissions. This group-based assignment makes it easier to manage and update permissions for multiple users simultaneously, as opposed to managing privileges for each individual user separately. A user may also belong to multiple groups, accumulating privileges from each."
What are the differences between 'files' and 'directories' as objects in Unix OS?,"In Unix OS, **files** and **directories** are both uniformly treated as **resources**, which are **objects** of access control. A **file** (denoted by '-') is an object used to contain and/or receive information, typically storing data. A **directory** (denoted by 'd') is an object used to organize other files and directories, forming a hierarchical structure. Files hold content, while directories hold references to other resources. Both have a single user owner and group owner."
Compare 'records' with 'files' as examples of objects.,"**Records** and **files** are both examples of **objects**, which are resources to which access is controlled and entities used to contain and/or receive information. A **file** is a general system resource that can contain various types of data. **Records** are typically smaller, structured units of information often found within a file or database. The document mentions operations like 'Read' can view selected records within a file, or 'Create' can create new files or records, indicating that records can be components of files or standalone entities. Both are fundamental units of information that require access control."
What are the differences between 'directories' and 'directory trees' as examples of objects?,"**Directories** and **directory trees** are both examples of **objects**, which are resources to which access is controlled and entities used to contain and/or receive information. A **directory** is a single container for files and other directories. A **directory tree** is a hierarchical structure composed of multiple directories, where directories can contain sub-directories, forming a tree-like organization. So, a directory is a component, while a directory tree is a collection of interconnected directories. Both are fundamental units of information organization that require access control."
Compare 'mailboxes' with 'messages' as examples of objects.,"**Mailboxes** and **messages** are both examples of **objects**, which are resources to which access is controlled and entities used to contain and/or receive information. A **mailbox** is typically a container or storage location for messages. A **message** is the actual unit of information that is sent or received and stored within a mailbox. Therefore, a mailbox acts as a repository, while a message is the content itself. Both are fundamental units of communication that require access control."
