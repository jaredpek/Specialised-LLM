input,output
What are the three main bases of authentication?,"The three main bases of authentication are: what you know, what you possess, and what you are."
Explain the concept of 'what you know' in authentication.,"In authentication, 'what you know' refers to information that only the legitimate user is supposed to know. This typically includes things like passwords or PINs."
Explain the concept of 'what you possess' in authentication.,"In authentication, 'what you possess' refers to an item that only the legitimate user is supposed to have. Examples include a physical key, a security token, or a smart card."
Explain the concept of 'what you are' in authentication.,"In authentication, 'what you are' refers to a unique biological characteristic of the legitimate user. This is commonly known as biometrics and includes things like fingerprints, iris scans, or voice patterns."
What are password-related techniques in authentication?,"Password-related techniques in authentication encompass various methods and strategies for handling passwords, including how they are stored, the policies governing their creation and usage, and alternative forms of passwords."
Describe different methods of password storage.,"Passwords can be stored in several ways: in plaintext, which is considered bad; encrypted, which is fair; or hashed, which is considered good. Hashing is a cryptographic process that converts a password into a fixed-length string of characters."
What are password policies?,"Password policies are rules that are imposed on users regarding the selection of passwords. These policies can include requirements for password complexity, length, and the number of failed attempts allowed before an account is locked."
What is 'salting' of passwords?,"Salting of passwords involves adding random data, known as a salt, to a password before it is hashed. This salt is unique to each password and is stored along with the hash. Salting helps to safeguard passwords in storage and defend against dictionary attacks."
What are alternative forms of passwords?,"Alternative forms of passwords include passphrases, which are longer sequences of words; one-time passwords (OTPs), which are valid for a single session or transaction; and visual passwords, which involve selecting images or patterns."
What is a salt in the context of password security?,A salt is random data that is used as an additional input to a one-way function that hashes a password. Salts are used to safeguard passwords in storage and their primary function is to defend against dictionary attacks.
What is a one-way function?,"A one-way function is a mathematical function that is relatively easy to compute in one direction but computationally infeasible to reverse. This means that given an input, it's easy to calculate the output, but given an output, it's extremely difficult to find the original input."
How are hash functions related to one-way functions?,Hash functions are a type of one-way function. A hash function takes an input of arbitrary length and produces an output of a fixed length. This output is often referred to as a hash value or digest.
What are the properties of a hash function?,A hash function H is considered secure if it satisfies two main properties: pre-image resistance and collision resistance. Pre-image resistance means it's computationally infeasible to find an input x given a hash value y such that H(x) = y. Collision resistance means it's computationally infeasible to find two different inputs x and y such that H(x) = H(y).
What does it mean for a hash function to be pre-image resistant?,"A hash function H is pre-image resistant if, given a hash value y, it is computationally infeasible to find an input x such that H(x) = y. This property is crucial for security as it prevents attackers from determining the original input from its hash."
What does it mean for a hash function to be collision resistant?,"A hash function H is collision resistant if it is computationally infeasible to find a pair of distinct inputs (x, y) such that x is not equal to y, but their hash values are the same, i.e., H(x) = H(y). This property prevents attackers from substituting one input for another with the same hash."
What are some important hash functions for cryptography and password hashing?,"Important hash functions include SHA256 and SHA512, which are used for cryptographic purposes. For password hashing, ARGON2 and bcrypt are commonly used and recommended."
What is the difference between storing passwords in plaintext and using hashed/encrypted passwords?,"When passwords are stored in plaintext, they are stored as is, making them vulnerable to unauthorized access. With hashed/encrypted passwords, the stored information is a transformed version of the original password. This provides a degree of protection against insider threats and attackers who gain access to the system, as they would need to reverse the hashing or encryption to obtain the original password."
What are the security implications of storing passwords in plaintext?,"Storing passwords in plaintext offers no protection against an insider, such as a system administrator, or an attacker who gains access to the system. This lack of protection means that disputes regarding authentication are possible, as credentials could be easily compromised."
How does storing hashed/encrypted passwords improve security?,"Storing hashed or encrypted passwords provides some degree of protection against insider threats and attackers. While the transformed passwords are still stored, they are not the original credentials, making it harder for unauthorized individuals to gain access to user accounts."
Where are password hashes stored in operating systems?,"In operating systems, password hashes are typically stored in a password file. In Windows systems, this is the Security Accounts Manager (SAM) file, located at %windir%\system32\config\SAM. In modern Unix/Linux systems, password hashes are stored in the shadow file, typically found at /etc/shadow."
What is the location of the password file in Windows systems?,"In Windows systems, password hashes are stored in the Security Accounts Manager (SAM) file, which is located at %windir%\system32\config\SAM."
What is the location of the password file in modern Unix/Linux systems?,"In modern Unix/Linux systems, password hashes are stored in the shadow file, which is typically located at /etc/shadow. Older Unix systems used /etc/passwd."
What are intermediate storage locations for passwords at the application level?,"At the application level, passwords may be held temporarily in intermediate storage locations such as buffers, caches, or even on a web page. It is strongly advised not to save passwords in cache."
What is the risk associated with temporary password storage locations like buffers and caches?,"The management of these temporary storage locations is normally beyond the control of the user. This means a password might be kept longer than the user has bargained for, potentially increasing the risk of exposure if these locations are compromised."
What is the core principle of hashed password verification?,"The core principle of hashed password verification is that the verifier (system) does not store the actual passwords, but only their hashes. This means that when a user attempts to log in, their provided password is hashed, and this hash is then compared to the stored hash."
Describe the process of hashed password verification.,"In hashed password verification, a claimant (user) provides their password. This password is then passed through a hash function (h) to generate a hash value. This generated hash is then compared to the stored hash for that user in the password table. If the hashes match, the claimant is accepted; otherwise, they are rejected."
What does the verifier store in a hashed password verification system?,"In a hashed password verification system, the verifier (system) stores the password hashes of the users, not the actual passwords. For each user 'A', it stores their identifier 'A' and the hash of their password, h(password_A)."
What is mutual authentication?,"Mutual authentication is a process where both parties involved in a communication exchange take on the roles of both claimant and verifier. This means that each party proves its identity to the other, ensuring that both are who they claim to be."
What are challenge-response protocols?,"Challenge-response protocols are a sequence of steps used to prove knowledge of shared secrets. In this type of protocol, one party (the challenger) sends a challenge to the other party, who must then respond with a value derived from the challenge and a shared secret. This proves that the responding party knows the secret without revealing it directly."
What is the goal of proving knowledge of a secret without giving it up?,"The goal of proving knowledge of a secret without giving it up is to authenticate a party without revealing the secret itself. This is achieved through techniques like zero-knowledge proofs, which allow one party to prove to another that they know a secret, without revealing any information about the secret itself."
What is weak/simple authentication?,"Weak/simple authentication typically refers to methods that are less secure. This often includes password-based authentication, which can be unilateral, meaning only one entity proves its identity to the verifier. It often involves proving knowledge of a secret by giving it up, such as by sending a password."
What is strong authentication?,"Strong authentication involves more robust security measures. This includes mutual authentication, where both parties verify each other's identity. It also utilizes challenge-response protocols and techniques that allow proving knowledge of a secret without revealing it, such as zero-knowledge proofs."
What is unilateral authentication?,"Unilateral authentication is a type of authentication where only one entity proves its identity to the verifier. For example, in a typical password-based system, the user (claimant) proves their identity to the system (verifier), but the system does not necessarily prove its identity back to the user."
What is the primary function of salts in password security?,"The primary function of salts in password security is to defend against dictionary attacks. By adding a unique random salt to each password before hashing, it becomes much harder for an attacker to use pre-computed rainbow tables or brute-force common passwords."
What is the difference between 'encrypted' and 'hashed' passwords in terms of security?,"While both 'encrypted' and 'hashed' passwords transform the original password, hashing is generally considered more secure for password storage. Encryption can often be reversed if the decryption key is compromised, whereas a properly implemented hash function is designed to be computationally infeasible to reverse. Hashing is a one-way process."
Explain the concept of 'proving knowledge of secret by giving up the secret'.,"Proving knowledge of a secret by giving up the secret means that the authentication process involves transmitting the secret itself. For example, sending a password over a network directly allows the verifier to check it, but also exposes the secret if intercepted."
Explain the concept of 'proving knowledge of secret WITHOUT giving up the secret'.,"Proving knowledge of a secret WITHOUT giving up the secret refers to authentication methods where the secret itself is never transmitted. This is achieved through cryptographic techniques like challenge-response protocols and zero-knowledge proofs, where the verifier can be convinced that the claimant knows the secret without ever seeing the secret itself."
What are the risks of storing passwords in plaintext?,Storing passwords in plaintext poses significant risks. It offers no protection against unauthorized access by insiders (like system administrators) or external attackers who gain access to the system. This can lead to account compromise and potential disputes.
How do hashed/encrypted passwords offer protection against insiders?,"Hashed/encrypted passwords offer some degree of protection against insiders because the stored data is not the original password. Even if an insider accesses the password database, they would only see the hashed or encrypted versions, which are much harder to decipher than plaintext passwords."
What is the role of a verifier in authentication?,The role of a verifier in authentication is to confirm the identity of a claimant. The verifier receives credentials or proof of identity from the claimant and checks them against a trusted source or established criteria to determine if the claimant is legitimate.
What is the role of a claimant in authentication?,"The role of a claimant in authentication is to prove their identity to a verifier. The claimant provides information or evidence, such as a password, a token, or biometric data, to demonstrate that they are who they claim to be."
What are the implications of 'dispute is possible' when storing passwords in plaintext?,"The statement 'dispute is possible' when storing passwords in plaintext means that if a user's account is compromised, it can be difficult to definitively prove whether the user themselves was negligent or if the system's security was breached. Since the passwords are not protected, it's hard to trace the source of the compromise."
What is the purpose of the Security Accounts Manager (SAM) file in Windows?,"The Security Accounts Manager (SAM) file in Windows systems is used to store password hashes for user accounts. This file is a critical component of Windows security, ensuring that user authentication is based on hashed credentials rather than plaintext passwords."
What is the purpose of the shadow file in Unix/Linux systems?,"The shadow file in Unix/Linux systems is used to store sensitive user account information, primarily password hashes. By separating password hashes from the main user account information (typically in /etc/passwd), it enhances security, as only the root user can access the shadow file."
Why is it important not to save passwords in cache?,"It is important not to save passwords in cache because caches are temporary storage locations whose management is often beyond the user's control. If a password resides in a cache, it could be retained longer than intended, increasing the risk of exposure if the system or device is compromised."
What does it mean for a password to be kept longer than the user has bargained for?,"This phrase refers to situations where passwords, due to the way they are managed in temporary storage locations like buffers or caches, might persist for a longer duration than the user expects or desires. This extended presence increases the window of opportunity for potential attackers to access them."
What is the significance of the diagram in 'HASHED PASSWORD VERIFICATION' regarding password storage?,"The diagram in 'HASHED PASSWORD VERIFICATION' highlights a crucial security principle: the verifier (system) should not store the actual passwords, but only their hashes. This is visually represented by the password table storing 'h(password_A)' instead of 'password_A'."
How does the hashed password verification process prevent the verifier from knowing the user's password?,"The hashed password verification process prevents the verifier from knowing the user's password because the verifier only stores and compares hash values. When the claimant provides their password, it is hashed locally by the verifier, and this resulting hash is compared to the stored hash. The original password is never revealed or stored by the verifier."
