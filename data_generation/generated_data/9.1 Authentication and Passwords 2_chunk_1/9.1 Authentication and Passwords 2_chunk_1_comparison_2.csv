input,output
What are the three main bases of authentication?,"The three main bases of authentication are: what you know, what you possess, and what you are."
Compare Weak/Simple Authentication with Strong Authentication.,"Weak/Simple Authentication is typically password-based and unilateral, meaning one entity (the claimant) proves its identity to the verifier. This often involves proving knowledge of a secret by giving it up. Strong Authentication, on the other hand, involves mutual authentication where both parties take on the roles of claimant and verifier. It also utilizes challenge-response protocols, which are sequences of steps to prove knowledge of shared secrets without revealing the secret itself, often employing zero-knowledge proofs."
Explain the concept of unilateral authentication.,"Unilateral authentication is a type of weak or simple authentication where only one entity, referred to as the claimant, proves its identity to another entity, the verifier. This process typically involves the claimant revealing a secret to demonstrate their knowledge."
What is a challenge-response protocol in the context of authentication?,"A challenge-response protocol is a method used in strong authentication. It involves a sequence of steps designed to prove knowledge of shared secrets. In this protocol, one party (the verifier) issues a challenge to the other party (the claimant), who must then provide a response that can only be generated if they possess the shared secret. This allows the verifier to confirm the claimant's identity without the claimant having to reveal the secret directly."
What are zero knowledge proofs in authentication?,"Zero knowledge proofs are a technique used in strong authentication, specifically within challenge-response protocols. They allow a party to prove knowledge of a secret to another party without revealing any information about the secret itself. This means the verifier can be convinced that the claimant knows the secret, but gains no knowledge that could be used to compromise the secret."
Describe password storage methods.,"Password storage can be done in several ways: Plaintext, which is considered BAD as passwords are stored as is; ""encrypted"", which is fair; and ""hashed"", which is considered good. Hashing is a preferred method for storing passwords securely."
What are password policies?,"Password policies are rules that need to be imposed on users regarding password selection and usage. These policies can include requirements for password complexity, length, and the number of failed attempts allowed before an account is locked."
Explain the concept of 'salting' passwords.,"Salting of passwords involves adding random data, known as salt, to the password before it is hashed. This salt is unique for each password. When storing passwords, the salt is stored alongside the hashed password. This process makes it significantly harder for attackers to use precomputed rainbow tables or dictionary attacks to crack passwords, as each hashed password will be unique even if the original password is the same."
What are alternative forms of passwords?,"Alternative forms of passwords include passphrases, which are longer sequences of words; one-time passwords (OTPs), which are generated for a single use; and visual passwords, which involve selecting images or patterns."
Define 'salt' in the context of password security.,A salt is random data that is used as an additional input to a one-way function that hashes a password. Salts are used to safeguard passwords in storage. Their primary function is to defend against dictionary attacks by ensuring that identical passwords produce different hashes.
What is the primary function of salts in password security?,"The primary function of salts is to defend against dictionary attacks. By adding a unique random string (salt) to each password before hashing, even identical passwords will have different hash values, making precomputed attack tables ineffective."
What is a one-way function?,"A one-way function, denoted as f, is a mathematical function that is relatively easy to compute in one direction but computationally hard to reverse. This means that given an input x, it is easy to compute the output f(x), but given an output y, it is difficult to find an input x such that y = f(x)."
How do hash functions relate to one-way functions?,"Hash functions are a specific type of one-way function. A hash function, denoted as H, takes an input x of arbitrary length and produces an output H(x) of a fixed length. This process is easy to compute but difficult to reverse, making it suitable for cryptographic applications like password storage."
What are the properties of a hash function?,"A hash function H is considered to satisfy two key properties: Pre-image resistance, meaning it is computationally infeasible to find an input x given a hash value y such that H(x) = y. Collision resistance, meaning it is computationally infeasible to find two different inputs x and y such that x ≠ y and H(x) = H(y)."
Explain pre-image resistance for hash functions.,"Pre-image resistance means that for a given hash value y, it is computationally infeasible to find any input x such that H(x) = y. In simpler terms, you cannot easily determine the original input data from its hash."
Explain collision resistance for hash functions.,"Collision resistance means that it is computationally infeasible to find two distinct inputs, x and y, such that their hash values are the same, i.e., H(x) = H(y) where x ≠ y. This property ensures that different inputs produce unique hashes, preventing malicious manipulation."
What are some important hash functions mentioned for cryptographic use?,"Some important hash functions mentioned for cryptographic use include SHA256, SHA512, and KECCAK."
What are some important hash functions mentioned for password hashing?,Important hash functions specifically mentioned for password hashing are ARGON2 and bcrypt.
Compare storing passwords in plaintext versus hashed/encrypted passwords.,"Storing passwords in plaintext means the passwords are stored as is, and the claimant's password is checked directly against this database. This offers no protection against insiders or attackers who gain system access, making disputes possible. Storing passwords as hashed/encrypted means only the encrypted or hashed versions are stored. The claimant's password is then hashed/encrypted and checked against this database. This provides some degree of protection against insiders and attackers."
What are the security implications of storing passwords in plaintext?,"Storing passwords in plaintext offers no protection against insider threats (like a system administrator) or external attackers who gain access to the system. This lack of security means that if the password database is compromised, all user passwords are immediately exposed, potentially leading to unauthorized access to other systems and services. It also makes disputes about account access more likely."
How does hashed/encrypted password storage improve security?,"Hashed/encrypted password storage improves security by storing a transformed version of the password (either encrypted or, more commonly, hashed). When a user attempts to log in, their entered password is also transformed using the same method and compared to the stored version. This means that even if the password database is compromised, the attacker does not get the actual passwords, only their hashed or encrypted forms, which are significantly harder to reverse. This provides a degree of protection against both insider and external threats."
Where are password hashes stored in Windows operating systems?,"In Windows systems, password hashes are stored in the Security Accounts Manager (SAM) file, located at %windir%\system32\config\SAM."
Where are password hashes stored in modern Unix/Linux systems?,"In modern Unix/Linux systems, password hashes are stored in the shadow file, located at /etc/shadow. Historically, they were in /etc/passwd, but this is less secure."
What are intermediate storage locations for passwords at the application level?,"At the application level, passwords may be held temporarily in intermediate storage locations such as buffers, caches, or even on a web page. It is strongly advised not to save passwords in cache. The management of these locations is typically beyond the user's control, and passwords might be retained longer than intended."
What is the risk associated with temporary password storage locations at the application level?,"The risk with temporary password storage locations like buffers, caches, or web pages is that their management is usually outside the user's control. This means a password might be kept for longer than the user expects or desires, increasing the window of vulnerability if these locations are accessed by unauthorized parties."
Explain the process of hashed password verification.,"In hashed password verification, the verifier (system) does not store the actual passwords, only their hashes. When a claimant A provides their password and identifier, the system retrieves the stored hash for A from its password table. The system then applies the same hash function (h) to the password provided by A. If the computed hash matches the stored hash, the claimant is accepted; otherwise, they are rejected."
What does the verifier store in a hashed password verification system?,"In a hashed password verification system, the verifier (system) stores only the hashes of the passwords, not the passwords themselves. This is a crucial security measure."
What is the role of the password table in hashed password verification?,"The password table in hashed password verification stores the mapping between user identifiers (like 'A') and their corresponding password hashes (like 'h(password_A)'). When a claimant attempts to authenticate, the system uses this table to retrieve the stored hash for comparison."
What happens when a claimant's provided password hash matches the stored hash during verification?,"When the hash computed from the claimant's provided password matches the stored hash in the password table, the system accepts the claimant's identity."
What happens when a claimant's provided password hash does not match the stored hash during verification?,"If the hash computed from the claimant's provided password does not match the stored hash in the password table, the system rejects the claimant's identity."
What are the three categories for the basis of authentication?,"The three categories for the basis of authentication are: what you know, what you possess, and what you are."
What is the difference between proving knowledge of a secret by giving it up versus proving knowledge without giving it up?,"Proving knowledge of a secret by giving it up is characteristic of weak/simple authentication, where the claimant reveals the secret to the verifier. Proving knowledge of a secret WITHOUT giving it up is a feature of strong authentication, often achieved through challenge-response protocols and zero-knowledge proofs, where the secret itself is never exposed."
What is the significance of 'encrypted' passwords compared to 'plaintext' passwords?,"Storing passwords as 'encrypted' is considered fairer than storing them in 'plaintext'. While plaintext passwords are stored as is and offer no security, encrypted passwords are transformed, providing a level of protection. However, 'hashed' passwords are generally considered the best practice for password storage due to their one-way nature."
What is the difference between 'fair' and 'good' password storage methods?,"In terms of password storage, 'encrypted' is considered 'fair', meaning it offers some protection. 'Hashed' passwords, however, are considered 'good' because hashing is a one-way process that is computationally difficult to reverse, providing a higher level of security compared to simple encryption."
What are the implications of password policies on users?,"Password policies dictate rules for password selection and usage, such as complexity requirements and limits on failed login attempts. These policies are imposed on users to enhance security by ensuring stronger, more unique passwords and preventing brute-force attacks."
How does salting protect against dictionary attacks?,"Salting protects against dictionary attacks by adding a unique random string (salt) to each password before it is hashed. This means that even if two users have the same password, their stored hashes will be different. Attackers typically use precomputed tables (like rainbow tables) for dictionary attacks. Salting makes these tables ineffective because the hash depends not only on the password but also on the unique salt."
What are passphrases as an alternative to traditional passwords?,"Passphrases are an alternative form of password that consists of a sequence of words. They are generally longer and easier for humans to remember than complex character-based passwords, while still offering strong security when implemented correctly."
What is the definition of a one-way function in cryptography?,"In cryptography, a one-way function is a function that is easy to compute in the forward direction but extremely difficult to compute in the reverse direction. Given an input, you can easily find the output, but given an output, it is computationally infeasible to find the original input."
How does the property of being 'hard to reverse' apply to one-way functions?,"The 'hard to reverse' property of a one-way function means that if you are given the output of the function, it is computationally infeasible to find the input that produced that output. This is a fundamental characteristic that makes one-way functions useful in security applications like password hashing."
What is the relationship between hash functions and one-way functions?,"Hash functions are a specific type of one-way function. While a general one-way function maps an input to an output, a hash function specifically takes an input of any length and produces a fixed-length output. Both share the property of being easy to compute but hard to reverse."
What is the length characteristic of a hash function's output?,"A hash function produces an output of a fixed length, regardless of the length of the input. For example, a specific hash algorithm will always produce a 256-bit output, whether the input is a single character or a large document."
What does it mean for a hash function to be 'computationally infeasible'?,"When a hash function is described as 'computationally infeasible' to reverse or find collisions, it means that the amount of computational resources (time, processing power) required to perform such an operation is prohibitively large, making it practically impossible with current technology."
What is the security benefit of pre-image resistance in hash functions?,"Pre-image resistance ensures that given a hash value, it is computationally infeasible to find the original input. This is crucial for security because it prevents an attacker from reconstructing sensitive data (like a password) from its hash."
Why is collision resistance important for hash functions?,"Collision resistance is important because it ensures that it is computationally infeasible to find two different inputs that produce the same hash output. If collisions were easy to find, an attacker could potentially substitute a malicious input for a legitimate one that has the same hash, compromising data integrity and security."
What are the security risks of storing passwords in plaintext?,"Storing passwords in plaintext poses significant security risks. If the system is compromised, attackers gain direct access to all user passwords. This can lead to unauthorized access to user accounts, data breaches, and identity theft. It also means that a system administrator could potentially view any user's password."
How do hashed/encrypted passwords protect against insider threats?,"Hashed/encrypted passwords offer protection against insider threats because even authorized personnel with access to the password database cannot see the actual passwords. They can only see the hashed or encrypted versions, which are not directly usable for authentication or revealing the original password without significant computational effort."
What is the purpose of the 'h' in the diagram of hashed password verification?,"In the diagram of hashed password verification, 'h' represents the hash function. It is applied to the claimant's provided password to generate a hash value that is then compared against the stored hash in the password table."
"What is the difference between the input 'password, A' and 'password' in the diagram?","In the diagram, 'password, A' likely represents the information provided by Claimant A, which includes both their identifier ('A') and their password. The input labeled 'password' going into the 'h' function represents only the password itself, which is then hashed."
What does the equality check ('=') signify in the hashed password verification diagram?,"The equality check ('=') in the hashed password verification diagram signifies the comparison between the hash computed from the claimant's provided password (h(password)) and the stored hash for that claimant (h(password_A)). If these two values are equal, the authentication is successful ('ACCEPT'); otherwise, it fails ('REJECT')."
