input,output
What are the fundamental bases of authentication?,"The fundamental bases of authentication are categorized into three main types: what you know, what you possess, and what you are."
Describe the concept of password-related techniques.,"Password-related techniques encompass various methods and strategies associated with the creation, storage, and verification of passwords. This includes how passwords are stored (e.g., plaintext, encrypted, or hashed), the policies that govern their selection and usage (e.g., complexity rules, number of failed attempts), the practice of salting passwords, and alternative forms of passwords such as passphrases, one-time passwords, and visual passwords."
Explain the concept of attacks on passwords and defense mechanisms.,"Attacks on passwords refer to methods used by malicious actors to gain unauthorized access to systems or data by compromising user credentials. Defense mechanisms are the strategies and technologies employed to prevent or mitigate these attacks. This can involve implementing strong password policies, using secure storage methods like hashing and salting, and employing robust authentication protocols."
Define authentication tokens and biometrics.,"Authentication tokens are physical or digital devices that generate a unique code or signal used to verify a user's identity. Biometrics, on the other hand, are unique biological or behavioral characteristics of an individual, such as fingerprints, facial features, or voice patterns, used for authentication."
Differentiate between weak/simple authentication and strong authentication.,"Weak/simple authentication is typically password-based and unilateral, where one entity (the claimant) proves its identity to the verifier. This often involves proving knowledge of a secret by revealing it. Strong authentication, conversely, involves mutual authentication, where both parties act as claimant and verifier. It also utilizes challenge-response protocols, which allow parties to prove knowledge of shared secrets without revealing the secret itself, often through zero-knowledge proofs."
What is unilateral authentication?,"Unilateral authentication is a type of authentication where only one entity, referred to as the claimant, proves its identity to another entity, the verifier. In this process, the claimant demonstrates knowledge of a secret to establish their legitimacy."
Explain challenge-response protocols in the context of authentication.,"Challenge-response protocols are a sequence of steps used in authentication to prove knowledge of shared secrets. In this method, the verifier issues a challenge to the claimant, who then responds using the shared secret. This process allows the claimant to prove they possess the secret without actually revealing it to the verifier, enhancing security."
What are zero knowledge proofs in authentication?,"Zero knowledge proofs, in the context of authentication, are a method that allows one party to prove to another that they know a value (e.g., a secret) without revealing any information about that value itself. This is a key component of advanced authentication protocols that enhance security by minimizing the exposure of sensitive information."
Describe the different methods of password storage.,"Passwords can be stored in several ways: Plaintext, where the password is stored as is (considered BAD); Encrypted, where the password is transformed using an encryption algorithm (considered fair); and Hashed, where the password is transformed using a one-way hash function (considered good). Hashing is generally preferred for its security benefits."
What are password policies and what do they entail?,"Password policies are a set of rules and requirements imposed on users regarding the selection and usage of their passwords. These policies typically dictate criteria such as the minimum length, complexity (e.g., requiring a mix of uppercase and lowercase letters, numbers, and symbols), and the number of failed login attempts allowed before an account is locked. They aim to enhance password security and prevent unauthorized access."
Explain the concept of 'salting' of passwords.,"Salting of passwords involves adding random, unique data (called a salt) to each password before it is hashed. This salt is then stored along with the hashed password. The primary function of salts is to defend against dictionary attacks by ensuring that even identical passwords have different hash values, making it harder for attackers to use pre-computed hash tables."
What are alternative forms of passwords?,"Alternative forms of passwords include passphrases, which are longer sequences of words; one-time passwords (OTPs), which are valid for a single login session; and visual passwords, which involve selecting images or patterns. These alternatives aim to improve usability and security compared to traditional, shorter passwords."
Define 'salt' in the context of password security.,"A salt is random data that is used as an additional input to a one-way function that hashes a password. Salts are used to safeguard passwords in storage. The primary function of salts is to defend against dictionary attacks by ensuring that each password's hash is unique, even if the passwords themselves are identical."
How are salts used to safeguard passwords in storage?,"Salts are used to safeguard passwords in storage by being combined with the original password before hashing. This means that each password, even if it's the same for multiple users, will have a unique hash value when a unique salt is applied. This prevents attackers from using pre-computed hash tables to quickly crack passwords, as they would need to generate hashes for each unique salt as well."
What is the primary function of salts in password security?,"The primary function of salts in password security is to defend against dictionary attacks. By adding a unique random string (the salt) to each password before hashing, it ensures that identical passwords produce different hash values, rendering pre-computed rainbow tables ineffective."
What is a one-way function?,"A one-way function is a mathematical function that is relatively easy to compute in one direction but computationally hard to reverse. This means that given an input, it is simple to calculate the output, but given an output, it is extremely difficult to find the original input that produced it."
How do one-way functions relate to password storage security?,"Password storage security relies on cryptographic constructs called one-way functions. Specifically, hash functions, which are a type of one-way function, are used to store passwords. Instead of storing the actual passwords, their hashed versions are stored. This is because one-way functions are easy to compute (hashing a password) but hard to reverse (recovering the original password from its hash)."
What is a hash function?,"A hash function is a type of one-way function. It takes an input of arbitrary length and produces an output of a fixed length, known as a hash value or digest. Hash functions are designed to be deterministic, meaning the same input will always produce the same output, and computationally infeasible to reverse."
Describe the properties of a hash function regarding input and output length.,"A hash function takes an input of arbitrary length, meaning it can process data of any size. However, it produces an output of a fixed length, regardless of the input size. This fixed-length output is often referred to as a hash value or digest."
Explain the concept of 'pre-image resistance' for hash functions.,"A hash function is considered pre-image resistant if, given a hash value 'y', it is computationally infeasible to find an input 'x' such that H(x) = y. This means it's extremely difficult to determine the original input data from its hash."
Define 'collision resistance' in the context of hash functions.,"A hash function is collision resistant if it is computationally infeasible to find two different inputs, 'x' and 'y', such that their hash values are the same, i.e., H(x) = H(y) where x â‰  y. This property is crucial for ensuring the integrity of data."
What are some important hash functions mentioned for cryptographic and password hashing purposes?,"Important hash functions include SHA256 and SHA512, which are used for cryptographic purposes. For password hashing, ARGON2 and bcrypt are highlighted as significant options."
Compare and contrast plaintext password storage with hashed/encrypted password storage.,"In plaintext password storage, passwords are stored as is, making them vulnerable to direct access by insiders or attackers who gain system access. The claimant's password is checked against this database. In contrast, hashed/encrypted password storage involves storing either the encrypted or hashed versions of passwords. The claimant's password is then hashed/encrypted and checked against this stored version. This provides some degree of protection against insider/attacker access, as the original passwords are not directly stored."
What are the security implications of storing passwords in plaintext?,"Storing passwords in plaintext offers no protection against an insider (such as a system administrator) or an attacker who gains access to the system. This lack of security means that a compromise of the system directly exposes all user passwords, potentially leading to widespread unauthorized access and disputes."
How does hashed/encrypted password storage improve security?,"Hashed/encrypted password storage improves security by storing transformed versions of passwords (either encrypted or hashed). When a user attempts to log in, their entered password is also transformed and compared to the stored version. This means that even if the storage is compromised, the attacker does not gain direct access to the original passwords, providing a degree of protection against insiders and external attackers."
Where are password hashes typically stored in operating systems?,"In operating systems, password hashes are stored in specific password files. In Windows systems, they are stored in the Security Accounts Manager (SAM) file, located at %windir%\system32\config\SAM. In Unix/Linux systems, historically they were in /etc/passwd, but modern systems store them in the more secure shadow file, located at /etc/shadow."
Describe the location of password storage in Windows operating systems.,"In Windows operating systems, password hashes are stored within the Security Accounts Manager (SAM) file. This file is typically found in the system directory, specifically at the path %windir%\system32\config\SAM."
Where are password hashes stored in modern Unix/Linux systems?,"In modern Unix/Linux systems, password hashes are stored in the shadow file, which is located at the path /etc/shadow. While older Unix systems used /etc/passwd, the shadow file provides enhanced security by restricting access to the password hashes."
Explain how passwords might be temporarily stored at the application level.,"At the application level, passwords may be held temporarily in intermediate storage locations such as buffers, caches, or even on a web page. It is strongly advised not to save passwords in cache. The management of these temporary storage locations is usually beyond the user's control, which can result in a password being retained for longer than intended."
What are the risks associated with temporary password storage at the application level?,"The risks associated with temporary password storage at the application level include the potential for passwords to be held in buffers, caches, or on web pages, which are often beyond the user's control. This can lead to a password being kept longer than the user expects or desires, increasing the window of vulnerability if these locations are compromised."
Describe the process of hashed password verification.,"In hashed password verification, the verifier (system) does not store the actual passwords but only their hashes. When a claimant provides their password, the system hashes it using the same hash function. This computed hash is then compared to the stored hash. If they match, the claimant is accepted; otherwise, they are rejected. The claimant's original password is not revealed to the verifier."
What is the role of the verifier in hashed password verification?,"In hashed password verification, the verifier's role is to not store the actual passwords but rather their hashed representations. When a claimant submits their password, the verifier hashes it and compares this newly generated hash with the stored hash. If they match, the claimant is authenticated."
How does the system verify a claimant's password when using hashed passwords?,"When using hashed passwords, the system verifies a claimant's password by first taking the password provided by the claimant and hashing it using the same one-way function that was used to create the stored hash. This newly generated hash is then compared to the hash stored in the password table. If the two hashes are identical, the system accepts the claimant's identity."
What is the significance of the verifier not storing passwords in hashed password verification?,"The significance of the verifier not storing passwords in hashed password verification is a major security enhancement. It means that even if the verifier's system is compromised, the attacker will only obtain the hashed passwords, not the original, sensitive password data. This greatly reduces the risk of password theft and misuse."
Explain the 'password table' in the context of hashed password verification.,"The 'password table' in hashed password verification is a database maintained by the verifier (system) that stores the hashed representations of users' passwords. For each user (e.g., Claimant A), it stores their identifier and the corresponding hash of their password (h(password A)). This table is used to compare against the hash of the password submitted by the claimant during the verification process."
What does 'h(password A)' represent in the context of hashed password verification?,'h(password A)' represents the hashed version of the password belonging to Claimant A. The function 'h' denotes a one-way hash function. This hashed value is stored in the verifier's password table and is used to verify Claimant A's identity without storing their actual password.
Describe the flow of information when a claimant attempts to authenticate using a hashed password.,"When a claimant attempts to authenticate, they provide their identifier (e.g., A) and their password. The verifier (system) looks up the claimant's identifier in its password table to retrieve the stored hash of their password. The verifier then takes the password submitted by the claimant, hashes it using the same hash function, and compares this computed hash with the stored hash. If they match, the claimant is accepted; otherwise, they are rejected."
What are the two main categories of authentication bases?,"The two main categories of authentication bases are: 1. What you know (e.g., passwords, PINs). 2. What you possess (e.g., security tokens, smart cards). 3. What you are (biometrics like fingerprints, facial recognition)."
What is the difference between 'proving knowledge of secret by giving up the secret' and 'proving knowledge of secret WITHOUT giving up the secret'?,"Proving knowledge of a secret by giving up the secret means revealing the secret itself to the verifier, which is characteristic of weak/simple authentication. Proving knowledge of a secret WITHOUT giving up the secret, often through challenge-response protocols and zero-knowledge proofs, is a feature of strong authentication where the secret's existence is proven without its disclosure."
What is the role of 'h' in the diagram of hashed password verification?,"In the diagram of hashed password verification, 'h' represents a hash function. It is the one-way function used to transform the claimant's submitted password into a hash value, which is then compared against the stored hash for verification."
What does it mean for a hash function to be 'computationally infeasible'?,"For a hash function, 'computationally infeasible' means that it is practically impossible or would require an unreasonable amount of computational resources (time, processing power) to perform a specific operation, such as reversing the hash (finding the pre-image) or finding two inputs that produce the same hash (finding a collision)."
What are the implications of a password hash being 'pre-image resistant'?,"If a password hash is pre-image resistant, it means that given a hash value, it is computationally infeasible to find the original password that generated it. This is a critical security property for password storage, as it prevents attackers from easily recovering passwords even if they obtain the hash values."
Why is 'collision resistance' important for hash functions used in security?,"Collision resistance is important for hash functions used in security because it ensures that it is computationally infeasible to find two different inputs that produce the same hash output. If collisions were easy to find, an attacker could potentially substitute a malicious input with the same hash as a legitimate one, compromising data integrity and security."
What is the relationship between one-way functions and hash functions?,"Hash functions are a specific type of one-way function. While a one-way function is broadly defined as being easy to compute in one direction and hard to reverse, hash functions are designed to take an input of arbitrary length and produce a fixed-length output, with properties like pre-image resistance and collision resistance, making them suitable for cryptographic applications like password storage."
What are the potential vulnerabilities when passwords are stored in plaintext?,"When passwords are stored in plaintext, the primary vulnerability is the complete lack of protection against unauthorized access. Any individual, whether an insider like a system administrator or an external attacker who gains access to the system, can directly view and steal all user passwords. This makes systems highly susceptible to compromise and misuse."
How does the use of 'encrypted' passwords differ from 'hashed' passwords in terms of security?,"While both encrypted and hashed passwords offer better security than plaintext, hashing is generally considered superior for password storage. Encryption is typically reversible with a key, meaning if the key is compromised, the passwords can be decrypted. Hashing, using one-way functions, is designed to be computationally infeasible to reverse, making it much harder for attackers to recover the original passwords even if they obtain the hashes."
What is the purpose of the 'ACCEPT' and 'REJECT' outputs in the hashed password verification diagram?,"The 'ACCEPT' and 'REJECT' outputs in the hashed password verification diagram represent the outcome of the authentication process. If the computed hash of the submitted password matches the stored hash, the system outputs 'ACCEPT', indicating successful authentication. If they do not match, the system outputs 'REJECT', indicating that the provided credentials are not valid."
Can you explain the concept of 'mutual authentication'?,"Mutual authentication is a security process where both parties involved in a communication or transaction verify each other's identity. In this scenario, both the claimant and the verifier take on the roles of proving their identity to the other, ensuring that both ends of the connection are legitimate."
