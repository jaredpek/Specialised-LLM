input,output
What are the fundamental bases of authentication?,"The fundamental bases of authentication are categorized into three main types: what you know, what you possess, and what you are. These represent the different categories of information or attributes that can be used to verify an individual's identity."
Explain password-related techniques in authentication.,"Password-related techniques involve using passwords as a primary method for authentication. This includes how passwords are stored (e.g., plaintext, encrypted, or hashed), the policies that govern password selection and usage (e.g., complexity rules, number of failed attempts), the practice of 'salting' passwords, and alternative forms of passwords such as passphrases, one-time passwords, and visual passwords."
What are the different methods for storing passwords?,"Passwords can be stored in several ways: in plaintext, which is considered bad; encrypted, which is fair; or hashed, which is considered good. Hashing is a process where a password is transformed into a fixed-length string using a one-way function, making it difficult to retrieve the original password."
What is a 'salt' in the context of password security?,"A 'salt' is random data that is used as an additional input to a one-way function when hashing a password. Salts are employed to safeguard passwords in storage and primarily serve to defend against dictionary attacks. By adding a unique salt to each password before hashing, even identical passwords will produce different hash values, thus enhancing security."
What are password policies and what do they entail?,"Password policies are rules that need to be imposed on users regarding the selection and usage of passwords. These policies can include requirements for password complexity, minimum length, and the number of failed attempts allowed before an account is locked or reset. The goal of password policies is to enhance the security of user accounts."
What are alternative forms of passwords?,"Alternative forms of passwords include passphrases, which are longer sequences of words; one-time passwords (OTPs), which are valid for a single login session; and visual passwords, which involve selecting images or patterns. These alternatives aim to provide more robust security than traditional, shorter passwords."
What is a one-way function and how is it relevant to password storage?,"A one-way function, denoted as 'f', is a mathematical function that is relatively easy to compute in one direction but computationally hard to reverse. In the context of password storage, one-way functions, specifically hash functions, are used to transform passwords into a secure, irreversible format. Given an input 'x', it is easy to compute f(x), but given an output 'y', it is hard to find 'x' such that y = f(x)."
How do hash functions work as one-way functions?,"Hash functions are a type of one-way function. A hash function 'f' takes an input 'x' of arbitrary length and produces an output 'f(x)' of a fixed length. This process is designed to be easy to compute the hash from the input, but extremely difficult to derive the original input from the hash output."
What are the key properties of hash functions?,"Hash functions have two crucial properties: pre-image resistance and collision resistance. A hash function H is pre-image resistant if, given a hash value 'y', it is computationally infeasible to find an input 'x' such that H(x) = y. It is collision resistant if it is computationally infeasible to find two different inputs, 'x' and 'y' (where x ≠ y), such that H(x) = H(y)."
What does it mean for a hash function to be pre-image resistant?,"A hash function H is considered pre-image resistant if, for any given hash value 'y', it is computationally infeasible to find an input 'x' that would produce that hash value, i.e., H(x) = y. This property is essential for security as it prevents attackers from determining the original input (like a password) from its hash."
What does it mean for a hash function to be collision resistant?,"A hash function H is collision resistant if it is computationally infeasible to find two distinct inputs, 'x' and 'y', such that they produce the same hash output, i.e., x ≠ y and H(x) = H(y). This property is important to ensure that different inputs do not lead to the same hash, which could be exploited in various attacks."
What are some important hash functions used for cryptography and password hashing?,"Important hash functions include SHA256 and SHA512, which are commonly used for cryptographic purposes. For password hashing, specific algorithms like ARGON2 and bcrypt are recommended due to their design that makes them more resistant to brute-force attacks."
Compare plaintext password storage with hashed/encrypted password storage.,"In plaintext password storage, passwords are stored as is, making them directly accessible. This offers no protection against insiders or attackers who gain system access, potentially leading to disputes. In contrast, hashed/encrypted password storage involves storing either the encrypted or hashed versions of passwords. The claimant's password is then checked against these stored versions. This method provides some degree of protection against insider threats and attackers."
What are the security implications of storing passwords in plaintext?,"Storing passwords in plaintext offers no protection against unauthorized access. If an insider, such as a system administrator, or an external attacker gains access to the system, they can easily view and misuse the plaintext passwords. This lack of security can lead to disputes and significant breaches of user privacy and account security."
How does hashed/encrypted password storage improve security?,"Hashed/encrypted password storage enhances security by storing transformed versions of passwords (either encrypted or hashed). When a user attempts to log in, their entered password is also transformed and compared to the stored version. This means that even if the storage is compromised, the actual passwords are not directly exposed, providing a degree of protection against insiders and attackers."
Where are password hashes typically stored in operating systems?,"In operating systems, password hashes are generally stored in specific password files. In Windows systems, they are stored in the Security Accounts Manager (SAM) file, typically located at `%windir%\system32\config\SAM`. In Unix-like systems, historically, they were in `/etc/passwd`, but modern systems store them in the more secure `/etc/shadow` file."
Explain the storage of password hashes in Windows operating systems.,"In Windows operating systems, password hashes are stored within the Security Accounts Manager (SAM) file. This file is a critical component of the system's security architecture and is usually found in the `%windir%\system32\config\` directory."
Describe the storage of password hashes in Unix/Linux operating systems.,"In Unix and Linux operating systems, password information was traditionally stored in the `/etc/passwd` file. However, for enhanced security, modern Unix/Linux systems store password hashes in a separate file called `/etc/shadow`. This separation prevents unauthorized users from easily accessing sensitive password hash data."
"What are intermediate storage locations for passwords at the application level, and what are the risks?","At the application level, passwords may be temporarily held in intermediate storage locations such as buffers, caches, or even on a web page. The risk associated with these locations is that their management is typically beyond the user's control. This can result in a password being retained for longer than intended, increasing the window of vulnerability if these locations are compromised."
Why is it advised not to save passwords in cache?,"It is advised not to save passwords in cache because caches are intermediate storage locations whose management is often beyond the user's control. Passwords stored in caches might be retained longer than necessary, increasing the risk of exposure if the system or application is compromised. This can lead to unauthorized access to accounts."
How does the management of intermediate password storage locations affect users?,"The management of intermediate storage locations for passwords, such as buffers and caches, is normally beyond the control of the user. This means that users cannot directly dictate how long their passwords are stored in these temporary locations. Consequently, a password might be kept longer than the user anticipates or desires, potentially increasing security risks."
Describe the process of hashed password verification.,"In hashed password verification, the verifier (system) does not store the actual passwords but only their hashes. When a claimant (user) provides their password, it is first hashed using the same function used for storage. This computed hash is then compared to the stored hash. If the hashes match, the claimant is authenticated; otherwise, they are rejected."
What is the role of the verifier in hashed password verification?,"In hashed password verification, the verifier, which is typically the system, is responsible for checking the authenticity of the claimant. Crucially, the verifier does not store the claimant's actual password. Instead, it stores the hash of the password. When the claimant provides their password, the verifier hashes it and compares the result with the stored hash to determine if the claimant is legitimate."
What is the 'password table' in the context of hashed password verification?,"The 'password table' in the context of hashed password verification is a database maintained by the verifier (system). This table stores user identifiers (like 'A' for Claimant A) and their corresponding password hashes (h(password_A)). When a claimant attempts to authenticate, their provided password is hashed, and the resulting hash is looked up in this table."
How is a password verified when it is stored as a hash?,"When a password is stored as a hash, verification involves the claimant providing their password. This password is then processed by a hash function 'h' to generate a hash value, h(password). This generated hash is then compared to the stored hash associated with the claimant's identity. If the two hashes match, the password is considered valid, and the claimant is accepted; otherwise, they are rejected."
What happens if the computed hash does not match the stored hash during verification?,"If the computed hash of the provided password does not match the stored hash associated with the user's identity, the verification process fails. In this scenario, the system will reject the login attempt, indicating that the provided password was incorrect or did not correspond to the stored credentials."
What is the difference between weak/simple authentication and strong authentication?,"Weak/simple authentication is typically password-based and unilateral, where one entity proves its identity to another. Strong authentication, on the other hand, often involves mutual authentication, where both parties act as claimant and verifier. It also utilizes techniques like challenge-response protocols and zero-knowledge proofs to prove knowledge of secrets without revealing them."
Describe weak/simple authentication.,"Weak or simple authentication is characterized by being password-based. It is also unilateral, meaning that only one entity, the claimant, proves its identity to the verifier. The core principle is proving knowledge of a secret, such as a password, by providing it directly."
What does 'unilateral' mean in the context of weak/simple authentication?,"In the context of weak/simple authentication, 'unilateral' signifies that the authentication process involves only one party proving their identity. Specifically, one entity, referred to as the claimant, presents evidence of their identity to another entity, the verifier. There is no reciprocal verification of the verifier's identity by the claimant."
Explain 'mutual authentication' in strong authentication.,"Mutual authentication is a key component of strong authentication where both parties involved in the communication process take on the roles of both claimant and verifier. This means that not only does the user prove their identity to the system, but the system also proves its identity to the user. This ensures that both parties are who they claim to be."
What are challenge-response protocols?,"Challenge-response protocols are a method used in strong authentication. In this type of protocol, the verifier sends a 'challenge' (a random piece of data) to the claimant. The claimant must then use a shared secret to compute a 'response' to this challenge, which is sent back to the verifier. The verifier checks if the response is correct, thereby proving the claimant's knowledge of the shared secret without the secret itself being transmitted."
What is a 'zero knowledge proof' in authentication?,"A zero-knowledge proof is a method used in authentication where one party (the prover) can prove to another party (the verifier) that they know a certain piece of information, without revealing any information about the knowledge itself, other than the fact that they possess it. This is achieved by demonstrating knowledge of a secret without disclosing the secret."
How does strong authentication differ from weak authentication regarding proving knowledge of secrets?,"Weak authentication typically involves proving knowledge of a secret by directly revealing it (e.g., typing a password). Strong authentication, through methods like challenge-response protocols and zero-knowledge proofs, allows a party to prove knowledge of a secret *without* revealing the secret itself. This significantly enhances security by preventing the secret from being intercepted or compromised."
What are the main categories of authentication bases?,"The main categories of authentication bases are: what you know (e.g., a password or PIN), what you possess (e.g., a security token or smart card), and what you are (e.g., biometric data like fingerprints or facial features)."
What is the purpose of 'salting' passwords?,"The purpose of 'salting' passwords is to enhance their security when stored. By adding a unique, random string of data (the salt) to each password before hashing it, the resulting hash is unique even for identical passwords. This makes it much harder for attackers to use precomputed rainbow tables or to efficiently crack multiple passwords using dictionary attacks."
What are the risks associated with storing passwords in plaintext?,"Storing passwords in plaintext poses significant risks. It offers no protection against unauthorized access by system administrators (insiders) or external attackers who manage to gain access to the system. This can lead to account compromise, data breaches, and identity theft, and can also result in disputes over unauthorized actions."
How do authentication tokens contribute to security?,"Authentication tokens, such as hardware tokens or software-based tokens generating one-time passwords, contribute to security by providing a second factor of authentication. They represent something the user 'possesses', making it harder for an attacker to gain access even if they have stolen or guessed the user's password (something they 'know')."
What are biometrics in the context of authentication?,"Biometrics in authentication refers to using unique biological characteristics of an individual to verify their identity. These characteristics fall into the category of 'what you are'. Examples include fingerprints, facial recognition, iris scans, and voice patterns. Biometric authentication offers a high level of security as these traits are difficult to forge or steal."
What is the primary function of salts in password security?,"The primary function of salts in password security is to defend against dictionary attacks. By incorporating a unique salt with each password before hashing, the effectiveness of pre-computed hash tables (like rainbow tables) is significantly reduced, making it computationally more expensive and time-consuming for attackers to crack passwords."
What is the difference between 'encrypted' and 'hashed' passwords in terms of security?,"While both encryption and hashing transform passwords, hashing is generally preferred for password storage because it is a one-way process. Encrypted data can be decrypted if the key is known, potentially revealing the original password. Hashed passwords, on the other hand, are computationally infeasible to reverse, meaning the original password cannot be recovered from the hash alone, offering better protection."
What does it mean to 'prove knowledge of secret by giving up the secret'?,"To 'prove knowledge of a secret by giving up the secret' means that in order to authenticate, a user must transmit the secret itself (like a password) to the verifier. This is characteristic of weak or simple authentication methods, as it exposes the secret to potential interception during transmission."
What does it mean to 'prove knowledge of secret WITHOUT giving up the secret'?,"To 'prove knowledge of a secret WITHOUT giving up the secret' refers to advanced authentication techniques, such as zero-knowledge proofs or challenge-response protocols. In these methods, a user can demonstrate that they possess a secret (like a password or a private key) without actually transmitting the secret itself. This significantly enhances security by preventing the secret from being exposed."
What are the implications of 'dispute is possible' in plaintext password storage?,"The phrase 'dispute is possible' in the context of plaintext password storage highlights a critical security weakness. Because passwords are stored in an easily accessible format, if unauthorized access or actions occur, it becomes difficult to definitively prove who was responsible. This ambiguity can lead to disputes regarding accountability and the integrity of the system."
How can password policies help mitigate risks?,"Password policies help mitigate risks by enforcing rules that strengthen password security. For instance, requiring complex passwords, setting minimum lengths, and limiting the number of failed login attempts can make it harder for attackers to guess or brute-force passwords, thereby reducing the likelihood of unauthorized access."
What is the role of hash functions in password storage security?,"Hash functions play a crucial role in password storage security by providing a one-way transformation of passwords. Instead of storing passwords in their original form, their hashed versions are stored. This means that even if the storage is compromised, the actual passwords cannot be easily retrieved, as reversing a hash function is computationally infeasible."
What are the main components of the outline presented?,"The main components of the outline are: 1. Basis of authentication (what you know, what you possess, what you are), 2. Password-related techniques, 3. Attacks on passwords and defense mechanisms, and 4. Authentication tokens and biometrics."
What are the three categories of authentication bases?,"The three categories of authentication bases are: what you know, what you possess, and what you are."
What are the main topics covered in the document regarding authentication?,"The document covers the basis of authentication, password-related techniques, attacks on passwords and defense mechanisms, and authentication tokens and biometrics. It also delves into concepts like one-way functions, hash functions, and different methods of password storage and verification."
