input,output
Define a brute force attack in the context of password security.,"A brute force attack is a guessing attack against passwords that attempts to discover a password by systematically enumerating all possible passwords and their corresponding hashes in sequence. The attacker then checks if any of these generated hashes match the target hashes, thereby identifying the correct password. A hash is the output of a one-way function, typically used to store passwords securely by transforming them into a fixed-size string of characters."
How does a brute force guessing attack against passwords operate?,"A brute force guessing attack against passwords operates by enumerating all possible passwords and their hashes in sequence. For each generated password, its hash is computed and then compared against the target hashes. If a match is found, the password is considered cracked. A hash is a fixed-size string of characters generated from a password using a one-way cryptographic function."
What is a primary measure to defend against brute force attacks?,"A primary measure against a brute force attack is to increase the space of possible passwords. This can be achieved by requiring longer passwords and allowing a greater variety of symbols, such as alphabets (both uppercase and lowercase), numerals, and special signs. Increasing the password space makes it computationally more expensive and time-consuming for an attacker to enumerate all possible combinations."
Explain the role of password policy in increasing the difficulty of brute force attacks.,"Password policy is an important means to increase the difficulties of brute force attacks. By enforcing policies that require longer passwords and a wider range of character types (e.g., alphabets, numerals, signs), the policy effectively expands the 'password space' â€“ the total number of possible password combinations. A larger password space means an attacker needs to try significantly more combinations, thus increasing the time and computational resources required for a successful brute force attack."
How is password entropy measured according to the document?,"Password entropy is measured by 2^k, where 'k' represents the bitsize of the password space. The bitsize 'k' is the base-2 logarithm of the total number of possible passwords. For 'n' characters in a password and 'c' choices per character, the total number of possible passwords is c^n, and 'k' is calculated as [lg(c^n)]/lg2."
What does 'n' represent in the context of password entropy calculation?,"In the context of password entropy calculation, 'n' represents the number of characters in a password. For example, if a password is 'hello', then 'n' would be 5."
What does 'c' represent in the context of password entropy calculation?,"In the context of password entropy calculation, 'c' represents the number of choices available per character. This refers to the size of the character set from which each character in the password can be chosen. For instance, if only lowercase alphabets are allowed, 'c' would be 26."
Provide the formula for calculating the total number of possible passwords given 'n' and 'c'.,"The formula for calculating the total number of possible passwords, given 'n' characters in the password and 'c' choices per character, is c^n. For example, if there are 5 characters and 26 lowercase alphabet choices, the number of possible passwords is 26^5."
How is the bitsize 'k' derived for password complexity?,"The bitsize 'k' for password complexity is derived as the base-2 logarithm of the total number of possible passwords. If the total number of possible passwords is c^n, then 'k' is calculated using the formula k = [lg(c^n)]/lg2. This value 'k' quantifies the entropy or strength of the password space."
Calculate the bitsize 'k' for a 5-character lowercase password.,"For a 5-character lowercase password, 'n' (number of characters) is 5, and 'c' (choices per character, for lowercase alphabets) is 26. The total number of possible passwords is 26^5. To find the bitsize 'k', we solve 2^k = 26^5, which gives k = [lg(26^5)]/lg2. This calculation results in k = 23.5. This means a 5-character lowercase password has an entropy equivalent to 23.5 bits."
What information is presented in Table 10.1 regarding password space?,"Table 10.1 presents the bitsize of password space for various character combinations. It shows how the bitsize 'k' changes based on the number of characters ('n') and the character set size ('c'). The table specifically gives the base-2 logarithm of the number of possible passwords, which is calculated as c^n, where 'n' is the password length and 'c' is the number of choices per character."
"According to Table 10.1, what is the bitsize of password space for a 7-character password using only lowercase alphabets?","According to Table 10.1, for a 7-character password using only lowercase alphabets (where 'c' is 26 for lowercase), the bitsize of the password space is 32.9."
"What is the bitsize of password space for a 9-character password using mixed case alphanumeric characters, as per Table 10.1?","According to Table 10.1, for a 9-character password using mixed case alphanumeric characters (where 'c' is 62), the bitsize of the password space is 53.6."
"Based on Table 10.1, what is the bitsize of password space for a 10-character password using keyboard characters?","Based on Table 10.1, for a 10-character password using keyboard characters (where 'c' is 95), the bitsize of the password space is 65.7."
"How does increasing the number of characters ('n') impact the bitsize of password space, according to Table 10.1?","According to Table 10.1, increasing the number of characters ('n') consistently increases the bitsize of the password space for all character combinations. For example, for lowercase passwords, increasing 'n' from 5 to 10 increases the bitsize from 23.5 to 47.0, indicating a significantly larger and more complex password space."
"How does increasing the character set size ('c') impact the bitsize of password space for a fixed password length, according to Table 10.1?","According to Table 10.1, increasing the character set size ('c') for a fixed password length ('n') increases the bitsize of the password space. For instance, for a 5-character password, moving from lowercase (c=26, k=23.5) to keyboard characters (c=95, k=32.9) significantly increases the bitsize, making the password space larger and more difficult to brute force."
What is the cracking speed of current software password crackers?,"At present, software password crackers can crack up to 16 million passwords per second per personal computer (pc)."
How long is it estimated to take to crack a password with 2^35 complexity on a 3GHz PC?,"It is estimated that a password with 2^35 complexity can be cracked within a day on a 3GHz PC, though this is considered a generous estimate."
Describe the cracking capability of an FPGA Hardware cracker.,An FPGA (Field-Programmable Gate Array) Hardware cracker is capable of cracking 56 bits of password complexity within 5 days. This provides a significant speed advantage over software-based cracking on a standard PC for certain complexities.
How do ASIC crackers compare in speed to FPGA crackers?,ASIC (Application-Specific Integrated Circuit) crackers are significantly faster than FPGA crackers. They can be more than 10 times faster than an FPGA for password cracking tasks.
Define a dictionary attack in the context of password security.,"A dictionary attack is a method of cracking hashed passwords that exploits a weakness in human-chosen passwords. Instead of enumerating all possible combinations like a brute force attack, it tries to guess passwords by using a list of commonly used words, phrases, and patterns (a 'dictionary') that tend to derive from natural languages."
"Why are hashed passwords, especially human-generated ones, vulnerable to dictionary attacks even if they have high entropy?","Hashed passwords, particularly human-generated ones, are vulnerable to dictionary attacks even if they have high entropy because humans tend to choose passwords that are based on words or phrases found in natural languages. While high entropy prevents brute-force attacks by making the password space too large, a dictionary attack specifically targets this human tendency by trying a pre-compiled list of common words and their variations, rather than all possible character combinations."
What weakness do dictionary attacks exploit in human-chosen passwords?,"Dictionary attacks exploit the weakness in human-chosen passwords that they tend to derive from words in natural languages. Instead of creating truly random strings, users often select easily memorable words, names, or common phrases, making them susceptible to being guessed from a pre-compiled list (a dictionary)."
Outline the steps involved in a dictionary attack.,"The steps involved in a dictionary attack are: 1. Guess some commonly used passwords (from a dictionary list). 2. Compute the hash values for these guessed passwords. 3. Look for the same hash values in the password file that the attacker has obtained. If a computed hash matches a stored hash, the corresponding password from the dictionary is identified as the original password."
What is the implication of multiple users having the same password in the context of dictionary attacks?,"The implication of multiple users having the same password is that they will all have the same hash value stored in the password file. This makes dictionary attacks more efficient because if an attacker cracks one instance of a common password, they automatically gain access to all accounts that use that identical password, as their stored hash values will match."
What is the strategy behind using a pre-computed hash table for cracking hashed passwords?,"The strategy behind using a pre-computed hash table for cracking hashed passwords is to pre-calculate and store a large number of password-hash pairs. This table can then be used in offline attacks to quickly find the original password corresponding to a stolen hash by simply looking up the hash in the table, rather than computing hashes on the fly for each guess."
Describe the contents of a pre-computed hash table used for password cracking.,"A pre-computed hash table used for password cracking contains pairs of passwords and their corresponding hashes. Essentially, it's a lookup table where an attacker can find a password by searching for its hash, or vice versa, without needing to perform the hashing computation in real-time during an attack."
How is the size of a pre-computed hash table determined?,"The size of a pre-computed hash table is determined by the number of password candidates ('k') and the bit length of each hash ('n'). If there are 'k' password candidates and each hash has 'n' bits, then the table will have a size of k Ã— n. This represents the total storage required for all the pre-computed password-hash pairs."
What is a practical limitation of using pre-computed hash tables for password cracking?,"A practical limitation of using pre-computed hash tables for password cracking is that it may not be practical if the number of password candidates ('k') is very large. As 'k' increases, the size of the hash table (k Ã— n) grows proportionally, requiring immense storage capacity and making the table unwieldy or impossible to generate and store."
What is the primary purpose of password salting?,"The primary purpose of password salting is to reduce the effectiveness of offline attacks that utilize pre-computed hashes, such as rainbow tables or pre-computed hash tables. By adding a unique salt to each password before hashing, salting ensures that even identical passwords will produce different hash values, thus rendering generic pre-computed tables useless."
Explain the mechanism of password salting.,"The mechanism of password salting involves adding a unique, random string, known as a 'salt', to a password *before* applying the hash function. Instead of hashing just the password, the system hashes the combination of the password and its salt (e.g., hash(password + salt)). The resulting hash and the salt value are then stored together. This ensures that even if two users have the same password, their stored hashes will be different due to their unique salts."
What is a 'salt' in the context of password security?,"In the context of password security, a 'salt' is a random string that is added to a password before it is hashed. It is not a secret value but is unique for each password. Its purpose is to ensure that even identical passwords produce different hash values when stored, thereby protecting against pre-computed hash attacks."
List two key properties of a salt used in password security.,Two key properties of a salt used in password security are: 1. A salt is just a random string. 2. Each password has its own unique salt. These properties ensure that the salt is unpredictable and that identical passwords will yield different hash values when salted and hashed.
How is the salt value stored in a system that uses password salting?,"In a system that uses password salting, the salt value is stored along with the hash of the password+salt. This means that when a user attempts to log in, the system retrieves both the stored hash and the stored salt, combines the entered password with the retrieved salt, hashes the combination, and then compares it to the stored hash."
"How does password salting impact an attacker's effort when trying to crack passwords using pre-computation, specifically for an n-bit salt?","Password salting significantly increases an attacker's effort when trying to crack passwords using pre-computation. For a salt of 'n' bits, the attacker needs to pre-compute 2^n hashes for *each* potential password. This means that instead of computing a single hash for a common password and comparing it against all stored hashes, the attacker must generate a unique pre-computed table for every possible salt value, making the pre-computation impractical for large salt sizes."
Describe the initial step in the password salting illustration provided.,"The initial step in the password salting illustration shows the original password, 'hello', being combined with a 'salt'. This 'add salt' step transforms 'hello' into 'hello3ab9', indicating that the random salt '3ab9' has been appended or prepended to the original password before any hashing occurs."
What is the importance of securely storing passwords?,"It is essential to store passwords in a way that prevents them from being obtained by an attacker, even if the application or database where they are stored is compromised. Secure storage is crucial because once an attacker acquires stored password hashes, they are always able to brute force those hashes offline, potentially revealing the original passwords."
What capability does an attacker gain after acquiring stored password hashes?,"After an attacker has acquired stored password hashes, they are always able to brute force those hashes offline. This means they can attempt to crack the passwords at their leisure, using their own computational resources, without needing to interact with the compromised system, making the attack harder to detect and mitigate in real-time."
What is a defender's primary strategy to mitigate offline password attacks?,"As a defender, the primary strategy to mitigate offline password attacks is to slow them down. This is achieved by selecting hash algorithms that are as resource-intensive as possible. These algorithms require significant computational power and time to process, making it much more expensive and time-consuming for an attacker to brute force hashes offline, even with powerful hardware."
What characteristics should hash algorithms possess to effectively slow down offline attacks?,"To effectively slow down offline attacks, hash algorithms should be as resource-intensive as possible. This means they should require significant computational power, memory, or time to execute, making it costly for an attacker to perform a large number of hash computations in a short period, thereby increasing the time needed for a successful brute force or dictionary attack."
"What is the bitsize for a 6-character password using lowercase alphanumeric characters, according to Table 10.1?","According to Table 10.1, for a 6-character password using lowercase alphanumeric characters (where 'c' is 36), the bitsize of the password space is 31.0."
"What is the bitsize for an 8-character password using keyboard characters, according to Table 10.1?","According to Table 10.1, for an 8-character password using keyboard characters (where 'c' is 95), the bitsize of the password space is 52.6."
Compare the bitsize of a 5-character lowercase password with a 5-character mixed case alphanumeric password based on Table 10.1.,"According to Table 10.1, a 5-character lowercase password has a bitsize of 23.5. In contrast, a 5-character mixed case alphanumeric password has a bitsize of 29.8. This shows that increasing the character set from 26 (lowercase) to 62 (mixed case alphanumeric) significantly increases the password's entropy and complexity for the same length."
How does the 'match' concept relate to brute force attacks?,"In brute force attacks, the 'match' concept refers to the successful identification of a password. After enumerating a password and computing its hash, the attacker checks whether this computed hash 'matches' the target hash (the hash stored in the compromised system). A match indicates that the enumerated password is the correct one."
Why is increasing the variety of symbols important in password creation?,"Increasing the variety of symbols (alphabets, numerals, signs) in password creation is important because it expands the 'choices per character' ('c') available for each position in the password. This directly increases the total password space (c^n) and, consequently, the bitsize ('k'), making the password significantly more difficult to guess or brute force by an attacker."
What is the significance of 2^k in password entropy measurement?,"The significance of 2^k in password entropy measurement is that it represents the effective number of possible passwords in the password space. 'k' is the bitsize, and 2^k quantifies the total number of unique combinations an attacker would theoretically need to try in a brute force scenario to guarantee finding the password. A higher 'k' (and thus a larger 2^k) indicates greater password strength and resistance to brute force attacks."
What is the estimated time for an FPGA Hardware cracker to crack 56 bits?,An FPGA Hardware cracker is estimated to crack 56 bits of password complexity within 5 days.
How does the vulnerability to dictionary attacks arise from human password choices?,"The vulnerability to dictionary attacks arises from human password choices because people tend to select passwords that are memorable and often derived from words in natural languages. This predictability allows attackers to compile lists of common words and phrases (dictionaries) and test their hashes, rather than having to brute force every possible character combination, which is much more efficient for cracking such human-chosen passwords."
What is the purpose of the 'hash function' step in the password salting illustration?,"In the password salting illustration, the 'hash function' step takes the combined password and salt (e.g., 'hello3ab9') as input and transforms it into a fixed-size, seemingly random string of characters (e.g., '39e19b234...'). This one-way cryptographic function is designed so that it's computationally infeasible to reverse the process and derive the original password+salt from the hash, ensuring secure storage."
Why is it important for a salt to be a random string?,"It is important for a salt to be a random string to ensure its unpredictability. If salts were predictable or reused, an attacker could potentially pre-compute hashes for common passwords combined with those predictable salts, or identify patterns. A random salt ensures that each password, even if identical to another, produces a unique hash, effectively defeating pre-computed hash attacks."
What is an 'offline attack' in the context of password security?,"An 'offline attack' in the context of password security refers to an attack where the attacker has obtained a copy of the stored password hashes (e.g., from a compromised database) and attempts to crack them using their own computational resources, without needing to interact with the live system. This allows them to perform brute force or dictionary attacks at their own pace and scale, making detection more difficult."
