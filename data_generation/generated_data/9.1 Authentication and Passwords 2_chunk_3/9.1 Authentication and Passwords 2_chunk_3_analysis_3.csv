input,output
Define a brute force guessing attack against passwords.,"A brute force guessing attack against passwords attempts to guess a password by systematically enumerating all possible passwords and their corresponding hashes in sequence, then checking if any of these generated hashes match the target hashes."
What measures can be taken to defend against a brute force attack?,"A primary measure against a brute force attack is to increase the space of possible passwords. This can be achieved by using longer passwords and allowing a greater variety of symbols, such as alphabets, numerals, and signs, within the password. Implementing a strong password policy is an important means to increase the difficulty of such attacks."
Explain the role of a password policy in mitigating brute force attacks.,"A password policy is an important means to increase the difficulties of a brute force attack. By enforcing rules such as minimum length, character variety (alphabets, numerals, signs), and complexity, it expands the space of possible passwords, making it significantly harder and more time-consuming for an attacker to enumerate all combinations."
How is password entropy measured according to the provided information?,"Password entropy is measured by 2^k, where 'k' represents the bitsize of the password space. The bitsize 'k' is the base-2 logarithm of the total number of possible passwords. For 'n'-character passwords with 'c' choices per character, the total number of possible passwords is 'c^n', and thus 'k = log2(c^n)'."
How many possible passwords exist for a 5-character lowercase password?,"For a 5-character lowercase password, there are 26 choices per character (alphabets). The number of possible passwords is calculated as c^n, where 'c' is the number of choices per character and 'n' is the number of characters. Therefore, for 5-character lowercase passwords, there are 26^5 possible passwords."
Calculate the bitsize 'k' for a 5-character lowercase password.,"To find the bitsize 'k' for a 5-character lowercase password, we first determine the number of possible passwords, which is 26^5 (since there are 26 lowercase choices for each of the 5 characters). The complexity 'k' is then found by solving the equation 2^k = 26^5. This yields k = [log(26^5)] / log(2) = 23.5. This 'k' value represents the base-2 logarithm of the number of possible passwords."
Describe the information presented in Table 10.1 regarding password space.,"Table 10.1 presents the bitsize of password space for various character combinations. It illustrates how the bitsize, denoted as 'k', changes based on the number of characters ('n') and the character set choices ('c'). The table gives the base-2 logarithm of the number of possible passwords, where the total number of 'n'-character passwords, given 'c' choices per character, is 'c^n'."
"According to Table 10.1, what is the bitsize of password space for 5-character lowercase passwords?","According to Table 10.1, for 5-character lowercase passwords (where 'n' = 5 and 'c' corresponds to 26 lowercase characters), the bitsize of the password space is 23.5. This value represents 'k' in the expression 2^k, which is the base-2 logarithm of the total number of possible passwords."
"What is the bitsize of password space for 10-character passwords using keyboard characters, as per Table 10.1?","As per Table 10.1, for 10-character passwords utilizing keyboard characters (where 'n' = 10 and 'c' corresponds to 95 keyboard characters), the bitsize of the password space is 65.7. This 'k' value signifies the base-2 logarithm of the total number of possible passwords for this combination."
What is the current cracking speed of software password crackers on a typical PC?,"At present, software password crackers can crack up to 16 million passwords per second (pswd/sec) on a personal computer (pc)."
How long would it take to crack a password with 2^35 complexity using a 3GHz PC?,"A password with 2^35 complexity can be cracked within approximately one day on a 3GHz PC, based on a generous estimation."
Describe the cracking capability of an FPGA Hardware cracker.,An FPGA Hardware cracker is estimated to be capable of cracking 56 bits of password complexity within 5 days.
Compare the speed of ASIC crackers to FPGA Hardware crackers.,"ASIC crackers are significantly faster than FPGA Hardware crackers, being capable of cracking passwords more than 10 times faster."
Define a dictionary attack in the context of password cracking.,"A dictionary attack is a method that exploits weaknesses in human-chosen passwords, which tend to derive from words in natural languages. It involves guessing commonly used passwords, computing their hash values, and then looking for these hash values in a stored password file to find matches."
Are passwords with high entropy immune to dictionary attacks?,"While choosing passwords with high entropy generally prevents brute-force attacks, hashed passwords, especially those generated by humans, are still vulnerable to dictionary attacks. This is because human-chosen passwords often derive from words found in natural languages, which a dictionary attack leverages."
How does a dictionary attack work to compromise passwords?,"A dictionary attack works by first guessing a list of commonly used passwords. For each guessed password, it computes its hash value. Finally, it compares these computed hash values against the hash values stored in the password file, looking for matches to identify compromised passwords."
What is a pre-computed hash table strategy for cracking hashed passwords?,"A pre-computed hash table strategy for cracking hashed passwords involves creating a hash table in advance. This table contains pairs of passwords and their corresponding hashes, allowing an attacker to quickly look up a password if its hash is known, rather than computing it on the fly."
What is the size of a pre-computed hash table given 'k' password candidates and 'n' bit hashes?,"If there are 'k' password candidates and each hash has 'n' bits, then a pre-computed hash table would have a size of 'k \u00d7 n'. This size can become impractical if 'k' (the number of password candidates) is very large."
Under what conditions might a pre-computed hash table strategy become impractical?,"A pre-computed hash table strategy may become impractical if the number of password candidates, denoted as 'k', is very large. A large 'k' would result in an excessively large table size ('k \u00d7 n', where 'n' is the hash bit length), making it difficult to store and manage."
What is the primary purpose of password salting?,"The primary purpose of password salting is to reduce the effectiveness of offline attacks that utilize pre-computed hashes, such as rainbow tables. By adding a unique salt to each password before hashing, it makes pre-computing hashes for common passwords much less efficient."
Define 'salt' in the context of password salting.,"In the context of password salting, a 'salt' is a random string that is added to a password before the hash function is applied. This random string is unique for each password, meaning each password has its own salt."
Describe the process of password salting.,"The process of password salting involves adding a unique, random string, known as a 'salt', to a password before applying the hash function. The resulting hash is then stored along with its corresponding salt value. This ensures that even identical passwords will produce different hash values because their unique salts will lead to different inputs for the hash function."
Where is the salt value stored in a password salting scheme?,"In a password salting scheme, the salt value is stored along with the hash of the password+salt. This allows the system to retrieve the correct salt when verifying a password by combining it with the user-provided password before hashing and comparing."
How does password salting increase the effort required for an attacker using pre-computed hashes?,"Password salting significantly increases an attacker's effort because each password has its own unique salt. For a salt of 'n' bits, the attacker would need to pre-compute 2^n hashes for the *same password* to account for all possible salt values. This effectively negates the efficiency gains of pre-computed hash tables for multiple users with the same password."
What is the fundamental principle for storing passwords securely?,"The fundamental principle for storing passwords securely is to do so in a way that prevents them from being obtained by an attacker, even if the application or database where they are stored becomes compromised."
What is the implication once an attacker acquires stored password hashes?,"Once an attacker has acquired stored password hashes, they are always able to brute force these hashes offline. This means they can attempt to crack the passwords without interacting with the compromised system, making it a persistent threat."
"As a defender, what is the primary strategy to mitigate offline password attacks?","As a defender, the primary strategy to mitigate offline password attacks is to slow them down. This is achieved by selecting hash algorithms that are as resource-intensive as possible, making the brute-force process computationally expensive and time-consuming for the attacker."
How does increasing password length affect the difficulty of a brute force attack?,"Increasing password length directly increases the space of possible passwords. For 'n'-character passwords with 'c' choices per character, the number of possibilities is 'c^n'. A longer 'n' exponentially increases this number, making it significantly more difficult and time-consuming for a brute force attack to enumerate all combinations."
Explain how allowing more varieties of symbols in passwords impacts brute force attacks.,"Allowing more varieties of symbols (alphabets, numerals, signs) in passwords increases the number of choices per character ('c'). This, in turn, exponentially expands the total space of possible passwords ('c^n'), making it much harder for a brute force attack to guess the correct password by enumerating all combinations."
"Using Table 10.1, determine the bitsize 'k' for a 6-character lowercase alphanumeric password.","According to Table 10.1, for a 6-character password using lowercase alphanumeric characters (where 'n' = 6 and 'c' corresponds to 36 lowercase alphanumeric choices), the bitsize 'k' is 31.0. This value represents the base-2 logarithm of the total number of possible passwords."
"What is the bitsize 'k' for an 8-character mixed case alphanumeric password, based on Table 10.1?","Based on Table 10.1, for an 8-character password using mixed case alphanumeric characters (where 'n' = 8 and 'c' corresponds to 62 mixed case alphanumeric choices), the bitsize 'k' is 47.6. This 'k' value signifies the base-2 logarithm of the total number of possible passwords."
"Referencing Table 10.1, what is the bitsize 'k' for a 7-character password composed of keyboard characters?","Referencing Table 10.1, for a 7-character password composed of keyboard characters (where 'n' = 7 and 'c' corresponds to 95 keyboard characters), the bitsize 'k' is 46.0. This 'k' value represents the base-2 logarithm of the total number of possible passwords."
Differentiate between a brute force attack and a dictionary attack.,"A brute force attack attempts to guess a password by systematically enumerating all possible combinations and their hashes. In contrast, a dictionary attack exploits the tendency of human-chosen passwords to derive from natural language words; it guesses commonly used words, computes their hashes, and checks for matches in the password file, rather than trying every single possible character combination."
Why are human-generated passwords particularly vulnerable to dictionary attacks?,Human-generated passwords are particularly vulnerable to dictionary attacks because people tend to choose passwords that are memorable and often derive from words found in natural languages. This inherent weakness allows attackers to compile lists of common words and phrases (dictionaries) and efficiently test their hashes against stored password hashes.
Explain the role of hashing in password storage and its implications for security.,"Hashing plays a crucial role in password storage by transforming a password into a fixed-size string of characters (a hash value) that is difficult to reverse. This prevents the direct storage of plain-text passwords. However, the implication for security is that if an attacker acquires these stored password hashes, they can still attempt to brute force them offline, meaning they can try to guess the original passwords by computing hashes of their guesses and comparing them to the acquired hashes."
What is an 'offline attack' in the context of password cracking?,"An 'offline attack' in the context of password cracking refers to a scenario where an attacker has acquired stored password hashes and is able to attempt to crack them without needing to interact with the live system or application. This allows them to perform brute-force or dictionary attacks at their own pace and with their own computational resources, often making it more efficient and less detectable than online attempts."
Why are resource-intensive hash algorithms recommended for password storage?,"Resource-intensive hash algorithms are recommended for password storage because they are designed to be computationally expensive. This characteristic serves as a defense mechanism to slow down offline attacks. By requiring significant processing power and time for each hash calculation, these algorithms make brute-forcing a large number of hashes impractical and time-consuming for attackers, even with powerful hardware."
How does password salting specifically reduce the effectiveness of pre-computed hash tables?,"Password salting specifically reduces the effectiveness of pre-computed hash tables by ensuring that each password has a unique salt. This means that even if two users have the same password, their stored hashes will be different because of the unique salts added before hashing. Consequently, an attacker cannot use a single pre-computed hash table (like a rainbow table) to crack multiple passwords; instead, they would need to pre-compute a separate table for each unique salt, which is computationally prohibitive."
A user wants to know the bitsize for a 9-character password using mixed case alphanumeric characters. Provide this information from the table.,"For a 9-character password using mixed case alphanumeric characters, the bitsize of the password space is 53.6, as indicated in Table 10.1. This value represents 'k' in the expression 2^k, which is the base-2 logarithm of the total number of possible passwords."
What is the bitsize for a 10-character password consisting of lowercase alphanumeric characters?,"For a 10-character password consisting of lowercase alphanumeric characters, the bitsize of the password space is 51.7, according to Table 10.1. This 'k' value is the base-2 logarithm of the total number of possible passwords for this specific character combination."
What is the general formula for calculating the number of possible 'n'-character passwords given 'c' choices per character?,"The general formula for calculating the number of possible 'n'-character passwords, given 'c' choices per character, is c^n. Here, 'c' represents the size of the character set available for each position, and 'n' represents the length of the password."
Why is password entropy measured by 2^k?,"Password entropy is measured by 2^k because 'k' represents the bitsize of the password space. This means that the total number of possible passwords is equivalent to 2 raised to the power of 'k'. Using a base-2 logarithm (bitsize) provides a standardized way to quantify the strength or randomness of a password, indicating how many bits of information are required to represent the password space."
"If an application or database storing passwords is compromised, what is the immediate security concern regarding the passwords?","If an application or database storing passwords is compromised, the immediate security concern is that an attacker may obtain the stored password hashes. Once these hashes are acquired, the attacker is always able to brute force them offline, posing a significant risk to user accounts."
Describe the steps illustrated in the 'PASSWORD SALTING' diagram.,"The 'PASSWORD SALTING' diagram illustrates the process where an original password, such as 'hello', has a 'salt' (e.g., '3ab9') added to it, forming 'hello3ab9'. This combined string is then passed through a 'hash function', which produces a hash value (e.g., '39e19b234...'). Finally, both the generated hash and the salt are stored together."
"Based on the document, what are the key elements of a good password policy to increase security?","Based on the document, a good password policy should aim to increase the space of possible passwords. Key elements include enforcing longer passwords and allowing a greater variety of symbols, such as alphabets, numerals, and signs. This directly increases the difficulty of brute force attacks."
How long does it take for an FPGA Hardware cracker to crack 56 bits of password complexity?,An FPGA Hardware cracker is estimated to be able to crack 56 bits of password complexity within 5 days.
"Compare the relative cracking speeds of a 3GHz PC, an FPGA Hardware cracker, and an ASIC cracker for password complexity.","A 3GHz PC can crack 2^35 complexity within a day. An FPGA Hardware cracker can crack 56 bits within 5 days. ASIC crackers are significantly faster than FPGAs, being capable of cracking passwords more than 10 times faster."
Why do attackers use pre-computed hashes in some password cracking strategies?,"Attackers use pre-computed hashes to speed up the cracking process. Instead of calculating the hash for every potential password guess during an attack, they can pre-compute a large table of password-hash pairs. When they acquire a target hash, they can simply look it up in their pre-computed table to find the corresponding password, which is much faster than real-time computation."
Explain why a large 'k' value makes pre-computed hash tables impractical.,"A large 'k' value, representing a vast number of password candidates, makes pre-computed hash tables impractical because the table size would be 'k \u00d7 n' (where 'n' is the hash bit length). This results in an enormous storage requirement that is not feasible to manage or store, rendering the strategy ineffective for very complex password spaces."
Summarize the different types of password attacks discussed in the document.,"The document discusses three main types of password attacks: Brute Force Attack, Dictionary Attack, and attacks leveraging Pre-computed Hash Tables. A Brute Force Attack involves enumerating all possible passwords and their hashes. A Dictionary Attack exploits human-chosen passwords by guessing common words. Pre-computed Hash Tables are used to store password-hash pairs in advance to speed up cracking, which salting aims to mitigate."
