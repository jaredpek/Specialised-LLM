input,output
What is a brute force guessing attack against passwords?,"A brute force guessing attack against passwords is a method where an attacker attempts to guess a password by systematically enumerating all possible passwords and their corresponding hashes in sequence. The attacker then checks if any of these generated hashes match the target hashes, which are typically stored representations of actual passwords."
How can the difficulty of a brute force attack be increased?,"The difficulty of a brute force attack can be increased by expanding the space of possible passwords. This is achieved by using longer passwords and allowing a greater variety of symbols, such as alphabets, numerals, and signs, which makes the total number of possible combinations significantly larger and thus harder to enumerate."
What is the role of password policy in mitigating brute force attacks?,"Password policy is an important means to increase the difficulties of a brute force attack. By enforcing policies that require longer passwords and a wider range of character types (e.g., mixed case, numbers, special characters), the policy effectively increases the password space, making it computationally more intensive and time-consuming for an attacker to guess passwords through brute force."
How is password entropy measured?,"Password entropy is measured by 2^k, where 'k' represents the bitsize of the password space. The bitsize of password space is the base-2 logarithm of the total number of possible passwords for a given character combination and length."
Explain the concept of 'bitsize of password space' as presented in Table 10.1.,"The 'bitsize of password space' refers to the base-2 logarithm of the total number of possible passwords. For 'n'-character passwords with 'c' choices per character, the total number of possible passwords is c^n. The bitsize, 'k', is then calculated as log2(c^n), which is equivalent to [lg(c^n)]/lg2. This value quantifies the complexity or strength of the password space."
How is the complexity 'k' of a password calculated?,"The complexity 'k' of a password is calculated by solving the equation 2^k = N, where N is the total number of possible passwords. This can be expressed as k = [lg(N)]/lg2, which is the base-2 logarithm of the number of possible passwords. For example, for 26^5 possible passwords, k = [lg(26^5)]/lg2 = 23.5."
What does the first entry in Table 10.1 represent?,"The first entry in Table 10.1 corresponds to 5-character lowercase passwords. For this specific combination, there are 26 possible choices per character (lowercase alphabets) and a length of 5 characters. The table indicates a bitsize of password space of 23.5 for this entry."
How many possible passwords are there for a 5-character lowercase password?,"For a 5-character lowercase password, there are 26 possible choices for each character (the 26 lowercase alphabets). Therefore, the total number of possible passwords is 26 raised to the power of 5 (26^5)."
What is the bitsize of password space for a 7-character mixed case alphanumeric password?,"According to Table 10.1, for a 7-character password using mixed case alphanumeric characters (62 choices per character), the bitsize of the password space is 41.7."
What is the bitsize of password space for a 10-character password using keyboard characters?,"According to Table 10.1, for a 10-character password using keyboard characters (95 choices per character), the bitsize of the password space is 65.7."
What is the cracking speed of software password crackers on a typical PC?,"At present, software password crackers can crack up to 16 million passwords per second per PC."
How long would it take a 3GHz PC to crack a password with 2^35 complexity?,"A password with 2^35 complexity can be cracked within approximately one day on a 3GHz PC, based on a generous estimate."
What is an FPGA Hardware cracker and its cracking capability?,"An FPGA Hardware cracker is a type of hardware device, specifically a Field-Programmable Gate Array, used for cracking passwords. It is estimated that one FPGA Hardware cracker can crack 56 bits of password complexity within 5 days."
How do ASIC crackers compare in speed to FPGA crackers?,"ASIC crackers, which are Application-Specific Integrated Circuits, are significantly faster than FPGA crackers. They can be more than 10 times faster than an FPGA Hardware cracker."
What is a dictionary attack?,"A dictionary attack is a method of cracking passwords that exploits weaknesses in human-chosen passwords, which tend to derive from words in natural languages. Instead of enumerating all possible character combinations like a brute force attack, it tries commonly used passwords, words from dictionaries, or variations thereof."
How does choosing passwords with high entropy relate to preventing brute-force attacks?,Choosing passwords with high entropy prevents brute-force attacks because high entropy means a larger and more unpredictable password space. This makes it computationally infeasible for an attacker to enumerate all possible combinations within a reasonable timeframe.
"Why are hashed passwords, especially human-generated ones, vulnerable to dictionary attacks?","Hashed passwords, particularly those that are human-generated, are vulnerable to dictionary attacks because human-chosen passwords often derive from words in natural languages or common patterns. Even if hashed, an attacker can pre-compute hashes for common dictionary words and compare them against the stored hashed passwords, exploiting this predictability."
What weakness do dictionary attacks exploit in human-chosen passwords?,"Dictionary attacks exploit the weakness in human-chosen passwords that they tend to derive from words in natural languages. This predictability allows attackers to compile lists of common words, phrases, and patterns (a 'dictionary') to test against hashed passwords, rather than having to try every possible character combination."
Describe the steps an attacker takes in a dictionary attack when users have the same password.,"When users have the same password, they will also have the same hash value stored in the password file. An attacker performing a dictionary attack would: 1. Guess some commonly used passwords. 2. Compute the hash values for these guessed passwords. 3. Look for these computed hash values in the password file to identify matches."
What is the strategy of using a pre-computed hash table for cracking hashed passwords?,"The strategy of using a pre-computed hash table for cracking hashed passwords involves creating a table in advance that contains pairs of passwords and their corresponding hashes. An attacker can then look up a target hash in this table to find the original password, bypassing the need to compute hashes in real-time during the attack."
What does a pre-computed hash table contain?,"A pre-computed hash table contains pairs of passwords and their corresponding hashes. This table is generated offline before an attack, allowing for rapid lookup of passwords once a hashed password is obtained."
How is the size of a pre-computed hash table determined?,"If there are 'k' password candidates and each hash has 'n' bits, then the size of a pre-computed hash table would be k × n. This represents the total storage required for all the password-hash pairs."
Under what condition might a pre-computed hash table strategy not be practical?,"A pre-computed hash table strategy may not be practical if the number of password candidates, denoted by 'k', is very large. A large 'k' would result in an impractically large table size (k × n bits), requiring excessive storage and lookup times."
What is password salting?,"Password salting is a security technique used to reduce the effectiveness of offline attacks using pre-computed hashes. It involves adding a unique, random string, known as a 'salt', to a password before applying the hash function. This ensures that even identical passwords will produce different hash values."
What is the primary purpose of adding a salt to a password?,"The primary purpose of adding a salt to a password is to reduce the effectiveness of offline attacks that rely on pre-computed hashes, such as rainbow tables or pre-computed hash tables. By making each password's hash unique, even if the passwords are the same, salting prevents attackers from using a single pre-computed table to crack multiple passwords."
When is a salt added to a password during the hashing process?,"A salt is added to a password before applying the hash function. This means the salt is concatenated with the password, and then the combined string (password+salt) is hashed."
What is a salt in the context of password security?,"In the context of password security, a salt is a random string that is added to a password before it is hashed. Its purpose is to ensure that even identical passwords produce different hash values, thereby protecting against pre-computed hash attacks."
Does each password have its own salt?,"Yes, each password has its own unique salt. This is a critical aspect of salting, as it ensures that even if two users choose the exact same password, their stored hash values will be different due to the unique salt applied to each."
Where is the salt value stored after it's used with a password?,"The salt value is stored along with the hash of the password+salt. This allows the system to retrieve the correct salt when a user attempts to log in, combine it with the entered password, and then hash the combination for comparison with the stored hash."
How does salting increase the effort required for an attacker to pre-compute hashes?,"Salting increases the effort required for an attacker to pre-compute hashes because each password has a unique salt. This means that for a salt of 'n' bits, the attacker needs to pre-compute 2^n hashes for the *same* password, effectively requiring a separate pre-computation for every possible salt value, making the attack computationally infeasible."
"If a salt has 'n' bits, how many hashes does an attacker need to pre-compute for the same password?","If a salt has 'n' bits, an attacker needs to pre-compute 2^n hashes for the same password. This is because the attacker would have to account for every possible salt value that could be combined with that password."
Why is it essential to store passwords securely?,"It is essential to store passwords in a way that prevents them from being obtained by an attacker, even if the application or database where they are stored is compromised. This is crucial for protecting user accounts and data integrity."
What can an attacker do after acquiring stored password hashes?,"After an attacker has acquired stored password hashes, they are always able to brute force these hashes offline. This means they can dedicate significant computational resources over time to crack the passwords without needing to interact with the live system, making it a persistent threat."
"As a defender, how can one slow down offline attacks?","As a defender, it is only possible to slow down offline attacks by selecting hash algorithms that are as resource-intensive as possible. This makes the process of cracking hashes computationally more expensive and time-consuming for an attacker, even with dedicated hardware."
What characteristic should hash algorithms have to slow down offline attacks?,"To slow down offline attacks, hash algorithms should be selected for their resource-intensive characteristics. This means choosing algorithms that require significant computational power (CPU cycles, memory) to compute a hash, thereby increasing the time and cost for an attacker to perform brute-force or dictionary attacks."
What is the definition of a hash function in the context of password security?,"While not explicitly defined as a 'hash function' in the document, the context implies it is a one-way mathematical algorithm that transforms a password (and salt) into a fixed-size string of characters (a hash). This hash is then stored instead of the original password, making it difficult to reverse-engineer the original password from the hash."
What is the purpose of enumerating all passwords and their hashes in a brute force attack?,"In a brute force attack, the purpose of enumerating all passwords and their hashes in sequence is to check whether any of these generated password hashes match the target hashes. If a match is found, the corresponding password is then identified as the correct one."
"What are 'alphabets, numerals, and signs' in the context of password security?","In the context of password security, 'alphabets, numerals, and signs' refer to the different categories of characters that can be used to construct a password. Alphabets include uppercase and lowercase letters, numerals are digits (0-9), and signs refer to special characters or symbols. Increasing the variety of these symbols expands the password space, making passwords stronger."
How does the number of choices per character ('c') and password length ('n') affect the number of possible passwords?,The number of choices per character ('c') and the password length ('n') directly determine the total number of possible passwords. The relationship is exponential: the number of possible passwords is c^n. A larger 'c' (more character types) or a larger 'n' (longer password) dramatically increases the total number of combinations.
What is the bitsize of password space for a 5-character lowercase alphanumeric password?,"According to Table 10.1, for a 5-character password using lowercase alphanumeric characters (36 choices per character), the bitsize of the password space is 25.9."
What is the bitsize of password space for a 9-character password using keyboard characters?,"According to Table 10.1, for a 9-character password using keyboard characters (95 choices per character), the bitsize of the password space is 59.1."
What is the bitsize of password space for an 8-character mixed case alphanumeric password?,"According to Table 10.1, for an 8-character password using mixed case alphanumeric characters (62 choices per character), the bitsize of the password space is 47.6."
What is the bitsize of password space for a 6-character password using keyboard characters?,"According to Table 10.1, for a 6-character password using keyboard characters (95 choices per character), the bitsize of the password space is 39.4."
What is the bitsize of password space for a 10-character lowercase alphanumeric password?,"According to Table 10.1, for a 10-character password using lowercase alphanumeric characters (36 choices per character), the bitsize of the password space is 51.7."
What is the bitsize of password space for a 7-character lowercase password?,"According to Table 10.1, for a 7-character lowercase password (26 choices per character), the bitsize of the password space is 32.9."
What is the bitsize of password space for a 9-character mixed case alphanumeric password?,"According to Table 10.1, for a 9-character password using mixed case alphanumeric characters (62 choices per character), the bitsize of the password space is 53.6."
What is the bitsize of password space for an 8-character lowercase alphanumeric password?,"According to Table 10.1, for an 8-character password using lowercase alphanumeric characters (36 choices per character), the bitsize of the password space is 41.4."
What is the bitsize of password space for a 5-character password using keyboard characters?,"According to Table 10.1, for a 5-character password using keyboard characters (95 choices per character), the bitsize of the password space is 32.9."
What is the bitsize of password space for a 6-character mixed case alphanumeric password?,"According to Table 10.1, for a 6-character password using mixed case alphanumeric characters (62 choices per character), the bitsize of the password space is 35.7."
What is the bitsize of password space for a 10-character mixed case alphanumeric password?,"According to Table 10.1, for a 10-character password using mixed case alphanumeric characters (62 choices per character), the bitsize of the password space is 59.5."
