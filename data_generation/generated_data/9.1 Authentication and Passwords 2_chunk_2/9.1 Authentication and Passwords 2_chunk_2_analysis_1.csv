input,output
Describe how passwords are stored in operating systems.,"In operating systems, password hashes are stored in a password file. In a Windows system, passwords are stored in the `Security Accounts Manager (SAM)` file, located at `%windir%\system32\config\SAM`. In Unix systems, passwords were traditionally stored in `/etc/passwd`, but modern Unix/Linux systems store them in the `shadow file`, which is located at `/etc/shadow`."
Explain the difference in password storage locations between Windows and modern Unix/Linux systems.,"In a Windows system, passwords are stored in the `Security Accounts Manager (SAM)` file, found at `%windir%\system32\config\SAM`. Conversely, in modern Unix/Linux systems, password hashes are stored in the `shadow file`, located at `/etc/shadow`. Historically, Unix systems stored passwords in `/etc/passwd`."
What are the temporary storage locations for passwords at the application level?,"At the application level, passwords may be held temporarily in intermediate storage locations. These include `buffers`, `caches`, or even a `web page`. It is important to note that saving passwords in a cache is not recommended."
Discuss the user's control over password storage at the application level.,"The management of temporary password storage locations at the application level, such as `buffers`, `caches`, or `web pages`, is normally beyond the control of the user. This lack of control means that a password may be retained in these locations for a longer duration than the user might expect or desire."
Define the Security Accounts Manager (SAM) file in the context of Windows password storage.,"The `Security Accounts Manager (SAM) file` is a specific file in a Windows system where passwords are stored. Its typical location is `%windir%\system32\config\SAM`. This file contains hashed passwords, not the plain text passwords themselves."
What is the role of the `/etc/shadow` file in modern Unix/Linux systems?,"In modern Unix/Linux systems, the `/etc/shadow` file is where password hashes are stored. This file is used instead of the older `/etc/passwd` file for enhanced security, as it typically restricts read access to only the root user, protecting the password hashes from unauthorized access."
Explain why passwords might be kept longer than a user expects at the application level.,"Passwords might be kept longer than a user expects at the application level because the management of intermediate storage locations like `buffers`, `caches`, or `web pages` is typically beyond the user's control. Applications or systems may retain password data in these temporary areas for various operational reasons, without direct user intervention or awareness of the retention period."
Describe the process of hashed password verification.,"The process of `hashed password verification` involves a claimant providing a password to a verifier system. The verifier system does not store the actual password, only its hash. Upon receiving the password from the claimant, the verifier applies a `hash function` (denoted as `h`) to the provided password. The resulting hash, `h(password)`, is then compared against the `stored hash` (`h(password_A)`) associated with the claimant in the password table. If the computed hash matches the stored hash, the system `ACCEPTS` the password; otherwise, it `REJECTS` it."
What is the primary security principle observed by a verifier system in hashed password verification?,"The primary security principle observed by a `verifier system` in `hashed password verification` is that it `does not store the actual passwords`, only their `hashes`. This means that even if the password table is compromised, the attackers only gain access to the hashed representations, not the original plain-text passwords, making it significantly harder to recover the actual passwords."
Define a `hash function` in the context of password verification.,"In the context of password verification, a `hash function` (`h`) is a mathematical algorithm that takes an input (in this case, a password) and returns a fixed-size string of bytes, which is the `hash` or `digest`. This process is one-way, meaning it's computationally infeasible to reverse the hash to get the original password. During verification, the hash function is applied to the password provided by the claimant, and the resulting hash is compared to a previously stored hash."
How does a verifier system determine whether to accept or reject a password during verification?,"A `verifier system` determines whether to accept or reject a password by comparing the `hash` of the password provided by the claimant with the `stored hash` in its password table. If the hash generated from the claimant's input `matches` the stored hash, the password is `ACCEPTED`. If there is `no match`, the password is `REJECTED`. This comparison is performed after the verifier applies a `hash function` to the claimant's password."
Explain why a verifier system should not store plain-text passwords.,"A `verifier system` should not store plain-text passwords because it poses a significant security risk. If the system's password database were to be compromised, all user passwords would be exposed directly to attackers. By storing only `hashed passwords`, even if the database is breached, attackers only obtain the hashes, making it much more difficult to recover the original passwords, thus protecting user accounts."
Categorize the main types of attacks on passwords.,"The main types of attacks on passwords can be categorized into two broad areas: `Offline Guessing Attacks` and `""Phishing"" and Spoofing`. `Offline Guessing Attacks` further include `Exhaustive attacks` and `Intelligent attacks`, such as `Dictionary attacks`. `""Phishing"" and Spoofing` involve deceptive tactics to trick users into revealing their credentials."
Differentiate between `Exhaustive attacks` and `Dictionary attacks` as types of offline guessing attacks.,"Both `Exhaustive attacks` and `Dictionary attacks` are types of `Offline Guessing Attacks`. An `Exhaustive attack`, also known as a brute-force attack, attempts every possible combination of characters until the correct password is found. A `Dictionary attack`, on the other hand, is an `Intelligent attack` that tries to guess passwords by using a pre-compiled list of common words, phrases, and previously leaked passwords, which are often stored in a ""dictionary"" file."
"What is `""Phishing"" and Spoofing` in the context of password attacks?","`""Phishing"" and Spoofing` refer to deceptive techniques used in password attacks where attackers attempt to trick users into revealing their credentials. `Phishing` typically involves sending fraudulent communications that appear to come from a reputable source to induce individuals to reveal sensitive information like passwords. `Spoofing` involves an attacker disguising themselves as a legitimate entity or person to gain trust and access to systems or information."
Define an `Offline Guessing Attack` on passwords.,"An `Offline Guessing Attack` is a type of password attack where the attacker first `obtains the hashed passwords` from a system, typically through a breach or by sniffing traffic. After obtaining these hashes, the attacker then attempts to `guess the original plain-text passwords` by generating potential passwords, hashing them, and comparing the generated hashes with the stolen hashes, all without direct interaction with the target system."
Explain the process flow of an `Offline Guessing Attack`.,"The process flow of an `Offline Guessing Attack` begins with the attacker obtaining `hashed passwords`. The attacker then takes a `Plain Text` guess for a password, applies a `Hash Function` to it, which transforms the plain text into `Hashed Text`. This newly generated hashed text is then compared against the `stolen hashed passwords`. If a match is found, the attacker has successfully guessed the original plain-text password. This process is repeated for many plain text guesses until a match is found."
What makes `Offline Guessing Attacks` a plausible threat?,"`Offline Guessing Attacks` are a plausible threat due to several factors. Firstly, there are many incidents of `stolen (hashed) passwords` resulting from `hacks on servers` or `sniffing traffic`. Secondly, the widespread `usage of the same passwords across different accounts` means that the compromise of a password for one account can affect other accounts, making the stolen hashes more valuable to attackers."
How does the reuse of passwords across different accounts contribute to the success of `Offline Guessing Attacks`?,"The reuse of passwords across different accounts significantly contributes to the success of `Offline Guessing Attacks` because if an attacker obtains `hashed passwords` from one compromised system, they can use those hashes to guess the original passwords offline. If a user has reused that same password for other accounts, the attacker can then use the successfully guessed plain-text password to gain unauthorized access to those other accounts, effectively compromising multiple services from a single breach."
Recap the storage locations for Unix password hashes as mentioned in the document.,"In Unix systems, password hashes were traditionally stored in `/etc/passwd`. However, in modern Unix/Linux systems, for enhanced security, password hashes are now stored in the `shadow file`, which is located at `/etc/shadow`."
Analyse the SingHealth cyber attack with respect to its root causes.,"The SingHealth cyber attack was a result of `human lapses` by employees and `IT system weaknesses`. Key contributing factors included the `SCM database` functioning on an `open network` linked to `Citrix servers` of Singapore General Hospital (SGH), creating a critical vulnerability. There was a `lack of monitoring` for unusual queries and access on the SCM database, with no controls to detect or block bulk queries. The Citrix servers were not monitored for real-time analysis of vulnerabilities, lacked adequate security against unauthorized access, and `2-factor authentication (2FA)` was not enforced as the exclusive means for administrator login, allowing attackers to bypass it. Additionally, `weak administrator account passwords` were exploited, and remediation efforts by IHiS were mismanaged, leaving vulnerabilities unaddressed."
What role did the `SCM database` play in the SingHealth cyber attack?,"The `SCM database` played a critical role in the SingHealth cyber attack because it functioned on an `open network` that was linked to the `Citrix servers` of Singapore General Hospital (SGH). This configuration created a `critical vulnerability` that the attacker exploited to obtain and take data. Furthermore, there was a `lack of monitoring` for unusual queries and access to this database, meaning bulk queries could be made without detection or blocking."
How did the `Citrix servers` contribute to the SingHealth cyber attack?,"The `Citrix servers` contributed significantly to the SingHealth cyber attack in several ways. They were linked to the `SCM database` via an open network, creating a critical vulnerability. These servers were `not monitored` for real-time analysis and alerts of vulnerabilities. Crucially, they were `not adequately secured against unauthorized access`, and `2-factor authentication (2FA)` was `not enforced` as the exclusive means for administrator login, allowing the attacker to access the server through `other routes` that did not require 2FA."
Discuss the impact of `weak administrator account passwords` in the SingHealth cyber attack.,"`Weak administrator account passwords` were a significant weakness exploited by the attacker in the SingHealth cyber attack. This vulnerability was identified during a test, but the subsequent remediation process undertaken by IHiS was `mismanaged and inadequate`. As a result, these weak passwords, among other vulnerabilities, remained exploitable at the time of the cyber attack, directly contributing to the attacker's success in gaining unauthorized access."
What insights can be derived from the SingHealth incident regarding IT security practices?,"The SingHealth incident highlights several critical insights regarding IT security practices. It underscores the importance of `robust network segmentation` (avoiding open networks for sensitive databases), `comprehensive monitoring` for unusual database queries and server vulnerabilities, strict enforcement of `multi-factor authentication` (like 2FA) for administrative access, and the necessity of `strong password policies` for all accounts, especially administrator ones. Furthermore, it emphasizes the need for `effective and timely remediation` of identified vulnerabilities and proper management of security processes."
Explain the failure of `2-factor authentication (2FA)` enforcement in the SingHealth attack.,"In the SingHealth attack, `2-factor authentication (2FA)` enforcement failed because it was `not enforced as the exclusive means` of logging in as an administrator for the Citrix servers. This allowed the attacker to access the server through `other routes` that did not require 2FA, bypassing a critical security layer that should have protected administrator access."
What was the role of `monitoring lapses` in the SingHealth cyber attack?,"`Monitoring lapses` played a crucial role in the SingHealth cyber attack. There was a `lack of monitoring` of the SCM database for unusual queries and access, meaning no existing control to detect or block `bulk queries`. Additionally, the Citrix servers were `not monitored for real-time analysis` and alerts of vulnerabilities, which allowed the attacker to operate undetected and exploit issues arising from these servers."
Summarize the Adobe data breach incident.,"The Adobe data breach incident, which occurred in October 2013, impacted at least `38 million users`. This breach exposed user account information and prompted a flurry of password reset emails. Additionally, a massive `source code leak` at Adobe broadened to include the company's Photoshop family of graphical design products."
What was the key takeaway from the LinkedIn password leak incident?,"The key takeaway from the LinkedIn password leak incident, where more than `6.4 million LinkedIn passwords leaked to the Web`, was that users were `advised to change their passwords`. Although some login details were encrypted, the sheer volume of leaked data necessitated a widespread password reset recommendation to mitigate the risk to user accounts."
Describe the nature of the Starbucks app vulnerability.,"The Starbucks app had a vulnerability that put coffee drinkers' information at risk. Specifically, the app was found to `store user information and passwords in CLEAR TEXT`. This meant that sensitive data, including usernames, email addresses, and passwords, was not encrypted, making it easily accessible if the app or device was compromised."
"What was the scale of the ""Russia gang"" hack mentioned in the document?","The ""Russia gang"" hack mentioned in the document was of an extremely large scale, compromising `1.2 billion usernames and passwords`. This incident highlights the massive volume of credentials that can be stolen in large-scale cyberattacks."
"What information was posted to Pastebin in 2013, according to the document?","According to an analysis by a Swiss security firm, more than `300,000 credentials`, including usernames and passwords, were posted on the clipboard website `Pastebin.com` in the year 2013 alone."
"Analyse the implications of storing passwords in `CLEAR TEXT`, as seen in the Starbucks app vulnerability.","Storing passwords in `CLEAR TEXT`, as exemplified by the Starbucks app vulnerability, has severe implications for user security. It means that sensitive user information, including usernames, email addresses, and passwords, is `unencrypted` and directly readable. If an attacker gains access to the system or database where these are stored, they immediately obtain the plain-text credentials, making it trivial to compromise user accounts and potentially other services where users might have reused the same password. This practice is a fundamental security flaw."
What advice was given to LinkedIn users following the password leak?,"Following the leak of more than 6.4 million LinkedIn passwords, all users were `advised to change their passwords`. This recommendation was made even though some login details were encrypted, emphasizing the importance of proactive security measures after a data breach."
Define a `Brute Force Attack` against passwords.,"A `Brute Force Attack` against passwords is a type of guessing attack where the attacker attempts to `guess the password` by `enumerating all possible passwords and their hashes in sequence`. For each generated password, its hash is computed and then checked against the target hashes. The attack continues until a match is found, effectively trying every possible combination of characters."
What measures can be taken to increase the difficulty of a `Brute Force Attack`?,"To increase the difficulty of a `Brute Force Attack`, a key measure is to `increase the space of possible passwords`. This can be achieved by requiring `longer passwords` and allowing for `more varieties of symbols`, such as alphabets, numerals, and signs. A robust `password policy` is an important means to implement these measures."
Explain the role of `password policy` in mitigating `Brute Force Attacks`.,"A `password policy` plays an important role in mitigating `Brute Force Attacks` by increasing their difficulty. A strong password policy typically enforces requirements such as minimum password length, inclusion of various character types (alphabets, numerals, signs), and disallowing common or easily guessable patterns. By doing so, it expands the `space of possible passwords`, making it computationally more expensive and time-consuming for an attacker to enumerate all combinations in a brute force attempt."
How does increasing the variety of symbols in a password affect a `Brute Force Attack`?,"Increasing the variety of symbols in a password, by including alphabets, numerals, and signs, significantly `increases the space of possible passwords`. This means there are many more potential combinations an attacker would need to try in a `Brute Force Attack`, thereby making the attack much more computationally intensive and time-consuming, thus increasing its difficulty."
What is the fundamental principle behind defending against `Brute Force Attacks`?,"The fundamental principle behind defending against `Brute Force Attacks` is to `increase the size and complexity of the password space`. By making the set of all possible passwords larger and more diverse, the time and computational resources required for an attacker to enumerate and test every possible password combination become prohibitively high, thereby making the attack impractical."
Define `password entropy` as measured by `2^k`.,"`Password entropy`, as measured by `2^k`, refers to the `bitsize of the password space`. The value `k` represents the base-2 logarithm of the total number of possible passwords. For `n`-character passwords with `c` choices per character, the total number of possible passwords is `c^n`, and the entropy `k` is `log2(c^n)`. A higher `k` value indicates greater entropy and thus a more secure password against guessing attacks."
How does password length (`n`) affect password entropy for a given character set?,"For a given character set (i.e., a fixed number of `c` choices per character), increasing the `password length (n)` directly `increases the password entropy`. As shown in the table, for any character combination, a longer password (higher `n`) results in a larger `bitsize of password space` (higher `k`), meaning there are exponentially more possible passwords, making it significantly harder to guess through brute force."
How does the number of character choices (`c`) affect password entropy for a given password length?,"For a given password length (`n`), increasing the `number of character choices (c)` directly `increases the password entropy`. This is because a larger character set (e.g., mixed case alphanumeric and symbols compared to just lowercase) provides more options for each character position, exponentially expanding the `bitsize of the password space` (higher `k`) and making the password more resistant to brute force attacks."
Compare the password entropy of a 7-character lowercase password versus a 7-character mixed case alphanumeric password.,"For a 7-character password, a `lowercase` password (with 26 character choices) has a password entropy of `32.9 bits`. In contrast, a 7-character `mixed case alphanumeric` password (with 62 character choices) has a password entropy of `41.7 bits`. This indicates that using a mixed case alphanumeric character set significantly increases the password entropy, making it more secure than a purely lowercase password of the same length."
"If a software password cracker can crack 16 million passwords per second, how would you calculate the time to brute-force a password with a known entropy `k`?","If a software password cracker can crack 16 million passwords per second, and a password has a known entropy `k` (bitsize of password space), the total number of possible passwords is `2^k`. To calculate the time it will take to brute-force such a password, you would divide the total number of possible passwords (`2^k`) by the cracking rate (16 million passwords per second). The formula would be `Time (seconds) = (2^k) / 16,000,000`."
What is the entropy of a 10-character password using only lowercase alphanumeric characters?,"According to the provided table, a 10-character password using `lowercase alphanumeric` characters (36 choices) has a password entropy of `51.7 bits`."
What is the entropy of a 5-character password using all 95 keyboard characters?,"According to the provided table, a 5-character password using `95 keyboard characters` has a password entropy of `32.9 bits`."
Explain the significance of a higher `bitsize of password space` in terms of security.,"A higher `bitsize of password space` (represented by `k` in `2^k`) signifies greater `password entropy`, which is crucial for security. A larger bitsize means there are exponentially more possible password combinations. This directly translates to a significantly longer time and greater computational resources required for an attacker to successfully perform a `brute force attack`, thereby making the password much more resistant to guessing and enhancing its overall security."
"How many character choices are considered for a ""mixed case alphanumeric"" password in the context of password entropy?","In the context of password entropy, a ""mixed case alphanumeric"" password is considered to have `62 character choices`. This typically includes 26 lowercase letters, 26 uppercase letters, and 10 numerals (0-9)."
What is the maximum password entropy listed in the table for a 10-character password?,The maximum password entropy listed in the table for a 10-character password is `65.7 bits`. This is achieved when using `95 keyboard characters` as the character set.
"If a password has an entropy of 47.0 bits, what does this imply about its strength?","If a password has an entropy of `47.0 bits`, it implies a certain level of strength against brute-force attacks. This `bitsize of password space` means there are `2^47` possible combinations. While this is a substantial number, its actual resistance depends on the attacker's cracking speed. For instance, if a cracker can test 16 million passwords per second, it would take `(2^47) / 16,000,000` seconds to brute-force it, which is approximately `8.8 x 10^7` seconds or about `2.8 years`. This indicates a moderate level of strength, but modern cracking capabilities might necessitate higher entropy for critical systems."
