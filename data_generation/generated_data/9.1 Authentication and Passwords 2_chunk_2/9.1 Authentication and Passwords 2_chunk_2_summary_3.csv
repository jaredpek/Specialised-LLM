input,output
Provide a comprehensive summary of password storage locations in operating systems.,"In operating systems, password hashes are stored in a password file. In Windows systems, passwords are stored in the Security Accounts Manager (SAM) file, located at ""%windir%\system32\config\SAM"". In Unix systems, this was traditionally `/etc/passwd`, but in modern Unix/Linux systems, password hashes are stored in the `shadow` file, specifically `/etc/shadow`. At the application level, passwords may also be held temporarily in intermediate storage locations such as buffers, caches, or within a web page. The management of these temporary storage locations is typically beyond the user's control, meaning a password might be retained longer than intended."
Where are passwords stored temporarily at the application level?,"At the application level, passwords may be held temporarily in intermediate storage locations like buffers, caches, or a web page. It is advised not to save passwords in the cache."
Explain the user's control over temporary password storage locations.,"The management of temporary password storage locations at the application level, such as buffers, caches, or web pages, is normally beyond the control of the user. This lack of control means that a password may be kept longer than the user has anticipated or bargained for, potentially increasing security risks."
Summarise the key considerations for password storage in Windows systems.,"In Windows systems, passwords are stored in the Security Accounts Manager (SAM) file. The specific location for this file is `%windir%\system32\config\SAM`. This file contains password hashes rather than plain-text passwords."
Describe how password hashes are stored in modern Unix/Linux systems.,"In modern Unix/Linux systems, password hashes are stored in the `shadow` file, which is located at `/etc/shadow`. This is a change from older Unix systems where they were stored in `/etc/passwd`."
What are the risks associated with temporary password storage in application-level locations?,"The risks associated with temporary password storage in application-level locations like buffers, caches, or web pages stem from the fact that their management is normally beyond the control of the user. This can lead to passwords being kept longer than the user intended, increasing the window of opportunity for potential compromise if these temporary storage areas are accessed by unauthorized entities."
Can you summarise the primary difference in password hash storage between older Unix systems and modern Unix/Linux systems?,"The primary difference in password hash storage is that in older Unix systems, password hashes were stored in `/etc/passwd`. However, in modern Unix/Linux systems, for enhanced security, password hashes are stored in a separate file called the `shadow` file, located at `/etc/shadow`."
Explain the process of hashed password verification.,"Hashed password verification is a security process where a system verifies a user's identity without storing their actual password in plain text. The process involves a Claimant (user) providing a password, which is then sent to a Verifier (system). The Verifier applies a **hash function** (`h`) to the provided password, generating a **password hash**. This newly generated hash is then compared against a pre-stored hash (`h(password_A)`) in the Verifier's **password table**. If the two hashes match, the system accepts the password; otherwise, it rejects it. Crucially, the Verifier only stores the hashes, not the original passwords."
What is the role of the verifier in hashed password verification?,"In hashed password verification, the **verifier** (system B) is responsible for authenticating a claimant (user A). Its role is to receive the password provided by the claimant, apply a **hash function** (`h`) to it, and then compare the resulting hash (`h(password)`) with the stored hash (`h(password_A)`) associated with that claimant in its **password table**. Based on this comparison, the verifier decides whether to accept or reject the claimant's authentication attempt."
What information does the verifier store in a hashed password system?,"In a hashed password system, the verifier (system) does not store the actual plain-text passwords. Instead, it stores only the **hashes** of the passwords in its password table. A **hash** is the output of a one-way cryptographic function applied to the password, designed to be computationally infeasible to reverse engineer back to the original password."
Describe the steps a system takes to verify a user's password using hashing.,"To verify a user's password using hashing, a system follows these steps: First, the user (Claimant A) provides their password. Second, the Verifier (system B) receives this password. Third, the Verifier applies a **hash function** (`h`) to the provided password to compute its hash. Fourth, the Verifier compares this newly computed hash with the stored hash (`h(password_A)`) that is associated with Claimant A in its **password table**. Finally, if the computed hash matches the stored hash, the system accepts the password; otherwise, it rejects it."
Why is it important for the verifier not to store plain-text passwords?,"It is important for the verifier not to store plain-text passwords because storing only **password hashes** (the output of a one-way cryptographic function) significantly enhances security. If the system's password table is compromised, attackers would only obtain hashes, making it much harder and more computationally intensive to recover the original plain-text passwords compared to if they were stored directly."
Can you summarise the key components involved in hashed password verification?,"The key components involved in hashed password verification are the **Claimant** (user A), who provides the password; the **Verifier** (system B), which performs the authentication; a **Password table** within the Verifier that stores the pre-computed hashes of users' passwords (`h(password_A)`); and a **Hash function** (`h`), which is a one-way cryptographic algorithm used by the Verifier to transform the provided password into a hash for comparison."
What is the outcome of a successful hashed password verification?,The outcome of a successful hashed password verification is that the system accepts the provided password. This occurs when the hash generated from the password provided by the claimant exactly matches the hash stored in the verifier's password table for that user.
Summarise the main categories of attacks on passwords.,"The main categories of attacks on passwords are **Offline Guessing Attacks** and ""**Phishing"" and Spoofing**."
What are the sub-categories of Offline Guessing Attacks?,"The sub-categories of Offline Guessing Attacks are **Exhaustive attacks** and **Intelligent attacks**, which include **Dictionary attacks**."
Define 'Phishing' and 'Spoofing' in the context of password attacks.,"**Phishing** and **Spoofing** are social engineering techniques used in password attacks where attackers attempt to trick users into revealing their personal data, including passwords. Phishing typically involves sending fraudulent communications that appear to come from a legitimate source, while spoofing involves impersonating a trusted entity or device to gain unauthorized access or information."
Can you summarise the different types of guessing attacks on passwords?,"Guessing attacks on passwords fall into two main types: **Exhaustive attacks** and **Intelligent attacks**. Exhaustive attacks, also known as brute-force attacks, attempt to guess a password by trying every possible combination of characters. Intelligent attacks, such as **Dictionary attacks**, are more refined, attempting to guess passwords using pre-compiled lists of common words, phrases, or previously leaked passwords."
What are the two primary methods attackers use to compromise passwords?,"The two primary methods attackers use to compromise passwords are **Offline Guessing Attacks** and ""**Phishing"" and Spoofing**."
Explain the difference between exhaustive attacks and dictionary attacks.,"**Exhaustive attacks** (also known as brute-force attacks) are a type of guessing attack that attempts to compromise a password by systematically trying every single possible combination of characters until the correct one is found. In contrast, **Dictionary attacks** are a type of intelligent attack that tries to guess passwords by using a pre-compiled list of common words, phrases, and previously used passwords, which is generally faster than an exhaustive attack but only effective if the password is in the dictionary."
Define an offline guessing attack on passwords.,"An **offline guessing attack** is a type of password attack where an attacker first obtains **hashed passwords** (passwords transformed by a one-way cryptographic function) from a compromised system or intercepted traffic. The attacker then attempts to guess the original plain-text passwords by taking various plain-text guesses, applying the same hash function to them, and comparing the resulting hashes with the stolen hashed passwords. This process occurs 'offline' because it does not require direct interaction with the target system's authentication mechanism."
Why are offline guessing attacks considered a plausible threat?,"Offline guessing attacks are considered a plausible threat due to several factors: many incidents involve the theft of **hashed passwords** (passwords converted into a fixed-size string of characters using a hash function) as a consequence of server hacks or sniffing network traffic. Additionally, the widespread practice of users reusing the same passwords across different accounts means that the compromise of a password for one account can affect other accounts, making these attacks more impactful."
How does the use of the same password across different accounts contribute to the plausibility of offline guessing attacks?,"The use of the same password across different accounts significantly contributes to the plausibility of offline guessing attacks because if an attacker successfully compromises a password for one account, that same password can then be used to gain unauthorized access to other accounts belonging to the same user. This amplifies the impact of a single password compromise, making the attacker's efforts more rewarding."
Describe the process of an offline guessing attack.,"The process of an **offline guessing attack** begins when an attacker obtains **hashed passwords** (cryptographically transformed passwords) from a compromised source, such as a server hack or intercepted network traffic. The attacker then takes various plain-text guesses for passwords, applies the same **hash function** that the target system uses to each guess, and compares the resulting **hashed text** with the stolen hashed passwords. If a match is found, the attacker has successfully guessed the original plain-text password."
What are the common sources from which attackers obtain hashed passwords for offline guessing attacks?,"Attackers commonly obtain **hashed passwords** for offline guessing attacks from several sources. These include incidents of stolen (hashed) passwords resulting from successful hacks on servers, or by sniffing network traffic to intercept password hashes as they are transmitted."
Can you summarise the key reasons why offline guessing attacks are a significant security concern?,"Offline guessing attacks are a significant security concern primarily because they leverage **stolen hashed passwords**, which are often obtained through server hacks or by sniffing network traffic. Their impact is further magnified by the common user practice of reusing the same passwords across different accounts, meaning that the compromise of a single password can affect multiple user accounts, leading to broader security breaches."
"Recap the storage location of password hashes in modern Unix/Linux systems, as it relates to offline guessing attacks.","In modern Unix/Linux systems, password hashes are stored in the `shadow` file, located at `/etc/shadow`. This is a critical piece of information for attackers conducting offline guessing attacks, as obtaining this file provides them with the necessary hashed passwords to attempt to crack offline."
Summarise the causes of the SingHealth cyber attack.,"The SingHealth cyber attack was a result of a combination of human lapses by employees and vulnerabilities within the IT system. Ultimately, the report concluded that the breach into the public healthcare group's database was preventable despite the attacker's skill."
What specific vulnerabilities in the SingHealth network and SCM system contributed to the attack?,"Specific vulnerabilities included the SCM database functioning on an open network linked to Citrix servers, a lack of monitoring for unusual queries and access to the SCM database, inadequate security of Citrix servers against unauthorized access (including non-enforcement of 2-factor authentication for administrator login), and the presence of weak administrator account passwords."
Explain the role of the SCM database in the SingHealth attack.,"The SCM database played a critical role in the SingHealth attack because it was legally owned by SingHealth and functioned on an open network. This open network was linked to the Citrix servers of Singapore General Hospital (SGH), which created a critical vulnerability that the attacker exploited to obtain data."
How did the lack of monitoring contribute to the SingHealth cyber attack?,"The lack of monitoring contributed significantly to the SingHealth cyber attack in several ways: there was no monitoring of the SCM database for unusual queries and access, no existing control to detect or block bulk queries to the database, and the Citrix servers of SGH were not monitored for real-time analysis and alerts of vulnerabilities and issues."
Describe the issues with Citrix server security in the SingHealth incident.,"The Citrix servers in the SingHealth incident were not adequately secured against unauthorized access. A notable issue was that the process requiring **2-factor authentication (2FA)** for administrator access was not enforced as the exclusive means of logging in. This allowed the attacker to access the server through alternative routes that did not require 2FA, bypassing a critical security control."
What was the impact of weak administrator account passwords in the SingHealth breach?,"Weak administrator account passwords were identified as a weakness that may have been exploited by the attacker in the SingHealth breach. This vulnerability was among others discovered during a test, but the subsequent remediation process undertaken by IHiS was mismanaged and inadequate, meaning these weak passwords likely remained a point of entry for the attacker."
Can you summarise the key findings regarding the preventability of the SingHealth cyber attack?,"The key findings indicated that the SingHealth cyber attack was preventable, despite the attacker's skill. The breach was attributed to lapses by employees and vulnerabilities within the system, highlighting that internal weaknesses and human factors were critical in allowing the attack to succeed."
What was the problem with the remediation process undertaken by IHiS following the discovery of vulnerabilities in SingHealth?,"The remediation process undertaken by IHiS following the discovery of vulnerabilities in SingHealth was mismanaged and inadequate. As a result, a number of critical vulnerabilities remained unaddressed at the time of the cyber attack, contributing to the attacker's success."
Summarise the details of the Adobe data breach.,"The Adobe data breach, reported in October 2013, exposed user account information and prompted password reset emails for at least 38 million users. The incident also involved a massive source code leak that broadened to include the company's Photoshop family of graphical design products."
What happened in the LinkedIn password leak incident?,"In June 2012, over 6.4 million LinkedIn passwords leaked to the Web after an apparent hack. Although some login details were encrypted, all users were advised to change their passwords as a precautionary measure."
Describe the Russia gang hack incident related to usernames and passwords.,"In August 2014, a Russian gang was reported to have hacked 1.2 billion usernames and passwords, indicating a massive compromise of user credentials."
What was the Pastebin incident regarding credentials?,"The Pastebin incident involved more than 300,000 credentials, including usernames and passwords, being posted on the clipboard website Pastebin.com in 2013. This was revealed by a recent analysis conducted by a Swiss security firm."
Explain the vulnerability found in the Starbucks mobile app concerning user information.,"A vulnerability was discovered in the Starbucks mobile app where it stored user information, including usernames, email addresses, and passwords, in **clear text**. This meant the sensitive data was not encrypted, putting coffee drinkers' information at risk of exposure if the app or device was compromised."
Can you summarise the common theme among the password-related incidents mentioned?,"The common theme among the password-related incidents mentioned is the widespread compromise and exposure of user credentials, including usernames and passwords. These incidents highlight vulnerabilities ranging from server hacks and data breaches (Adobe, LinkedIn, Russia gang) to insecure storage practices like storing passwords in clear text (Starbucks app) and public posting of stolen credentials (Pastebin)."
What advice was given to LinkedIn users after their password leak?,"After the LinkedIn password leak, all users were advised to change their passwords, despite some login details being encrypted. This recommendation was a precautionary measure to mitigate the risk of unauthorized access to their accounts."
Define a brute force guessing attack.,"A **brute force guessing attack** is a method used to compromise passwords by systematically trying every possible combination of characters until the correct password is found. In the context of hashed passwords, the attacker enumerates all possible passwords, generates their corresponding **hashes** (the output of a one-way cryptographic function), and then checks if any of these generated hashes match the target hashed passwords obtained from a system. This process is exhaustive and relies on computational power to test a vast number of possibilities."
What measures can be taken to increase difficulties against brute force attacks?,"To increase difficulties against **brute force attacks**, measures should focus on increasing the **space of possible passwords**. This involves using longer passwords and allowing for a greater variety of symbols, including alphabets (uppercase and lowercase), numerals, and special signs. A larger password space makes it exponentially more time-consuming and computationally intensive for an attacker to enumerate all possible combinations."
What is the importance of a strong password policy in combating brute force attacks?,"A strong password policy is an important means to increase the difficulties of a **brute force attack**. By enforcing requirements for password length, complexity (e.g., requiring a mix of alphabets, numerals, and signs), and uniqueness, a strong policy significantly expands the **password space**, making it much harder and more time-consuming for attackers to guess passwords through exhaustive enumeration."
How does increasing the 'space of possible passwords' help against brute force attacks?,"Increasing the **'space of possible passwords'** helps against **brute force attacks** by making the set of all potential passwords much larger. This means an attacker attempting to guess a password by trying every combination will need significantly more time and computational resources to exhaust all possibilities. For example, requiring longer passwords and a greater variety of characters (alphabets, numerals, signs) exponentially increases the number of combinations an attacker must test, thereby increasing the difficulty and time required for a successful brute force attack."
Can you summarise the mechanism by which a brute force attack attempts to compromise a password?,"A **brute force attack** attempts to compromise a password by systematically trying to guess it. The mechanism involves enumerating all possible passwords and their corresponding **hashes** (the output of a one-way cryptographic function). For each generated password guess, its hash is computed and then compared against the target hashed password. If a match is found, the original password has been successfully compromised."
"How is password entropy measured, and what factors influence it?","**Password entropy** is a measure of the unpredictability of a password, indicating how difficult it is to guess or crack. It is typically measured in bits, represented as 2^k, where 'k' is the **bitsize of the password space**. The bitsize of the password space is influenced by two primary factors: the length of the password, denoted as 'n' (the number of characters), and the number of choices per character, denoted as 'c' (the size of the character set used). The total number of possible passwords is `c^n`, and the bitsize 'k' is the base-2 logarithm of this number."
Explain how character set and password length affect the bitsize of the password space.,"Both the character set and password length significantly affect the **bitsize of the password space**, which is a measure of a password's entropy. The bitsize increases with both the length of the password ('n' characters) and the number of choices per character ('c', representing the size of the character set). For instance, a 10-character password using 95 keyboard characters yields a bitsize of 65.7, indicating a vast number of possibilities. In contrast, a 5-character password using only 26 lowercase characters has a much smaller bitsize of 23.5. A larger character set (e.g., mixed case alphanumeric with symbols) and greater length exponentially increase the bitsize, making the password much harder to guess."
"What is the current cracking capability of software password crackers, and what does this imply for password strength?","At present, software password crackers are highly efficient, capable of cracking up to 16 million passwords per second per PC. This implies that for adequate security, passwords must possess substantial **entropy** (unpredictability). To withstand such rapid cracking attempts, passwords need to be sufficiently long and incorporate a wide variety of characters, including alphabets (both uppercase and lowercase), numerals, and special signs, to increase their **bitsize** and make brute-force attacks computationally infeasible within a reasonable timeframe."
