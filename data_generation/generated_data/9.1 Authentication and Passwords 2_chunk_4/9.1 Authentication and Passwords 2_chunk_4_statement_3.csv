input,output
Define the concept of password salting.,"Password salting is a technique used to reduce the effectiveness of offline attacks using pre-computed hashes. It involves adding a unique, randomly generated string, known as a ""salt,"" to a password before applying the hash function. The salt value is stored along with the hash of the password+salt."
Explain why password salting is used.,"Password salting is used to reduce the effectiveness of offline attacks that rely on pre-computed hashes, such as rainbow tables or database-based lookups. By adding a unique salt to each password before hashing, it makes cracking large numbers of hashes significantly harder, as the time required grows in direct proportion to the number of hashes. It also makes it impossible to determine if two users have the same password without cracking the hashes, because different salts will result in different hashes even if the passwords are identical."
"What is a ""salt"" in the context of password security?","In the context of password security, a ""salt"" is a unique, randomly generated string that is added to a password before the hash function is applied. Each password has its own salt, and this salt value is stored along with the hash of the password combined with the salt."
How is the salt value stored in a password salting system?,The salt value is stored along with the hash of password+salt.
What is the impact of a salt's bit length on an attacker's effort to pre-compute hashes?,"For a salt of n-bit, an attacker needs to pre-compute 2^n of hashes for the same password. This significantly increases the computational effort required for cracking."
Describe the basic process of password salting as illustrated.,"The basic process of password salting involves taking a plaintext password (e.g., ""hello""), adding a salt to it (resulting in ""hello3ab9"" in the illustration), then applying a hash function to this combined string. The output of the hash function (e.g., ""39e19b234..."") is then stored along with the salt."
Why is it essential to store passwords securely?,It is essential to store passwords in a way that prevents them from being obtained by an attacker even if the application or database is compromised. This protects user accounts and sensitive data.
What can an attacker do after acquiring stored password hashes?,"After an attacker has acquired stored password hashes, they are always able to brute force hashes offline."
"As a defender, what is the primary strategy to slow down offline password attacks?","As a defender, the primary strategy to slow down offline password attacks is to select hash algorithms that are as resource intensive as possible."
What is the main difference between hashing and encryption for sensitive data?,"The main difference between hashing and encryption is that hashing is a one-way function, meaning it's impossible to ""decrypt"" a hash to obtain the original plaintext value. Encryption, on the other hand, is a two-way function, meaning the original plaintext can be retrieved if the correct key is available. Both provide ways to keep sensitive data safe."
"Should passwords be hashed or encrypted, and why?","Passwords should be hashed, not encrypted. This is because hashing is a one-way function, making it impossible to retrieve the original plaintext password from its hash. If passwords were encrypted, an attacker who obtains the encryption key could decrypt all passwords, compromising security."
Define hashing in the context of password storage.,"Hashing, in the context of password storage, is a one-way function where an input (the password) is transformed into a fixed-size string of characters (the hash). It is impossible to ""decrypt"" a hash and obtain the original plaintext value, making it suitable for password validation without storing the actual password."
Define encryption.,"Encryption is a two-way function, meaning that the original plaintext password can be retrieved (if we have the key)."
Why is hashing appropriate for password validation?,"Hashing is appropriate for password validation because it allows the system to verify a user's password without ever storing or knowing the actual plaintext password. When a user attempts to log in, their entered password is hashed and then compared to the stored hash. If they match, the password is correct."
What prevents an attacker from logging in as a victim even if they obtain a hashed password?,"Even if an attacker obtains the hashed password, they cannot enter it into an application's password field and log in as the victim. This is because the application expects a plaintext password to hash and compare, not an already hashed value."
"Is it possible to ""decrypt"" password hashes to obtain original passwords?","No, it is not possible to ""decrypt"" password hashes to obtain the original passwords because hashing is a one-way function. However, it is possible to ""crack"" the hashes in some circumstances to discover the plaintext value."
Outline the basic steps an attacker takes to crack unsalted password hashes.,"The basic steps an attacker takes to crack unsalted password hashes are:
1. Select a password they think the victim has chosen (e.g., ""password1!"").
2. Calculate the hash of that selected password.
3. Compare the hash they calculated to the hash of the victim.
4. If they match, the attacker has correctly ""cracked"" the hash and now knows the plaintext value of the victim's password."
How do attackers typically select candidate passwords when trying to crack hashes?,"Attackers typically select candidate passwords by repeating the cracking process for a large number of potential candidate passwords. Methods for selecting these candidates include using lists of passwords obtained from other compromised sites, brute force (trying every possible candidate), or dictionaries/wordlists of common passwords."
What methods can attackers use to select candidate passwords for cracking?,"Attackers can use several methods to select candidate passwords for cracking, including:
*   Lists of passwords obtained from other compromised sites.
*   Brute force, which involves trying every possible candidate password.
*   Dictionaries or wordlists of common passwords."
"What factors make password cracking relatively inexpensive for attackers, even with many permutations?","Password cracking can be relatively inexpensive for attackers, even with an enormous number of permutations, due to the availability of high-speed hardware such as GPUs and cloud services with many servers for rent. This is especially true when best practices for hashing are not followed."
What makes passwords effectively impossible for an attacker to crack?,Strong passwords stored with modern hashing algorithms and using hashing best practices should be effectively impossible for an attacker to crack.
What is an administrator's responsibility regarding hashing algorithms?,It is an administrator's responsibility to select a modern hashing algorithm for password storage.
How does salting make cracking large numbers of hashes significantly harder?,"Salting makes cracking large numbers of hashes significantly harder because the salt is unique for every user. This means an attacker has to crack hashes one at a time using the respective salt, rather than calculating a hash once and comparing it against every stored hash. Consequently, the time required grows in direct proportion to the number of hashes."
How does salting protect against rainbow tables?,"Salting protects against rainbow tables by preventing an attacker from pre-computing hashes using rainbow tables or database-based lookups. Since each password has a unique salt, the pre-computed hashes in a rainbow table would not match the salted hashes stored in the database, rendering the rainbow table ineffective."
How does salting prevent an attacker from determining if two users have the same password?,"Salting prevents an attacker from determining whether two users have the same password without cracking the hashes. This is because different salts will result in different hashes, even if the underlying plaintext passwords are identical."
List examples of modern hashing algorithms that automatically salt passwords.,"Examples of modern hashing algorithms that automatically salt passwords include Argon2id, bcrypt, and PBKDF2. When using these algorithms, no additional steps are required for salting."
"What is the purpose of the ""add salt"" step in the password salting illustration?","The purpose of the ""add salt"" step in the password salting illustration is to combine a random string (the salt) with the original password (e.g., ""hello"") before it undergoes the hashing function. This creates a unique input for the hash function, making pre-computed attacks less effective."
"What does ""offline attacks"" refer to in the context of password security?","In the context of password security, ""offline attacks"" refer to attempts by an attacker to crack password hashes without directly interacting with the live application or database. Instead, the attacker obtains a copy of the stored hashes and attempts to crack them on their own computing resources."
"What is a ""pre-computed hash""?","A ""pre-computed hash"" is a hash value that has been calculated in advance, typically for a large number of common passwords or password variations. Attackers use databases of these pre-computed hashes (like rainbow tables) to quickly find the plaintext password corresponding to a stolen hash by simply looking it up."
"What is the significance of ""each password has its own salt""?","The significance of ""each password has its own salt"" is that it ensures that even if two users choose the exact same password, their stored hashes will be different due to the unique salt added to each. This prevents attackers from identifying duplicate passwords and makes it impossible to use a single pre-computed hash table to crack multiple passwords."
"What does the phrase ""brute force hashes offline"" mean?","""Brute force hashes offline"" means that an attacker, after acquiring stored password hashes, attempts to guess the original plaintext passwords by systematically trying every possible combination of characters, hashing each guess, and comparing the resulting hash to the stolen hashes. This process is performed on the attacker's own system, without needing to interact with the compromised application or database."
"Why is it impossible to ""decrypt"" a hash?","It is impossible to ""decrypt"" a hash because hashing is a one-way function. This means the process of generating a hash from an input is irreversible; there is no mathematical function or key that can transform a hash back into its original plaintext value."
What is the implication of an attacker obtaining a hashed password versus an encrypted password?,"If an attacker obtains a hashed password, they cannot directly log in as the victim or retrieve the original plaintext password, as hashing is a one-way function. They would need to ""crack"" the hash. If an attacker obtains an encrypted password, and also has the encryption key, they can retrieve the original plaintext password, potentially allowing them to log in as the victim."
What is the role of resource-intensive hash algorithms in password security?,"Resource-intensive hash algorithms play a crucial role in password security by slowing down offline attacks. Because these algorithms require significant computational resources (CPU time, memory) to compute a hash, they make it much more time-consuming and costly for an attacker to brute force or crack a large number of hashes, even with powerful hardware."
How does the illustration demonstrate the one-way nature of hashing?,"The illustration demonstrates the one-way nature of hashing by showing a clear flow from ""hello"" + ""add salt"" -> ""hash function"" -> ""39e19b234..."". There is no arrow or process shown that would reverse ""39e19b234..."" back to ""hello3ab9"" or ""hello"", indicating that once hashed, the original input cannot be retrieved from the hash."
What is the primary goal of secure password storage?,"The primary goal of secure password storage is to prevent passwords from being obtained by an attacker, even if the application or database where they are stored is compromised."
"Explain the term ""compromised sites"" in the context of password cracking.","In the context of password cracking, ""compromised sites"" refers to websites or services that have suffered a data breach, leading to the theft of user credentials, including password hashes. Attackers often use lists of passwords obtained from these compromised sites as candidate passwords to try and crack hashes from other targets."
"What is a ""wordlist"" or ""dictionary"" in the context of password cracking?","A ""wordlist"" or ""dictionary"" in the context of password cracking is a file containing a large collection of commonly used passwords, words, phrases, or combinations thereof. Attackers use these lists as candidate passwords in dictionary attacks, hashing each entry and comparing it against stolen password hashes."
Why are strong passwords important in conjunction with modern hashing algorithms?,"Strong passwords are important in conjunction with modern hashing algorithms because while modern algorithms make cracking harder, a weak password (e.g., ""123456"") can still be easily guessed or found in common wordlists, even if properly hashed and salted. Combining strong, unique passwords with robust hashing best practices makes it effectively impossible for an attacker to crack."
What is the benefit of modern hashing algorithms automatically salting passwords?,"The benefit of modern hashing algorithms like Argon2id, bcrypt, and PBKDF2 automatically salting passwords is that no additional steps are required by the developer or administrator to implement salting. This simplifies secure password storage and ensures that best practices are followed by default, reducing the risk of implementation errors."
How does the time required for cracking hashes change when salting is implemented?,"When salting is implemented, the time required for cracking hashes grows in direct proportion to the number of hashes. This is because each hash must be cracked individually using its unique salt, rather than an attacker being able to pre-compute hashes or use a single lookup table for all passwords."
"What does ""password validation"" entail when using hashing?","Password validation, when using hashing, entails taking a user's entered password, hashing it using the same algorithm and salt (if applicable) that was used to store the original password, and then comparing the newly computed hash with the stored hash. If the two hashes match, the password is considered valid."
Can an attacker determine the original plaintext password if they obtain the hash and the salt?,"Even if an attacker obtains both the hash and the salt, they still cannot ""decrypt"" the hash to get the original plaintext password because hashing is a one-way function. They would still need to perform a cracking attack (e.g., brute force or dictionary attack) by combining candidate passwords with the known salt, hashing them, and comparing the result to the stolen hash."
"What is the primary purpose of the ""hash function"" step in the salting illustration?","The primary purpose of the ""hash function"" step in the salting illustration is to transform the combined password and salt string (e.g., ""hello3ab9"") into a fixed-size, irreversible hash value (e.g., ""39e19b234...""). This hash value is what gets stored, ensuring the original password cannot be retrieved directly."
"Why is it important for a salt to be a ""random string""?","It is important for a salt to be a ""random string"" to ensure its uniqueness and unpredictability. A random salt prevents attackers from pre-computing hashes for common salts or using common salt values in their cracking attempts, thereby maximizing the effectiveness of salting against pre-computed attacks like rainbow tables."
"What is the implication of an attacker using ""GPUs and cloud services with many servers for rent"" for password cracking?","The implication of an attacker using ""GPUs and cloud services with many servers for rent"" for password cracking is that they can leverage significant computational power at a relatively low cost. This allows them to perform a vast number of hash computations per second, speeding up brute-force and dictionary attacks, especially against passwords not protected by strong hashing algorithms and best practices."
"How does the ""store hash and salt"" step contribute to password security?","The ""store hash and salt"" step contributes to password security by ensuring that the unique salt used for a password is retained alongside its hash. This is crucial because the salt is needed to correctly hash a user's input password during validation and to maintain the security benefits of salting against pre-computation attacks."
"What is the main takeaway from the ""Password Storage Cheat Sheet"" introduction?","The main takeaway from the ""Password Storage Cheat Sheet"" introduction is that secure password storage is critical to prevent attackers from obtaining passwords even if a system is compromised. While attackers can brute force hashes offline, defenders can mitigate this by using resource-intensive hash algorithms to slow down these attacks."
How does salting enhance the security provided by hashing?,"Salting enhances the security provided by hashing by making pre-computed attacks (like rainbow tables) ineffective and by ensuring that identical passwords result in different stored hashes. This forces attackers to crack each password individually, significantly increasing the time and computational resources required for a successful attack, even if they obtain the hashes."
What is the consequence if best practices for hashing are not followed when storing passwords?,"If best practices for hashing are not followed when storing passwords, the cost to an attacker to do successful password cracking becomes relatively small, even with an enormous number of permutations. This significantly increases the risk of passwords being compromised through methods like brute-force attacks, despite the use of high-speed hardware and cloud services by attackers."
