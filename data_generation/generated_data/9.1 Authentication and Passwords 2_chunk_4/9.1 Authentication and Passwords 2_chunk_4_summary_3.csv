input,output
Provide a comprehensive summary of password salting.,"Password salting is a security technique used to reduce the effectiveness of offline attacks using pre-computed hashes. A **salt** is a unique, randomly generated string that is added to a password before applying the hash function. Each password has its own salt, which is stored along with the hash of the password+salt. This process makes cracking large numbers of hashes significantly harder, as an attacker must crack hashes one at a time using the respective salt, rather than calculating a hash once and comparing it against every stored hash. Salting also protects against pre-computing hashes using rainbow tables or database-based lookups and prevents determining if two users have the same password."
What is a salt in the context of password security?,"In the context of password security, a **salt** is a unique, randomly generated string that is added to each password as part of the hashing process. It is combined with the password before the hash function is applied."
Summarise the primary purpose of adding a salt to a password.,"The primary purpose of adding a **salt** to a password is to reduce the effectiveness of offline attacks that use pre-computed hashes. By making each password's hash unique, even if the original passwords are the same, it forces attackers to crack hashes individually rather than using large pre-computed tables."
Explain the characteristic of salt related to individual passwords.,"A key characteristic of a **salt** is that each password has its own unique salt. This means that even if two users choose the exact same password, their stored hashes will be different because a unique salt is added to each before hashing."
How is the salt value stored in a password system?,The **salt** value is stored along with the hash of the password+salt. This allows the system to retrieve the correct salt when verifying a user's password.
Can you summarise the key consideration regarding the size of a salt in bits for an attacker?,"For a **salt** of *n*-bit, the key consideration for an attacker is that they need to pre-compute 2^n hashes for the same password. This significantly increases the computational effort required for cracking, as a larger *n* makes pre-computation exponentially more difficult."
Summarise the importance of securely storing passwords.,"It is essential to store passwords in a way that prevents them from being obtained by an attacker, even if the application or database is compromised. Secure storage ensures that user credentials remain protected against various forms of attack, including offline brute-forcing."
What is an attacker's capability regarding stored password hashes offline?,"After an attacker has acquired stored password hashes, they are always able to **brute force** hashes offline. **Brute force** refers to trying every possible candidate password until a match is found. This capability highlights the need for robust password storage mechanisms to slow down such attacks."
"As a defender, what is the only way to slow down offline password attacks?","As a defender, it is only possible to slow down **offline attacks** by selecting hash algorithms that are as resource-intensive as possible. **Offline attacks** are those where an attacker attempts to crack stolen password hashes without direct interaction with the live system, typically through brute force or dictionary attacks."
Provide a comprehensive summary of the differences between hashing and encryption for sensitive data.,"Both **hashing** and **encryption** provide ways to keep sensitive data safe. However, they differ fundamentally: **Hashing** is a one-way function, meaning it is impossible to 'decrypt' a hash and obtain the original plaintext value. It is appropriate for password validation. **Encryption** is a two-way function, meaning that the original plaintext password can be retrieved if the key is available. Passwords should be hashed, not encrypted, to prevent their retrieval even if the storage mechanism is compromised."
Explain the fundamental property of a hashing function.,"The fundamental property of a **hashing function** is that it is a **one-way function**. This means it is impossible to 'decrypt' a hash and obtain the original plaintext value. Once data is hashed, it cannot be reversed to its original form."
Explain the fundamental property of an encryption function.,"The fundamental property of an **encryption function** is that it is a **two-way function**. This means that the original plaintext data can be retrieved from the encrypted data (ciphertext) if the correct key is available. This is in contrast to hashing, which is a one-way process."
"Should passwords be hashed or encrypted, and why?","Passwords should be **hashed**, not encrypted. This is because **hashing** is a one-way function, making it impossible to retrieve the original plaintext password from its hash. If passwords were encrypted, an attacker who obtains the encryption key could decrypt all stored passwords, compromising user accounts."
Is hashing appropriate for password validation? Explain why.,"Yes, **hashing** is appropriate for password validation. This is because when a user attempts to log in, their entered password can be hashed and then compared to the stored hash. If the hashes match, the password is correct. Even if an attacker obtains the hashed password, they cannot enter it into an application's password field and log in as the victim because the system expects a plaintext password to hash and compare."
Summarise how attackers can crack unsalted password hashes.,"Attackers can crack unsalted password hashes by following a basic process: first, they select a password they think the victim might have chosen. Then, they calculate the hash of that selected password. Finally, they compare the hash they calculated to the hash of the victim. If they match, the attacker has successfully 'cracked' the hash and now knows the plaintext value of the password."
List the basic steps an attacker follows to crack unsalted password hashes.,"The basic steps an attacker follows to crack unsalted password hashes are: \n1. Select a password they think the victim has chosen (e.g., 'password1!'). \n2. Calculate the hash of that selected password. \n3. Compare the calculated hash to the hash of the victim. \nIf they match, the password is 'cracked'."
What methods do attackers use to select candidate passwords when cracking hashes?,"Attackers use several methods to select candidate passwords when cracking hashes. These include using lists of passwords obtained from other compromised sites, employing **brute force** (trying every possible candidate password), and utilizing dictionaries or wordlists of common passwords."
Describe the iterative nature of password hash cracking.,"The iterative nature of password hash cracking involves repeating the process of selecting a candidate password, calculating its hash, and comparing it to the target hash for a large number of potential candidate passwords. This continuous trial-and-error approach is fundamental to cracking efforts."
"Discuss the cost implications for an attacker attempting to crack passwords, especially when best practices are not followed.","While the number of permutations can be enormous, the cost to an attacker for successful password cracking is relatively small, especially when best practices for hashing are not followed. This is due to the availability of high-speed hardware, such as GPUs, and cloud services with many servers for rent, which significantly reduce the computational expense."
What makes passwords effectively impossible for an attacker to crack?,Passwords become effectively impossible for an attacker to crack when they are strong passwords stored with modern hashing algorithms and when hashing best practices are consistently followed. This combination creates a robust defense against cracking attempts.
What is the administrator's responsibility regarding hashing algorithms?,It is the administrator's responsibility to select a modern hashing algorithm for password storage. Choosing an appropriate algorithm is crucial for maintaining strong password security and protecting user credentials from cracking attempts.
How does salting make cracking large numbers of hashes significantly harder?,"Salting makes cracking large numbers of hashes significantly harder because the **salt** is unique for every user. This means an attacker has to crack hashes one at a time using the respective salt, rather than calculating a single hash once and comparing it against every stored hash. Consequently, the time required for cracking grows in direct proportion to the number of hashes, making mass cracking impractical."
How does salting protect against rainbow tables?,"Salting protects against **rainbow tables** by preventing an attacker from pre-computing hashes. A **rainbow table** is a pre-computed table used to reverse cryptographic hash functions. Since each password has a unique salt, the hash generated is unique even for identical passwords, rendering generic rainbow tables useless and forcing attackers to compute hashes individually for each salted password."
Explain how salting prevents determining if two users have the same password.,"Salting prevents determining whether two users have the same password because the different **salts** used for each password will result in different hashes, even if the original plaintext passwords are identical. This means an attacker cannot simply compare stored hashes to identify users with common or duplicate passwords."
Which modern hashing algorithms automatically handle salting?,"Modern hashing algorithms such as Argon2id, bcrypt, and PBKDF2 automatically salt the passwords. This means that when using these algorithms, no additional steps are required to implement salting, simplifying secure password storage."
Describe the process of salting a password based on the provided illustration.,"Based on the illustration, the process of salting a password begins with a plaintext password, for example, 'hello'. A **salt**, which is a random string (e.g., '3ab9'), is then added to this password, forming 'hello3ab9'. This combined string is then fed into a **hash function**, which produces a unique hash value (e.g., '39e19b234...'). Finally, both the generated hash and the salt are stored together."
Why are passwords recommended to be hashed rather than encrypted?,"Passwords are recommended to be **hashed** rather than **encrypted** because hashing is a **one-way function**, meaning it's impossible to retrieve the original plaintext password from its hash. In contrast, encryption is a **two-way function**, which means the original plaintext password could be retrieved if an attacker obtains the encryption key, thereby compromising security."
Define 'brute force' in the context of password cracking.,"In the context of password cracking, **brute force** refers to a method where an attacker attempts to guess a password by systematically trying every possible candidate combination until the correct one is found. This process can be very time-consuming but is often effective against weak or unsalted passwords."
What are 'pre-computed hashes' in the context of offline attacks?,"In the context of **offline attacks**, 'pre-computed hashes' refer to a collection of hash values that an attacker has calculated in advance for a large number of potential passwords. These are then used to quickly compare against stolen password hashes without needing to compute them on the fly, significantly speeding up cracking. Salting aims to reduce the effectiveness of such pre-computed hashes."
Why are resource-intensive hash algorithms recommended for password storage?,"Resource-intensive hash algorithms are recommended for password storage because they are designed to be computationally expensive, meaning they require significant processing power and time to execute. This characteristic helps to slow down **offline attacks**, such as brute force attempts, making it much harder and more time-consuming for an attacker to crack stolen password hashes."
What is the implication of an application or database being compromised regarding password security?,"The implication of an application or database being compromised regarding password security is that it is essential to store passwords in a way that prevents them from being obtained by an attacker, even under such circumstances. A compromise means an attacker might gain access to stored password data, necessitating strong hashing and salting to protect the actual plaintext passwords."
Distinguish between 'decrypting' and 'cracking' password hashes.,"The distinction between 'decrypting' and 'cracking' password hashes is crucial: **Decrypting** a hash is impossible because hashing is a **one-way function**; there's no mathematical inverse to obtain the original plaintext. **Cracking** a hash, however, is possible in some circumstances and involves guessing potential plaintext passwords, hashing them, and comparing the resulting hash to the target hash. If a match is found, the password is 'cracked'."
How does hashing facilitate password validation without storing the plaintext password?,"Hashing facilitates password validation without storing the plaintext password by converting the user's entered password into a hash value. This newly generated hash is then compared against the stored hash associated with the user's account. If the two hash values match, the system authenticates the user, confirming the password's correctness without ever needing to store or access the original plaintext password."
How does the uniqueness of salt for every user change an attacker's approach to cracking hashes?,"The uniqueness of **salt** for every user fundamentally changes an attacker's approach to cracking hashes by forcing them to crack hashes one at a time using the respective salt. Instead of pre-computing a single hash for a common password and comparing it against all stored hashes, the attacker must perform a unique hash calculation for each user's salted password, dramatically increasing the computational effort and time required for mass cracking."
What are the consequences if best practices for hashing are not followed?,"If best practices for hashing are not followed, the consequences are significant: the cost to an attacker to perform successful password cracking becomes relatively small. Even with an enormous number of password permutations, attackers can leverage high-speed hardware like GPUs and cloud services to efficiently crack passwords, making user accounts vulnerable."
Role of GPUs and Cloud Services in Cracking,"GPUs (Graphics Processing Units) and cloud services play a significant role in password cracking by providing attackers with high-speed hardware and access to many servers for rent. This powerful computational infrastructure allows attackers to process an enormous number of password permutations quickly and at a relatively low cost, accelerating the cracking process, especially when best practices for hashing are not followed."
What is the ultimate goal of secure password storage?,"The ultimate goal of secure password storage is to store passwords in a way that prevents them from being obtained by an attacker, even if the application or database itself is compromised. This ensures that user credentials remain confidential and secure against various threats."
What is meant by a 'random string' when defining a salt?,"When defining a **salt**, a 'random string' means that the salt is an unpredictable sequence of characters. This randomness is crucial because it ensures that each salt is unique and cannot be easily guessed or pre-computed, thereby enhancing the security of the hashing process by making each password's hash unique."
Explain why hashing is considered a 'one-way function'.,"Hashing is considered a 'one-way function' because it is computationally infeasible to reverse the process; that is, it is impossible to 'decrypt' a hash and obtain the original plaintext value. The function transforms input data into a fixed-size string of characters, but this transformation is designed to be irreversible."
"If an attacker obtains a hashed password, can they use it to log in as the victim?","No, if an attacker obtains a hashed password, they cannot use it to log in as the victim. This is because the application's password field expects a plaintext password, which it then hashes internally for comparison with the stored hash. The attacker cannot simply enter the hash value into the login field to gain access."
Describe the relationship between a salt and a password during the hashing process.,"During the hashing process, a **salt** is explicitly added to a password *before* applying the hash function. This means the salt is concatenated with the plaintext password, and then the combined string (password+salt) is fed into the hashing algorithm. This ensures that the resulting hash is unique to that specific password and salt combination."
How does salting protect against database-based lookups for cracking passwords?,"Salting protects against database-based lookups for cracking passwords by making it impossible to use pre-computed tables of common password hashes. Since each password has a unique **salt**, the resulting hash is unique, even for identical passwords. This prevents an attacker from simply looking up a stolen hash in a database of pre-calculated hashes to find the original password."
How does salting affect the time required for an attacker to crack a large number of hashes?,"Salting significantly increases the time required for an attacker to crack a large number of hashes. Because each password has a unique **salt**, the attacker cannot use a single pre-computed hash for multiple users. Instead, they must crack hashes one at a time, meaning the time required grows in direct proportion to the number of hashes, making mass cracking computationally prohibitive."
What does it mean for a password hash to be 'unsalted'?,"For a password hash to be 'unsalted' means that no unique, randomly generated **salt** was added to the password before it was put through the hashing function. This makes the hash vulnerable to **offline attacks** using pre-computed hashes like rainbow tables, as identical passwords will produce identical hashes across different users."
How do lists of passwords obtained from other compromised sites aid attackers in cracking passwords?,"Lists of passwords obtained from other compromised sites aid attackers in cracking passwords by providing a ready-made collection of common or previously used credentials. Attackers can use these lists as candidate passwords in their cracking attempts, hashing each one and comparing it against stolen hashes, which is often more efficient than pure **brute force**."
What is the overarching goal presented in the 'Password Storage Cheat Sheet'?,"The overarching goal presented in the 'Password Storage Cheat Sheet' is to store passwords in a way that prevents them from being obtained by an attacker, even if the application or database is compromised. This emphasizes the critical importance of robust security measures for password storage to protect user data."
"Based on the illustration, explain the significance of the 'add salt' step.","Based on the illustration, the 'add salt' step is significant because it depicts the crucial action of combining a random string, the **salt**, with the original plaintext password (e.g., 'hello') before any hashing occurs. This creates a unique salted password (e.g., 'hello3ab9'), ensuring that even identical passwords will produce different hashes when processed, thereby enhancing security against pre-computed attacks."
What information is stored after a password has been salted and hashed?,"After a password has been salted and hashed, two pieces of information are stored: the resulting hash of the password+salt, and the **salt** value itself. Storing both allows the system to retrieve the salt when a user attempts to log in, combine it with the entered password, and then hash and compare the result for validation."
Why is it important that hashing is one-way for passwords?,"It is important that **hashing** is a **one-way function** specifically for password storage because it ensures that even if an attacker gains access to the stored hashes, they cannot reverse the process to retrieve the original plaintext passwords. This fundamental property protects user credentials from being exposed, even in the event of a data breach, as only the hash, not the actual password, is stored."
"Summarise the benefits of using modern hashing algorithms such as Argon2id, bcrypt, and PBKDF2 for password storage.","The benefits of using modern hashing algorithms such as Argon2id, bcrypt, and PBKDF2 for password storage are significant. These algorithms automatically **salt** passwords, eliminating the need for additional manual steps in the implementation of secure password storage. Furthermore, they are designed to be resource-intensive, which, when combined with strong passwords and best practices, makes passwords effectively impossible for an attacker to crack."
