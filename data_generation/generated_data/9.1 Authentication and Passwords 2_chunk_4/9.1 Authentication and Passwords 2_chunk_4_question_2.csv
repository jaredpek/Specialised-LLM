input,output
What is password salting and why is it used?,"Password salting is a technique used to reduce the effectiveness of offline attacks that utilize pre-computed hashes. It involves adding a unique, randomly generated string, called a salt, to a password before applying the hash function. This process makes cracking large numbers of hashes significantly harder."
"Define ""salt"" in the context of password security.","In the context of password security, a salt is a unique, randomly generated string that is added to a password before the hash function is applied. Each password has its own distinct salt."
How is the salt value handled after the password has been salted and hashed?,The salt value is stored along with the hash of the password and salt combination. This allows the system to retrieve the correct salt when verifying a user's password.
What is the computational impact of using a salt of n-bit on an attacker's effort?,"For a salt of n-bit, an attacker needs to pre-compute 2n of hashes for the same password. This significantly increases the computational effort required for offline attacks, making them less feasible."
Describe the step-by-step process of password salting.,"The process of password salting involves taking a plaintext password, adding a unique, randomly generated string (the salt) to it, and then applying a hash function to this combined string (password+salt). The resulting hash and the salt are then stored together."
Why is it essential to store passwords securely?,"It is essential to store passwords in a way that prevents them from being obtained by an attacker, even if the application or database storing them is compromised. This protects user accounts and sensitive data."
What is the primary risk once an attacker acquires stored password hashes?,"Once an attacker acquires stored password hashes, they are always able to brute force these hashes offline. This means they can attempt to guess the original passwords without needing to interact with the live system."
"As a defender, what is the most effective strategy to slow down offline password attacks?","As a defender, the most effective strategy to slow down offline attacks is by selecting hash algorithms that are as resource-intensive as possible. This increases the time and computational power an attacker needs to crack passwords."
What is the fundamental difference between hashing and encryption?,"The fundamental difference between hashing and encryption lies in their reversibility. Hashing is a one-way function, meaning it's impossible to ""decrypt"" a hash to obtain the original plaintext value. Encryption, conversely, is a two-way function, allowing the original plaintext to be retrieved if the correct key is available."
Why should passwords be hashed instead of encrypted for storage?,"Passwords should be hashed, not encrypted, because hashing is a one-way function. This means that even if an attacker obtains the hashed password, they cannot retrieve the original plaintext password. If passwords were encrypted, an attacker with the encryption key could decrypt them."
"Explain what a ""one-way function"" means in the context of password hashing.","In the context of password hashing, a ""one-way function"" means that it is computationally infeasible or impossible to reverse the process. Specifically, given a hash value, it is impossible to ""decrypt"" it and obtain the original plaintext password that generated that hash."
Why is hashing considered appropriate for password validation?,"Hashing is appropriate for password validation because it allows the system to verify a user's password without ever storing or knowing the plaintext password. When a user attempts to log in, their entered password is hashed, and this new hash is compared to the stored hash. If they match, the password is correct."
Can an attacker log in as a victim if they obtain the victim's hashed password?,"No, even if an attacker obtains a victim's hashed password, they cannot enter it directly into an application's password field to log in as the victim. The application expects a plaintext password to hash and compare, not an already hashed value."
"What is a ""two-way function"" in the context of data security?","A ""two-way function"" in the context of data security refers to an operation, such as encryption, where the original plaintext data can be retrieved from its transformed state (ciphertext) if the appropriate key is available."
"Is it possible to ""decrypt"" password hashes to obtain original passwords?","No, it is not possible to ""decrypt"" password hashes to obtain the original passwords because hashing is a one-way function. However, it is possible to ""crack"" hashes in some circumstances by guessing the original password and comparing its hash."
Outline the basic steps an attacker takes to crack unsalted password hashes.,"The basic steps an attacker takes to crack unsalted password hashes are: first, select a password they think the victim might have chosen; second, calculate the hash of that selected password; and third, compare the calculated hash to the victim's stored hash. If they match, the attacker has successfully cracked the hash and knows the plaintext password."
What methods do attackers use to select candidate passwords when cracking hashes?,"Attackers use several methods to select candidate passwords when cracking hashes, including: using lists of passwords obtained from other compromised sites, employing brute force (trying every possible candidate password), and utilizing dictionaries or wordlists of common passwords."
How does the process of cracking password hashes typically proceed for a large number of potential passwords?,"The process of cracking password hashes typically proceeds by repeating the basic steps (selecting a candidate password, calculating its hash, and comparing it to the target hash) for a large number of potential candidate passwords."
What factors contribute to the relatively low cost for attackers to perform successful password cracking?,The relatively low cost for attackers to perform successful password cracking is due to factors such as the availability of high-speed hardware like GPUs and access to cloud services with many servers for rent. This is especially true when best practices for hashing are not followed.
What makes it effectively impossible for an attacker to crack passwords?,"It is effectively impossible for an attacker to crack passwords when strong passwords are used, stored with modern hashing algorithms, and when hashing best practices are followed."
What is the administrator's responsibility regarding hashing algorithms for password storage?,It is the administrator's responsibility to select a modern hashing algorithm for password storage. This ensures that passwords are protected using current best practices.
How does salting make cracking large numbers of hashes significantly harder?,"Salting makes cracking large numbers of hashes significantly harder because the salt is unique for every user. This forces an attacker to crack hashes one at a time, using the respective salt for each, rather than calculating a single hash once and comparing it against every stored hash. The time required grows in direct proportion to the number of hashes."
How does salting protect against pre-computing hashes using rainbow tables?,"Salting protects against an attacker pre-computing hashes using rainbow tables or database-based lookups. Since each password has a unique salt, the hash for the same password will be different for different users, rendering pre-computed tables ineffective."
How does salting prevent an attacker from determining if two users have the same password?,"Salting prevents an attacker from determining whether two users have the same password without cracking the hashes. This is because different salts will result in different hashes, even if the underlying plaintext passwords are identical."
List examples of modern hashing algorithms that automatically salt passwords.,"Examples of modern hashing algorithms that automatically salt passwords include Argon2id, bcrypt, and PBKDF2. When using these algorithms, no additional steps are required for salting."
What is the primary purpose of password salting?,"The primary purpose of password salting is to reduce the effectiveness of offline attacks that rely on pre-computed hashes, such as rainbow tables, by ensuring that identical passwords produce different hash values for different users."
What does the illustration on page 1 demonstrate about password salting?,"The illustration on page 1 demonstrates the process of password salting. It shows a plaintext password (""hello"") being combined with a salt (""add salt"" resulting in ""hello3ab9""), then passed through a hash function to produce a hash (""39e19b234...""). Finally, both the hash and the salt are stored."
Why is it important that each password has its own salt?,"It is important that each password has its own salt because this prevents an attacker from using a single pre-computed hash or rainbow table to crack multiple passwords, even if those passwords are identical. Each unique salt forces individual cracking attempts."
What kind of attacks does salting specifically aim to reduce the effectiveness of?,Salting specifically aims to reduce the effectiveness of offline attacks that use pre-computed hashes. These attacks often involve an attacker having access to a database of hashes and trying to match them against pre-calculated hash values for common passwords.
What is the implication of an attacker being able to brute force hashes offline?,"The implication of an attacker being able to brute force hashes offline is that they can dedicate significant computational resources over an extended period, without detection, to guess original passwords from their hashes, even if the live system is secure."
What is the general principle for storing sensitive data like passwords safely?,"The general principle for storing sensitive data like passwords safely is to use methods that keep the data secure even if the storage system (application or database) is compromised. For passwords, this specifically means hashing them."
How does a resource-intensive hash algorithm help defend against offline attacks?,"A resource-intensive hash algorithm helps defend against offline attacks by requiring more computational power and time to calculate each hash. This significantly slows down an attacker's brute-force attempts, making it more expensive and time-consuming for them to crack passwords."
Can hashing be reversed to get the original plaintext value?,"No, hashing cannot be reversed to get the original plaintext value. Hashing is a one-way function, meaning it's impossible to ""decrypt"" a hash and obtain the original plaintext."
What is the purpose of comparing the calculated hash to the victim's hash during an attack?,"The purpose of comparing the calculated hash to the victim's hash during an attack is to determine if the attacker's guessed password is correct. If the hashes match, it confirms that the guessed password is the original plaintext password."
"What does ""brute force"" mean in the context of cracking passwords?","In the context of cracking passwords, ""brute force"" means trying every possible candidate password systematically until the correct one is found. This is one method attackers use to select candidate passwords."
Why is it important for administrators to select modern hashing algorithms?,"It is important for administrators to select modern hashing algorithms because these algorithms incorporate best practices, such as automatic salting, and are designed to be more resistant to cracking attempts, especially with high-speed hardware."
What is the benefit of modern hashing algorithms automatically salting passwords?,"The benefit of modern hashing algorithms automatically salting passwords is that no additional steps are required by the developer or administrator to implement salting. This ensures that salting, a critical security measure, is consistently applied, making password storage more secure by default."
How does the uniqueness of a salt for every user impact an attacker's strategy?,"The uniqueness of a salt for every user forces an attacker to crack hashes one at a time. Instead of pre-computing a large table of hashes for common passwords, the attacker must compute a hash for each guessed password combined with the specific salt associated with the target user, significantly increasing the effort."
What is the primary goal of secure password storage?,"The primary goal of secure password storage is to prevent passwords from being obtained by an attacker, even if the system or database where they are stored is compromised, thereby protecting user accounts and data."
"What is the relationship between strong passwords, modern hashing algorithms, and cracking difficulty?","Strong passwords, when combined with modern hashing algorithms and adherence to hashing best practices, make it effectively impossible for an attacker to crack them. Each element contributes to a robust defense against password compromise."
What kind of data do hashing and encryption both aim to keep safe?,"Both hashing and encryption provide ways to keep sensitive data safe. While their mechanisms differ, their shared goal is to protect information from unauthorized access or disclosure."
What happens if an attacker's calculated hash matches the victim's hash?,"If an attacker's calculated hash matches the victim's hash, it means the attacker has correctly ""cracked"" the hash and now knows the plaintext value of the victim's password."
"What are ""rainbow tables"" and how does salting mitigate their threat?","Rainbow tables are pre-computed tables of hashes for common passwords, used by attackers to quickly find the plaintext password corresponding to a given hash. Salting mitigates this threat because each password has a unique salt, making the hash unique even for identical passwords, thus rendering generic rainbow tables ineffective."
Why is it impossible to determine if two users have the same password when salting is used?,"It is impossible to determine if two users have the same password when salting is used because the different salts applied to each user's password will result in different hash values, even if their original plaintext passwords are identical. This prevents an attacker from identifying common passwords by simply comparing hash values."
What is the role of a hash function in the salting process?,"In the salting process, the hash function takes the combined string of the password and its unique salt as input and produces a fixed-size output, which is the hash. This hash is then stored along with the salt."
How does the time required for cracking hashes change with salting?,"With salting, the time required for cracking hashes grows in direct proportion to the number of hashes. This is because each hash must be cracked individually with its unique salt, rather than a single pre-computation being applied to many hashes."
What are the consequences of not following best practices for hashing?,"Not following best practices for hashing makes password cracking relatively easy and inexpensive for attackers, even with high-speed hardware and cloud services. This significantly increases the risk of password compromise."
"What is the primary security benefit of using Argon2id, bcrypt, or PBKDF2 for password storage?","The primary security benefit of using modern hashing algorithms like Argon2id, bcrypt, or PBKDF2 for password storage is that they automatically salt passwords. This eliminates the need for manual salting steps and ensures that a critical security measure is implemented by default, making password storage more robust against various attacks."
"How does the concept of ""resource intensive"" hash algorithms relate to slowing down attackers?","""Resource intensive"" hash algorithms are designed to require significant computational resources (CPU, memory, time) to compute a hash. By selecting such algorithms, defenders force attackers to expend more resources and time for each cracking attempt, thereby slowing down offline attacks and making them less practical."
"What is the overall goal of ""Password Storage Cheat Sheet"" as a document?","The overall goal of the ""Password Storage Cheat Sheet"" document is to provide essential guidelines and concepts for securely storing passwords, emphasizing the importance of hashing, salting, and selecting robust algorithms to prevent attackers from obtaining or cracking passwords."
