input,output
Define password salting.,"Password salting is a technique used to reduce the effectiveness of offline attacks using pre-computed hashes. It involves adding a unique, randomly generated string, known as a ""salt,"" to a password before applying the hash function. The salt value is stored along with the hash of the password+salt."
What is the primary purpose of password salting?,"The primary purpose of password salting is to reduce the effectiveness of offline attacks that utilize pre-computed hashes. By adding a unique ""salt"" to each password before hashing, it makes it significantly harder for attackers to use pre-computed tables (like rainbow tables) or brute-force multiple hashes simultaneously."
"Explain what a ""salt"" is in the context of password security.","In the context of password security, a ""salt"" is a random string that is added to a password before the hash function is applied. Each password has its own unique salt. This salt value is then stored along with the resulting hash of the password combined with the salt."
How does the uniqueness of a salt for each password impact an attacker's efforts?,"The uniqueness of a salt for each password significantly impacts an attacker's efforts by making it harder to crack large numbers of hashes. Since each user has a unique salt, an attacker must crack hashes one at a time using the respective salt, rather than calculating a single hash and comparing it against every stored hash. This means the time required for cracking grows in direct proportion to the number of hashes."
Where is the salt value stored after the hashing process?,"After the hashing process, the salt value is stored along with the hash of the password combined with the salt."
Describe the computational effort required for an attacker to pre-compute hashes for a salt of 'n' bits.,"For a salt of 'n' bits, an attacker needs to pre-compute 2^n of hashes for the same password. This significantly increases the computational effort required for offline attacks."
Why is it essential to store passwords securely?,"It is essential to store passwords in a way that prevents them from being obtained by an attacker, even if the application or database where they are stored is compromised. This secure storage helps protect user accounts and sensitive data."
What can attackers do once they acquire stored password hashes?,"Once attackers acquire stored password hashes, they are always able to brute force these hashes offline. Brute force is a method of trying every possible candidate password until a match is found."
"As a defender, what is the strategy to slow down offline password attacks?","As a defender, the strategy to slow down offline password attacks is to select hash algorithms that are as resource-intensive as possible. Resource-intensive algorithms require more computational power and time, thereby increasing the cost and time for an attacker to brute force hashes."
Compare and contrast hashing and encryption in terms of data security.,"Both hashing and encryption both provide ways to keep sensitive data safe. However, they differ in their functionality. Hashing is a one-way function, meaning it is impossible to ""decrypt"" a hash and obtain the original plaintext value. Encryption, on the other hand, is a two-way function, meaning that the original plaintext data can be retrieved if the correct key is available."
Should passwords be hashed or encrypted for storage?,"Passwords should be hashed, not encrypted, for storage. Hashing is a one-way function, meaning the original plaintext password cannot be retrieved from its hash, which is crucial for security."
Define hashing as a function.,"Hashing is defined as a one-way function. This means it is impossible to ""decrypt"" a hash and obtain the original plaintext value from which it was generated."
What is hashing appropriate for in the context of passwords?,"Hashing is appropriate for password validation. When a user attempts to log in, their entered password can be hashed and compared to the stored hash. If the hashes match, the password is correct, without ever needing to store or retrieve the plaintext password."
What happens if an attacker obtains a hashed password? Can they log in as the victim?,"Even if an attacker obtains a hashed password, they cannot enter it directly into an application's password field and log in as the victim. This is because the application expects a plaintext password to hash and compare, not the hash itself."
Define encryption as a function.,"Encryption is defined as a two-way function. This means that the original plaintext password or data can be retrieved from its encrypted form, provided that the correct decryption key is available."
"Is it possible to ""decrypt"" password hashes to obtain original passwords?","No, it is not possible to ""decrypt"" password hashes to obtain the original passwords because hashing is a one-way function. However, it is possible to ""crack"" hashes in some circumstances."
Outline the basic steps an attacker takes to crack unsalted password hashes.,"The basic steps an attacker takes to crack unsalted password hashes are:\n1. Select a password they think the victim has chosen (e.g., password1!).\n2. Calculate the hash of that selected password.\n3. Compare the calculated hash to the hash of the victim's password.\n4. If the hashes match, the attacker has successfully ""cracked"" the hash and now knows the plaintext value of the password."
How do attackers typically select candidate passwords when trying to crack hashes?,"Attackers use different methods to select candidate passwords when trying to crack hashes. These methods include using lists of passwords obtained from other compromised sites, employing brute force (trying every possible candidate password), and utilizing dictionaries or wordlists of common passwords."
What is brute force in the context of password cracking?,"In the context of password cracking, brute force is a method where an attacker attempts to try every possible candidate password until the correct one is found. This is one of the methods used to select candidate passwords when trying to crack hashes."
"What resources do attackers use to perform password cracking, and what is the associated cost?","Attackers use high-speed hardware, such as GPUs, and cloud services with many servers for rent to perform password cracking. While the number of permutations can be enormous, the cost to an attacker for successful password cracking is relatively small, especially when best practices for hashing are not followed."
Under what conditions can password cracking be effectively impossible for an attacker?,"Password cracking can be effectively impossible for an attacker when strong passwords are used, stored with modern hashing algorithms, and hashing best practices are followed."
What is the administrator's responsibility regarding hashing algorithms?,It is the administrator's responsibility to select a modern hashing algorithm for password storage.
How does salting protect against rainbow tables?,"Salting protects against rainbow tables by ensuring that each password has a unique salt. Rainbow tables are pre-computed tables of hashes for common passwords. Since the salt is unique for every user, the hash generated for the same password will be different for different users, making pre-computed rainbow tables ineffective for cracking multiple passwords."
Explain how salting prevents an attacker from determining if two users have the same password.,"Salting prevents an attacker from determining whether two users have the same password without cracking the hashes. This is because the different salts applied to each password will result in different hashes, even if the underlying plaintext passwords are identical. An attacker cannot simply compare hashes to find duplicate passwords."
List examples of modern hashing algorithms that automatically salt passwords.,"Examples of modern hashing algorithms that automatically salt passwords include Argon2id, bcrypt, and PBKDF2. When using these algorithms, no additional steps are required for salting."
"What is the overall benefit of using modern hashing algorithms like Argon2id, bcrypt, and PBKDF2?","The overall benefit of using modern hashing algorithms like Argon2id, bcrypt, and PBKDF2 is that they automatically salt passwords, meaning no additional steps are required for salting. This simplifies implementation while providing robust protection against various offline attacks, making password cracking effectively impossible when combined with strong passwords and best practices."
Describe the illustration of password salting provided.,"The illustration of password salting shows a plaintext password, ""hello,"" being combined with a ""salt"" to form ""hello3ab9."" This combined string is then passed through a ""hash function,"" which produces a hash value, such as ""39e19b234..."". Finally, this hash value along with the salt are stored together."
Why are resource-intensive hash algorithms recommended for password storage?,"Resource-intensive hash algorithms are recommended for password storage because they slow down offline attacks. By requiring more computational resources (CPU, memory) to compute a hash, they increase the time and cost for an attacker to brute force or crack password hashes, even if the hashes are acquired."
What is the risk if an application or database storing passwords is compromised?,"If an application or database storing passwords is compromised, there is a risk that the stored passwords (or their hashes) could be obtained by an attacker. This necessitates storing passwords in a way that prevents them from being usable even if obtained."
Can an attacker use pre-computed hashes to attack salted passwords?,"No, an attacker cannot effectively use pre-computed hashes, such as those in rainbow tables, to attack salted passwords. This is because salting adds a unique, random string to each password before hashing, meaning the hash for a given password will be different for every user, rendering generic pre-computed tables useless."
"What does ""offline attacks"" refer to in the context of password security?","In the context of password security, ""offline attacks"" refer to attempts by an attacker to crack password hashes without directly interacting with the live application or server. This typically involves acquiring a database of hashes and then using their own computational resources to try and determine the original passwords."
How does salting make cracking large numbers of hashes significantly harder?,"Salting makes cracking large numbers of hashes significantly harder because the salt is unique for every user. This forces an attacker to crack hashes one at a time, using the specific salt associated with each hash, rather than being able to compute a single hash and compare it against a large database of stored hashes. Consequently, the time required for cracking grows in direct proportion to the number of hashes."
"What is the difference between ""decrypting"" and ""cracking"" password hashes?","""Decrypting"" password hashes implies reversing a two-way function to obtain the original plaintext, which is impossible for hashes as they are one-way functions. ""Cracking"" password hashes, on the other hand, involves guessing potential plaintext passwords, hashing them, and comparing the result to the target hash until a match is found, thereby revealing the original password."
Why is it important that hashing is a one-way function for password storage?,"It is important that hashing is a one-way function for password storage because it ensures that even if an attacker gains access to the stored hashes, they cannot retrieve the original plaintext passwords. This protects user privacy and security, as the actual passwords remain unknown even to the system administrators."
"What are ""rainbow tables"" and how does salting mitigate their threat?","""Rainbow tables"" are pre-computed tables of hashes for a large number of common passwords. Salting mitigates their threat by adding a unique, random string (salt) to each password before hashing. This means that even if two users have the same password, their stored hashes will be different due to the unique salts, rendering generic rainbow tables ineffective for cracking."
What are the consequences if best practices for hashing are not followed?,"If best practices for hashing are not followed, the cost to an attacker to perform successful password cracking becomes relatively small, even with high-speed hardware like GPUs and cloud services. This significantly increases the risk of passwords being compromised."
"How does the ""store hash and salt"" step in the salting illustration contribute to security?","The ""store hash and salt"" step in the salting illustration contributes to security by ensuring that the unique salt used for a password is retained alongside its hash. This is crucial because the salt is needed to verify the password later (by hashing the user's input with the stored salt and comparing it to the stored hash) and to maintain the effectiveness of salting against pre-computed attacks."
Can an attacker log in as a victim if they obtain an encrypted password?,"Yes, if an attacker obtains an encrypted password and also has the key used for encryption, they can decrypt the password to its original plaintext value. Once they have the plaintext password, they can then use it to log in as the victim. This is why passwords should be hashed, not encrypted."
"What is the significance of the phrase ""trying every possible candidate"" in brute force attacks?","The significance of ""trying every possible candidate"" in brute force attacks is that it represents an exhaustive search method. The attacker systematically attempts every combination of characters, numbers, and symbols until the correct password is found. This method is computationally intensive but guaranteed to find the password given enough time and resources."
Why is it important for an administrator to select a modern hashing algorithm?,"It is important for an administrator to select a modern hashing algorithm because these algorithms are designed with current security best practices in mind, often incorporating features like automatic salting and being resource-intensive. This makes strong passwords stored with these algorithms effectively impossible for an attacker to crack, even with advanced hardware."
How does salting make database-based lookups for cracking hashes ineffective?,"Salting makes database-based lookups for cracking hashes ineffective because each password has a unique salt. If an attacker were to build a database of pre-computed hashes for common passwords, they would need to do so for every possible salt value, which is computationally infeasible. Since the stored hash is a hash of password+salt, a simple lookup of hash(password) would not work."
What are the three methods mentioned for selecting candidate passwords?,"The three methods mentioned for selecting candidate passwords are:\n1. Lists of passwords obtained from other compromised sites.\n2. Brute force, which involves trying every possible candidate.\n3. Dictionaries or wordlists of common passwords."
What is the primary difference in how hashing and encryption handle data retrieval?,"The primary difference in how hashing and encryption handle data retrieval is that hashing is a one-way function, meaning the original data (e.g., password) cannot be retrieved from its hash. In contrast, encryption is a two-way function, allowing the original data to be retrieved from its encrypted form if the correct key is available."
Why is it crucial that each password has its own salt?,"It is crucial that each password has its own salt because this uniqueness prevents attackers from using pre-computed tables (like rainbow tables) or from cracking multiple passwords simultaneously. If salts were reused, an attacker could pre-compute hashes for common passwords with those specific salts and then quickly crack all passwords using those salts."
"What does the term ""plaintext value"" refer to in the context of passwords?","In the context of passwords, the ""plaintext value"" refers to the original, unhashed, and unencrypted form of the password that a user types in. It is the human-readable and usable form of the password."
How does the process of comparing hashes work during a password cracking attempt?,"During a password cracking attempt, the process of comparing hashes involves an attacker calculating the hash of a guessed candidate password. This newly calculated hash is then compared directly to the victim's stored password hash. If the two hashes are identical, it signifies that the guessed candidate password is the correct plaintext password."
"What is the implication of the statement ""the time required grows in direct proportion to the number of hashes"" for salting?","The implication of the statement ""the time required grows in direct proportion to the number of hashes"" for salting is that salting significantly increases the computational burden on an attacker. Instead of cracking one hash and applying that knowledge to many, an attacker must perform a separate cracking operation for each unique salted hash. This linear increase in effort makes large-scale cracking much less feasible."
What kind of attacks does salting specifically protect against by making pre-computation difficult?,"Salting specifically protects against offline attacks that rely on pre-computation, such as those using rainbow tables or database-based lookups. By ensuring each password has a unique salt, it renders generic pre-computed hash tables ineffective."
"Why is it important for passwords to be ""strong"" in addition to using modern hashing algorithms?","It is important for passwords to be ""strong"" in addition to using modern hashing algorithms because even the most secure hashing algorithm cannot protect against a weak password that is easily guessable. A strong password (complex, long, unique) combined with modern hashing best practices makes it effectively impossible for an attacker to crack."
"What is the overall goal of the ""Password Storage Cheat Sheet""?","The overall goal of the ""Password Storage Cheat Sheet"" is to provide essential information and best practices for securely storing passwords. It emphasizes the importance of preventing passwords from being obtained by attackers, slowing down offline attacks, and using appropriate techniques like hashing and salting to protect sensitive user credentials."
