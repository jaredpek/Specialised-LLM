input,output
What is password salting?,"Password salting is a technique used to reduce the effectiveness of offline attacks using pre-computed hashes. It involves adding a unique, randomly generated string, known as a **salt**, to a password before applying a **hash function**. This process makes cracking large numbers of hashes significantly harder."
Why is salting used in password storage?,"Salting is used in password storage primarily to reduce the effectiveness of **offline attacks** that utilize pre-computed hashes. By adding a unique **salt** to each password before hashing, it makes it impossible for an attacker to use a single pre-computed hash to crack multiple passwords, thereby increasing the computational effort required for cracking."
What is a salt in the context of password security?,"In the context of password security, a **salt** is a unique, randomly generated string that is added to a password before it is processed by a **hash function**. Each password has its own distinct salt, which is stored along with the resulting hash of the password and salt combination."
How is a salt stored in a password system?,"The **salt** value is stored along with the hash of the password+salt. This allows the system to retrieve the correct salt when verifying a user's password, ensuring that the same salting and hashing process can be applied for comparison."
What is the impact of salt size on an attacker's effort?,"For a **salt** of *n*-bit, an attacker needs to pre-compute 2^n hashes for the same password. This means that a larger salt size significantly increases the computational effort required for an attacker to pre-compute hashes, making offline attacks much more difficult and time-consuming."
Describe the process of password salting.,"The process of password salting involves taking a user's plaintext password and adding a unique, randomly generated string, called a **salt**, to it. This combined string (password+salt) is then passed through a **hash function** to produce a hash value. Finally, this hash value and the salt are stored together. When a user attempts to log in, the same salt is retrieved, combined with the entered password, hashed, and then compared to the stored hash."
Why is it essential to store passwords securely?,"It is essential to store passwords securely to prevent them from being obtained by an attacker, even if the application or database storing them is **compromised**. Secure storage protects sensitive user data and prevents attackers from gaining unauthorized access to accounts."
What can attackers do after acquiring stored password hashes?,"After an attacker has acquired stored password hashes, they are always able to **brute force** these hashes offline. **Brute force** is a method of cracking passwords by systematically trying every possible combination of characters until the correct one is found."
How can defenders slow down offline password attacks?,"As a defender, it is only possible to slow down **offline attacks** by selecting **hash algorithms** that are as resource-intensive as possible. Resource-intensive algorithms require more computational power and time to generate hashes, thereby increasing the time and cost for an attacker to crack passwords."
What is the difference between hashing and encryption for sensitive data?,"Both **hashing** and **encryption** provide ways to keep sensitive data safe, but they differ in their functionality. **Hashing** is a **one-way function**, meaning it's impossible to ""decrypt"" a hash to obtain the original plaintext value. **Encryption** is a **two-way function**, meaning the original plaintext can be retrieved if the correct key is available. Passwords should be hashed, not encrypted."
Why should passwords be hashed instead of encrypted?,"Passwords should be **hashed** and not **encrypted** because hashing is a **one-way function**. This means that even if an attacker obtains the hashed password, they cannot reverse the process to get the original plaintext password. If passwords were encrypted, an attacker with the encryption key could decrypt them and gain access to the original passwords."
Define a one-way function in the context of password security.,"In the context of password security, a **one-way function** (or **hash function**) is a mathematical algorithm that transforms an input (like a password) into a fixed-size string of characters (a hash value). It is designed to be computationally infeasible to reverse, meaning it's impossible to ""decrypt"" the hash to obtain the original plaintext value."
Define a two-way function in the context of data security.,"In the context of data security, a **two-way function** (or **encryption**) is a process that transforms data (plaintext) into an unreadable format (ciphertext) using an **encryption key**, and can be reversed back to its original plaintext form using a corresponding **decryption key**. This means the original data can be retrieved if the key is known."
Is hashing appropriate for password validation?,"Yes, **hashing** is appropriate for password validation. When a user attempts to log in, their entered password is hashed using the same algorithm and salt (if applicable) used during registration. The resulting hash is then compared to the stored hash. If they match, the password is valid, without ever needing to store or retrieve the original plaintext password."
What happens if an attacker obtains a hashed password?,"If an attacker obtains a **hashed password**, they cannot enter it directly into an application's password field to log in as the victim because the application expects a plaintext password to hash and compare. While they cannot ""decrypt"" it, they can attempt to ""crack"" the hash offline to discover the original plaintext password."
"Is it possible to ""decrypt"" password hashes to obtain original passwords?","No, it is not possible to ""decrypt"" password hashes to obtain the original passwords. **Hashing** is a **one-way function**, meaning the process is irreversible. However, it is possible to ""crack"" hashes in some circumstances by guessing the original password and comparing its hash to the obtained hash."
How do attackers crack unsalted password hashes?,"Attackers crack unsalted password hashes by selecting a potential password, calculating its hash, and then comparing that calculated hash to the hash of the victim. If the hashes match, the attacker has successfully ""cracked"" the hash and discovered the plaintext password. This process is repeated for many candidate passwords."
What are the basic steps an attacker follows to crack unsalted password hashes?,"The basic steps an attacker follows to crack unsalted password hashes are:\n1. Select a password they think the victim might have chosen.\n2. Calculate the **hash** of that selected password.\n3. Compare the calculated hash to the stored hash of the victim's password.\n4. If they match, the attacker has successfully ""cracked"" the hash and knows the plaintext value of the password."
What methods do attackers use to select candidate passwords for cracking?,"Attackers use several methods to select candidate passwords for cracking, including:\n* Lists of passwords obtained from other **compromised** sites.\n* **Brute force**, which involves trying every possible candidate password.\n* Dictionaries or wordlists of common passwords."
How is the password cracking process repeated by attackers?,"The password cracking process is repeated for a large number of potential candidate passwords. Attackers systematically try different passwords, calculate their hashes, and compare them against the target hash until a match is found."
What factors make password cracking relatively inexpensive for attackers?,"The cost to an attacker for successful password cracking can be relatively small due to several factors:\n* High-speed hardware, such as GPUs.\n* Cloud services that offer many servers for rent.\nThis is especially true when best practices for hashing are not followed."
What makes password cracking effectively impossible for an attacker?,Password cracking should be effectively impossible for an attacker when strong passwords are used in conjunction with modern **hashing algorithms** and adherence to hashing best practices. These practices include using unique salts for each password and resource-intensive hashing functions.
What is an administrator's responsibility regarding hashing algorithms?,It is the administrator's responsibility to select a modern **hashing algorithm** for password storage. Choosing a robust and up-to-date algorithm is crucial for maintaining strong password security against cracking attempts.
How does salting make cracking large numbers of hashes significantly harder?,"Salting makes cracking large numbers of hashes significantly harder because the **salt** is unique for every user. This forces an attacker to crack hashes one at a time, using the respective unique salt for each, rather than calculating a single hash once and comparing it against every stored hash. Consequently, the time required for cracking grows in direct proportion to the number of hashes, making large-scale attacks impractical."
How does a unique salt for every user impact an attacker's strategy?,"A unique **salt** for every user significantly impacts an attacker's strategy by preventing them from using pre-computed tables (like **rainbow tables**) or performing a single hash calculation to check against multiple stored hashes. The attacker must compute a new hash for each password guess, combined with its specific salt, for every individual user, which drastically increases the computational burden."
What are rainbow tables and how does salting protect against them?,"**Rainbow tables** are pre-computed tables used in cryptanalysis to reverse cryptographic hash functions, typically for cracking passwords. **Salting** protects against an attacker pre-computing hashes using rainbow tables or database-based lookups because the unique salt added to each password ensures that even identical passwords will produce different hash values, rendering generic pre-computed tables useless."
How does salting prevent determining if two users have the same password?,"Salting prevents determining whether two users have the same password without cracking the hashes because the different **salts** used for each user will result in different hash values, even if their original plaintext passwords are identical. This obfuscates common passwords and makes it harder for attackers to identify patterns or target users with weak, shared passwords."
Name some modern hashing algorithms that automatically salt passwords.,"Modern **hashing algorithms** that automatically salt passwords, requiring no additional steps from the developer or administrator, include Argon2id, bcrypt, and PBKDF2. These algorithms are designed to incorporate salting as an integral part of their hashing process, enhancing security."
What is the primary purpose of password salting?,"The primary purpose of password salting is to reduce the effectiveness of **offline attacks** that rely on pre-computed hashes, such as those using **rainbow tables**. By adding a unique, random **salt** to each password before hashing, it ensures that identical passwords produce different hash values, making large-scale cracking much more difficult."
Can an attacker log in as a victim if they obtain their hashed password?,"No, an attacker cannot log in as a victim simply by obtaining their hashed password. The application requires the original plaintext password to hash it and compare it with the stored hash. The attacker would first need to ""crack"" the hash to discover the original plaintext password."
"What is an ""offline attack"" in the context of password security?","An **offline attack** in the context of password security refers to an attack where an adversary obtains a database of hashed passwords and attempts to crack them without directly interacting with the authentication system. This allows them to try a vast number of password guesses without fear of account lockout or detection, often using pre-computed hashes or **brute-force** methods."
How does the illustration on page 1 demonstrate password salting?,"The illustration on page 1 demonstrates password salting by showing an initial password ""hello"" being processed. A step labeled ""add salt"" combines ""hello"" with a salt to form ""hello3ab9"". This combined string then goes through a ""hash function"" to produce a final hash ""39e19b234..."", which is then stored along with the salt."
"What does ""pre-computed hashes"" refer to in password cracking?","""Pre-computed hashes"" refers to a collection of hash values that an attacker has calculated in advance for a large number of common or likely passwords. These are used in **offline attacks** to quickly compare against stolen password hashes without needing to compute each hash in real-time during the attack. **Rainbow tables** are an example of pre-computed hashes."
What is the main challenge for an attacker when dealing with salted passwords?,"The main challenge for an attacker when dealing with salted passwords is that each password has its own unique **salt**. This means that the attacker cannot use a single pre-computed table or a single hash calculation to crack multiple passwords. Instead, they must perform a separate cracking attempt for each individual password, incorporating its specific salt, which drastically increases the computational cost and time."
Why is it important for hash algorithms to be resource-intensive for password storage?,"It is important for **hash algorithms** to be resource-intensive for password storage because this slows down **offline attacks**. By requiring more computational power and time to generate each hash, resource-intensive algorithms make it significantly more expensive and time-consuming for attackers to perform **brute-force** or dictionary attacks on stolen password hashes."
"What is the purpose of the ""hash function"" step in password salting?","The purpose of the ""hash function"" step in password salting is to transform the combined password and **salt** into a fixed-size, irreversible string of characters, known as a **hash value**. This hash value is what gets stored, rather than the original password, ensuring that the plaintext password is never directly exposed."
How do modern hashing algorithms simplify the salting process for developers?,"Modern **hashing algorithms** such as Argon2id, bcrypt, and PBKDF2 simplify the salting process for developers by automatically incorporating **salting** into their design. This means that no additional steps are required from the developer to generate and manage salts; the algorithm handles it internally, ensuring that best practices are followed by default."
What is the primary security benefit of hashing passwords?,"The primary security benefit of **hashing** passwords is that it allows for password validation without ever storing or handling the original plaintext password. Since hashing is a **one-way function**, even if the stored hashes are **compromised**, the original passwords cannot be directly retrieved, protecting user credentials."
Explain why an attacker cannot use a dictionary attack effectively against properly salted passwords.,"An attacker cannot use a dictionary attack effectively against properly salted passwords because each password has a unique **salt**. A dictionary attack involves hashing common words and comparing them to stored hashes. With salting, even if a dictionary word matches a user's password, its hash will be different for each user due to the unique salt, rendering pre-computed dictionary hashes useless and forcing the attacker to compute a new hash for every dictionary word combined with every unique salt."
"What does ""compromised"" mean in the context of an application or database storing passwords?","In the context of an application or database storing passwords, ""compromised"" means that an unauthorized entity, typically an attacker, has gained access to the system or its data. This could involve gaining access to the database where password hashes are stored, even if the application itself is not fully under their control."
How does salting contribute to the overall goal of keeping sensitive data safe?,"Salting contributes to the overall goal of keeping sensitive data safe by significantly enhancing the security of stored passwords. By making **offline attacks** and the use of **rainbow tables** much less effective, salting ensures that even if an attacker obtains password hashes, the effort and resources required to crack them become prohibitively high, thus protecting user accounts."
"What is the significance of ""each password has its own salt""?","The significance of ""each password has its own **salt**"" is crucial for security. It means that even if two users choose the exact same password, their stored hashes will be different because they will be combined with different, unique salts. This prevents attackers from identifying common passwords or using a single pre-computed hash to crack multiple accounts."
"If an attacker has high-speed hardware, does it make cracking salted passwords easy?","While high-speed hardware like GPUs can reduce the cost and time for cracking, it does not make cracking properly salted passwords easy. Because each password has a unique **salt**, the attacker still needs to perform individual cracking attempts for each user, incorporating their specific salt. This means the attacker cannot leverage the hardware as efficiently for large-scale pre-computation or rainbow table attacks, making it significantly harder than cracking unsalted hashes."
What is the primary difference in outcome between hashing and encryption if an attacker gains access to the stored data?,"The primary difference in outcome between **hashing** and **encryption** if an attacker gains access to the stored data is that with hashing, the original plaintext password cannot be retrieved, only potentially ""cracked"" through guessing. With encryption, if the attacker also obtains the **encryption key**, they can directly retrieve the original plaintext password, leading to a complete compromise."
Why is it important to select a modern hashing algorithm?,"It is important to select a modern **hashing algorithm** because these algorithms are designed with current security best practices in mind, such as automatically incorporating **salting** and being computationally intensive. Older algorithms may be vulnerable to faster cracking methods or lack built-in protections, making them less secure against contemporary threats."
"What is the role of the ""store hash and salt"" step in the salting process?","The ""store hash and salt"" step in the salting process is where the final **hash value** (derived from the password and its unique **salt**) and the salt itself are saved in the database. Storing the salt alongside the hash is essential because it is needed to re-apply the salting and hashing process during subsequent password verification attempts."
How does salting protect against database-based lookups for cracking passwords?,"Salting protects against database-based lookups for cracking passwords by ensuring that each password, even if identical, produces a unique hash due to its unique **salt**. This prevents an attacker from building a simple lookup table of common passwords and their hashes to quickly identify matches within a stolen database, as each entry would require a specific salt to be considered."
Can an attacker determine if two different users have the same password if salting is used?,"No, an attacker cannot determine if two different users have the same password if **salting** is used. Because each user's password is combined with a unique **salt** before hashing, even identical plaintext passwords will result in completely different hash values. This makes it impossible to infer password commonality by simply comparing stored hashes."
What are the implications of not following best practices for hashing?,"Not following best practices for **hashing**, such as not using **salting** or choosing a weak/outdated **hashing algorithm**, makes password cracking significantly easier and cheaper for attackers. This increases the risk of successful **offline attacks**, allowing attackers to quickly discover plaintext passwords and **compromise** user accounts, even with high-speed hardware."
"What is the overall goal of the ""Password Storage Cheat Sheet""?","The overall goal of the ""Password Storage Cheat Sheet"" is to provide essential guidelines and concepts for securely storing passwords. It emphasizes the importance of preventing password compromise, slowing down **offline attacks** through resource-intensive **hashing algorithms**, and utilizing techniques like **salting** to enhance security against various cracking methods."
