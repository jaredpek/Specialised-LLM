input,output
Compare the security benefits of using a unique salt for each user's password versus using a common or no salt.,"A salt is a unique, randomly generated string added to each password during hashing. When a salt is unique for every user, an attacker must crack hashes one at a time using the respective salt, rather than calculating a hash once and comparing it against every stored hash. This significantly increases the time and effort required to crack large numbers of hashes, as the time grows in direct proportion to the number of hashes. Without unique salts, an attacker could pre-compute hashes or use rainbow tables more effectively, making cracking much easier."
What are the differences in attack resistance when passwords are salted compared to when they are not?,"When passwords are 'salted,' a unique, randomly generated string is added to each password during the hashing process. This protects against an attacker pre-computing hashes using 'rainbow tables' or database-based lookups. It also makes it impossible to determine if two users have the same password without cracking the hashes, as different salts will result in different hashes even if the passwords are identical. If passwords are not salted, these protections are absent, making them vulnerable to pre-computation attacks and allowing an attacker to easily identify users with duplicate passwords."
Compare the effort required for an attacker to crack a large number of salted hashes versus unsalted hashes.,"When hashes are 'salted,' a unique, randomly generated string is added to each password during hashing. Because the salt is unique for every user, an attacker has to crack hashes one at a time using the respective salt. This means the time required to crack large numbers of hashes grows in direct proportion to the number of hashes, making it significantly harder. For unsalted hashes, an attacker could potentially calculate a hash once and compare it against every stored hash, drastically reducing the effort for large-scale cracking."
What is the role of salting in protecting against rainbow tables compared to its role in preventing the identification of duplicate passwords?,"Salting protects against 'rainbow tables' by preventing an attacker from pre-computing hashes. A 'salt' is a unique, randomly generated string added to each password during hashing, ensuring that even identical passwords produce different hashes when combined with different salts. This same mechanism also makes it impossible to determine whether two users have the same password without cracking the hashes, as the different salts will result in different hashes even if the passwords are the same. Both protections stem from the uniqueness of the salted hash."
Compare how modern hashing algorithms handle salting versus older hashing methods (implied).,"Modern hashing algorithms, such as Argon2id, bcrypt, and PBKDF2, automatically salt passwords. This means no additional steps are required by the developer or system administrator to incorporate salting, ensuring that a unique, randomly generated string is added to each password as part of the hashing process. Older hashing methods often required manual implementation of salting, or did not incorporate it at all, leaving passwords more vulnerable to various attacks."
Compare modern password hashing algorithms with cryptographic hashes like the SHA family or KECCAK.,"Modern password hashing algorithms, such as Argon2id, bcrypt, and PBKDF2, are specifically designed for securely storing passwords and are intentionally slow. Their slowness can be configured by changing a 'work factor.' In contrast, cryptographic hashes like the SHA family and KECCAK are designed to be fast, which makes them unsuitable for secure password storage as it allows attackers to test many more password guesses per second."
What are the differences between Argon2 and bcrypt for password storage?,"Argon2 is the winner of the 2015 Password Hashing Competition and is considered the primary choice for password storage. bcrypt is a password hashing function that should be the second choice for password storage if Argon2 is not available. Both are modern hashing algorithms designed to be slow and secure for password storage, and they automatically salt passwords."
Compare the design philosophy of password hashing algorithms with that of general-purpose cryptographic hashes.,"Password hashing algorithms are specifically designed to be slow, making brute-force attacks computationally expensive. Their slowness is configurable via a 'work factor.' They also automatically incorporate 'salting,' where a unique, randomly generated string is added to each password during hashing. General-purpose cryptographic hashes, such as the SHA family and KECCAK, are designed to be fast for efficiency in various cryptographic applications, which makes them unsuitable for direct password storage due to their speed."
Compare the role of the 'work factor' in modern password hashing algorithms with its absence in fast cryptographic hashes.,"The 'work factor' in modern password hashing algorithms, such as Argon2id, bcrypt, and PBKDF2, allows the slowness of the hashing process to be configured. This intentional slowness makes it significantly harder for attackers to perform brute-force attacks. Fast cryptographic hashes, like the SHA family and KECCAK, are designed for speed and do not incorporate a configurable work factor, as their primary purpose is not to deter password guessing but to provide quick cryptographic integrity checks."
"What are the advantages of using Argon2id, bcrypt, or PBKDF2 for password storage compared to older, less secure methods?","Argon2id, bcrypt, and PBKDF2 are modern hashing algorithms specifically designed for securely storing passwords. They are intentionally slow, which deters brute-force attacks, and their slowness can be adjusted via a 'work factor.' Crucially, they automatically 'salt' passwords, adding a unique, randomly generated string to each password during hashing. This protects against pre-computation attacks like rainbow tables and prevents identifying duplicate passwords. Older, less secure methods often lack these features, making them more vulnerable to various cracking techniques."
"Compare the effectiveness of forcing users to use long, complex, system-generated, and frequently changed passwords against the practical challenges this creates.","Forcing users to use long passwords, mixing upper and lower case characters and numerical symbols, generated by the system, and changed repeatedly, aims for high security. However, users may have difficulty memorizing complex passwords, dealing with frequent password changes, and may find ways of re-using their favorite password. These practical challenges can lead to users writing down passwords, which compromises security."
Compare the security implications of writing down passwords versus memorizing them.,"Writing down passwords, especially on a piece of paper kept close to the computer, is generally considered a bad idea because it creates a physical vulnerability. If an attacker gains physical access to the location, they can easily obtain the password. Memorizing passwords, while potentially difficult for complex ones, avoids this physical vulnerability, keeping the password secure as long as the user's memory is not compromised."
"Compare the security risk of having no password for a user account versus having a password, even a simple one.","If there is no password for a user account, an attacker does not even have to guess it, gaining immediate and unrestricted access. This represents the highest level of vulnerability. Having a password, even if simple, forces an attacker to at least attempt to guess or crack it, providing a basic, albeit potentially weak, barrier to unauthorized access."
What are the differences in security between changing default passwords and leaving them as their factory settings?,"Default passwords often have common, easily guessable values like ""manager."" While they assist field engineers during system installation, leaving them unchanged makes it easy for an attacker to break in, as these default values are widely known. Changing default passwords immediately removes this common vulnerability, significantly enhancing the system's security posture."
Compare the security of a password that adheres to a minimal length and complex format versus one that does not.,"A password that adheres to a minimal 'password length' and a specific 'password format' (mixing upper and lower case, 'case-sensitive,' including numerical and other 'non-alphabetical symbols' or 'alphanumeric' characters) is significantly more secure. This complexity makes it harder for attackers to guess or brute-force. Passwords that do not meet these criteria, such as short, simple, or purely alphabetical ones, are much easier to compromise, especially with the existence of online dictionaries for almost every language."
Compare the effectiveness of password ageing policies with policies that allow passwords to be used indefinitely.,"Password ageing policies set expiry dates for passwords, forcing users to change them regularly. This practice aims to reduce the window of opportunity for a compromised password to be exploited. Policies that allow passwords to be used indefinitely do not enforce regular changes, meaning a compromised password could remain valid and exploitable for an extended period, increasing the risk of unauthorized access."
What are the differences in security between preventing users from reverting to old passwords and allowing them to reuse previous passwords?,"Preventing users from reverting to old passwords, for example, by keeping a list of the last ""ten"" passwords used, enhances security. This stops users from cycling through a small set of familiar passwords, which an attacker might already know or could easily guess if one of them was previously compromised. Allowing users to reuse old passwords negates the security benefits of regular password changes, as an attacker could simply re-use a previously compromised password."
Compare the security implications of limiting login attempts versus allowing unlimited attempts.,"Limiting login attempts means the system monitors unsuccessful login attempts and can react by locking the user account (either completely or for a given time interval). This prevents or discourages brute-force attacks, where an attacker repeatedly tries different passwords. Allowing unlimited login attempts provides an attacker with an infinite number of guesses, making brute-force attacks highly feasible and increasing the likelihood of a successful compromise."
Compare the user's awareness of security threats when informed about recent login activity versus not being informed.,"When a user is informed about recent login activity, such as the time of the last successful login and the number of failed login attempts since, it serves as a warning about recently attempted attacks. This awareness allows the user to take action if suspicious activity is detected. If the user is not informed, they remain unaware of potential compromises or ongoing attacks, leaving them vulnerable and unable to react proactively."
Compare the security of a system that requires users to set a password versus one that allows accounts without passwords.,"A system that requires users to set a password ensures a basic level of security, as an attacker must at least attempt to guess or crack the password to gain access. Conversely, a system that allows accounts without passwords presents a severe security vulnerability, as an attacker does not even have to guess, gaining immediate access to the user account."
"Compare passphrases with traditional, shorter passwords in terms of memorability and security.","A 'passphrase' involves users entering sentences or long phrases that are generally easier to remember than complex, shorter passwords. The system applies a hash function to compute the fixed-size actual passwords from these passphrases. While traditional short passwords often rely on complexity (mix of characters), passphrases leverage length and natural language for both memorability and enhanced security against brute-force attacks due to their extended length."
What are the differences between visual drawing patterns and text-based passwords as authentication methods?,"'Visual drawing patterns' are an alternative form of password used primarily on touch interfaces, such as in Android, where a user authenticates by drawing a specific pattern. 'Text-based passwords,' in contrast, require the user to input a sequence of alphanumeric and special characters using a keyboard. Visual drawing patterns offer a different interaction method, potentially appealing to users on touch devices."
Compare picture passwords with traditional text-based passwords.,"'Picture passwords' are an alternative authentication method where users select objects in pictures and patterns, as seen in Windows 8. This method relies on visual recognition and spatial memory. Traditional 'text-based passwords,' however, require users to type a sequence of characters, relying on alphanumeric and symbolic input. Picture passwords offer a non-textual approach to authentication."
What are the key differences between one-time passwords and persistent passwords?,"'One-time passwords' are unique passwords that are valid for only a single login session or transaction. Once used, they cannot be reused. 'Persistent passwords,' on the other hand, are designed to be used repeatedly for multiple login sessions until they are explicitly changed by the user or expire according to a policy. One-time passwords offer enhanced security by mitigating risks associated with password reuse and replay attacks."
Compare the user interaction for visual drawing patterns versus picture passwords.,"'Visual drawing patterns' involve the user drawing a specific pattern on a touch interface, commonly found in systems like Android. 'Picture passwords,' as used in Windows 8, require the user to select specific objects within a given picture or pattern. Both are alternative forms of password that move beyond traditional text input, but they differ in the type of interaction required from the user."
Compare cryptographic protection with access control as methods for securing the password file.,"'Cryptographic protection' involves encrypting the password file, rendering its contents unreadable without the correct decryption key. This protects the confidentiality of the stored passwords even if an attacker gains access to the file. 'Access control,' enforced by the operating system, restricts which users or processes can read, write, or modify the password file. While cryptographic protection focuses on data confidentiality, access control focuses on preventing unauthorized access to the file itself."
What are the advantages of combining cryptographic protection and access control for the password file compared to using only one method?,"Combining 'cryptographic protection' (encrypting the password file) and 'access control' (restricting system access to the file) provides a more robust and layered defense for the password file. Cryptographic protection ensures confidentiality even if access control is bypassed, while access control prevents unauthorized access in the first place. This combination, possibly with further measures to slow down dictionary attacks, offers superior protection against compromise of confidentiality or integrity compared to relying on a single method."
Compare the primary goal of cryptographic protection for a password file with that of access control.,"The primary goal of 'cryptographic protection' for a password file is to ensure the confidentiality of the stored user names and passwords. By encrypting the file, its contents become unreadable to unauthorized parties, even if they gain access to the file itself. The primary goal of 'access control,' enforced by the operating system, is to restrict unauthorized access to the password file, thereby protecting its confidentiality and integrity by controlling who can read or modify it."
Compare the impact of a successful attack on a password file protected only by access control versus one protected by both access control and cryptographic protection.,"If a password file is protected only by 'access control' and an attacker manages to bypass these operating system-enforced restrictions, the contents of the file (user names and passwords/hashes) would be directly exposed. If the file is protected by both 'access control' and 'cryptographic protection,' even if an attacker bypasses access control and gains the file, the contents would still be encrypted. This means the attacker would then need to crack the encryption, adding another significant barrier to compromising the confidentiality of the passwords."
What are the differences in how measures to slow down dictionary attacks are implemented for password files compared to general file access controls?,"Measures to slow down 'dictionary attacks' are specific techniques applied to the password file, often in conjunction with cryptographic protection and access control, to make it computationally expensive for an attacker to guess passwords using a dictionary. This might involve intentionally slow hashing algorithms or rate limiting. General 'access controls,' enforced by the operating system, regulate who can read, write, or execute the password file itself, without directly influencing the speed of password guessing attempts once the file is accessed."
Compare the security implications of a password being 'case-sensitive' versus 'case-insensitive'.,"A 'case-sensitive' password means that 'Password123' is treated differently from 'password123'. This effectively increases the character set available for passwords, making them more complex and harder to guess or brute-force. A 'case-insensitive' password treats upper and lower case letters as the same, reducing the effective character set and making the password inherently less secure and easier to compromise."
What are the differences between 'alphanumeric' symbols and other non-alphabetical symbols in password formats?,"'Alphanumeric' symbols refer to characters that are either letters (alphabetical) or numbers (numerical). A password format that requires 'alphanumeric' characters would include 'a-z', 'A-Z', and '0-9'. 'Other non-alphabetical symbols' refer to special characters such as `!@#$%^&*()_+-=[]{}|;:'\"",.<>/?`. Including these non-alphanumeric symbols significantly increases the complexity and entropy of a password, making it much harder to guess or crack."
"Compare the security risk of using a password found in an 'on-line dictionary' versus a unique, complex password.","Using a password found in an 'on-line dictionary' carries a high security risk because attackers frequently use these dictionaries in 'dictionary attacks' to guess passwords. Since such dictionaries exist for almost every language, these passwords are easily compromised. A unique, complex password, especially one that includes a mix of upper and lower case, numerical, and non-alphabetical symbols, is far more secure as it is unlikely to be found in a dictionary and is much harder to brute-force."
"Compare the security of a password that is a 'favourite password' reused by a user versus a newly generated, unique password.","A 'favourite password' that a user re-uses across multiple accounts or over time poses a significant security risk. If this password is compromised in one instance, all other accounts using it become vulnerable. A newly generated, unique password, especially one that adheres to strong format requirements, provides much higher security as its compromise would be isolated to a single instance and it would be harder for an attacker to guess or crack."
What are the differences between a 'password length' policy and a 'password format' policy?,"A 'password length' policy prescribes a minimal number of characters a password must contain, focusing solely on the length of the password. A 'password format' policy dictates the types of characters that must be included, such as mixing upper and lower case (case-sensitive), numerical, and other non-alphabetical symbols (alphanumeric). Both policies aim to increase password strength, but length focuses on quantity, while format focuses on character diversity."
Compare the security implications of a fast hashing process versus a slow hashing process for password storage.,"A fast hashing process, like those used for general cryptographic hashes (e.g., SHA family, KECCAK), allows an attacker to compute and test a large number of password guesses very quickly, making brute-force attacks efficient. A slow hashing process, characteristic of modern password hashing algorithms (e.g., Argon2id, bcrypt, PBKDF2), is specifically designed to make each hashing operation computationally expensive. This intentional slowness significantly increases the time and resources an attacker needs to crack passwords, thereby enhancing security."
Compare the security of a password generated by the system versus one chosen by the user.,"A password generated by the system, especially one designed to be long, complex, and include a mix of character types, is generally more secure as it is less predictable and less susceptible to dictionary or common password attacks. A password chosen by the user, while potentially easier to remember, often falls into patterns, uses personal information, or is a 'favourite password,' making it more vulnerable to guessing or dictionary attacks."
What are the differences between protecting the confidentiality of a password file and protecting its integrity?,"Protecting the 'confidentiality' of a password file means ensuring that its contents (user names and passwords/hashes) cannot be read or disclosed to unauthorized individuals. This is often achieved through 'cryptographic protection.' Protecting the 'integrity' of a password file means ensuring that its contents have not been tampered with or altered by unauthorized individuals. While the document primarily discusses confidentiality, 'access control' enforced by the operating system helps protect both by preventing unauthorized modifications."
Compare the security of a system that prevents password re-use with one that does not.,"A system that prevents users from reverting to old passwords, for example, by keeping a list of the last ""ten"" passwords used, significantly enhances security. This policy ensures that even if an old password was compromised, it cannot be easily re-used, forcing users to create new, hopefully stronger, unique passwords. A system that does not prevent password re-use allows users to cycle through a limited set of passwords, making it easier for an attacker to compromise accounts if any of those passwords have been previously exposed."
Compare the security risk of default passwords with that of user-chosen passwords.,"Default passwords, such as ""manager,"" are often widely known and are primarily for system installation by field engineers. If left unchanged, they pose a critical security risk as attackers can easily exploit them. User-chosen passwords, while they can sometimes be weak or guessable, at least require an attacker to attempt to discover them, unlike default passwords which are publicly known vulnerabilities if not changed."
Compare the security benefit of salting against pre-computing hashes using rainbow tables versus database-based lookups.,"Salting protects against both 'rainbow tables' and 'database-based lookups' by adding a unique, randomly generated string to each password during hashing. This prevents an attacker from pre-computing a large table of hashes (a rainbow table) and then using it to quickly find passwords for many users. Similarly, it prevents an attacker from building a database of common password-hash pairs and using it for lookups, as each user's hash will be unique due to their individual salt, even if they share the same password."
What are the differences between the security provided by a minimal password length policy and a policy requiring alphanumeric characters?,"A 'minimal password length' policy dictates the minimum number of characters a password must contain, increasing the total possible combinations. A policy requiring 'alphanumeric' characters specifies that the password must include a mix of letters (a-z, A-Z) and numbers (0-9). While both contribute to password strength, length increases the search space linearly, whereas requiring alphanumeric characters (and case-sensitivity) increases the character set, exponentially increasing the search space for an attacker."
Compare the impact of a 'work factor' on the computational cost for legitimate users versus attackers.,"The 'work factor' in modern password hashing algorithms is designed to make the hashing process intentionally slow. For legitimate users, this slowness is typically negligible as it only occurs once during login. However, for an attacker attempting to crack many passwords through brute-force or dictionary attacks, the 'work factor' significantly increases the computational cost for each guess, making large-scale attacks prohibitively expensive and time-consuming, thus disproportionately impacting attackers."
Compare the security implications of a system that locks user accounts after failed login attempts versus one that only temporarily locks them.,"A system that 'limits login attempts' and locks the user account completely after a certain number of unsuccessful attempts provides a strong deterrent against brute-force attacks, as the account becomes unusable for the attacker. A system that only temporarily locks the account (for a given time interval) still discourages immediate further attempts but allows the attacker to resume after the interval, potentially prolonging the attack. Both are better than no limits, but a complete lock offers higher immediate security."
What are the differences between a 'passphrase' and a 'picture password' as alternative authentication forms?,"A 'passphrase' involves the user entering sentences or long phrases that are easy to remember, which are then hashed to compute the actual password. This is a text-based, albeit extended, form of input. A 'picture password,' used in Windows 8, requires the user to select objects in pictures and patterns, making it a visual and non-textual authentication method. They differ fundamentally in their input modality and user interaction."
"Compare the security of a password that is 'case-sensitive' versus one that is not, in the context of password format.","A 'case-sensitive' password format means that the distinction between uppercase and lowercase letters is recognized (e.g., 'Password' is different from 'password'). This effectively increases the pool of possible characters, making the password more complex and harder for an attacker to guess or brute-force. If a password is not case-sensitive, the attacker has fewer character variations to consider, which reduces the password's strength and makes it easier to compromise."
Compare the purpose of 'password ageing' with the policy of preventing users from reverting to old passwords.,"'Password ageing' sets expiry dates for passwords to force users to change them regularly, aiming to limit the lifespan of a potentially compromised password. The policy of preventing users from reverting to old passwords (e.g., keeping a list of the last ""ten"" used) ensures that when a user does change their password due to ageing or other reasons, they cannot simply reuse a previously known or compromised password. Both policies work together to enhance security by promoting fresh, unique passwords."
What are the differences between 'visual drawing patterns' and 'one-time passwords' as alternative forms of authentication?,"'Visual drawing patterns' are a persistent authentication method used on touch interfaces (e.g., Android) where a user draws a specific pattern to log in. This pattern remains the same until the user changes it. 'One-time passwords,' in contrast, are unique passwords valid for only a single login session or transaction. They are ephemeral and provide security by ensuring that a captured password cannot be reused. They differ in their persistence and how they are generated/used."
Compare the security implications of a system that displays the time of last login versus one that only displays the number of failed login attempts.,"A system that displays the time of last login after a successful login provides the user with information to detect if their account has been accessed by an unauthorized party. If the last login time is unfamiliar, it's a strong indicator of compromise. Displaying only the number of failed login attempts since the last successful login warns the user about brute-force attempts or guessing, but doesn't confirm if an actual breach of access has occurred. Both are valuable, but the last login time offers direct evidence of unauthorized access."
Compare the security of a password file protected by operating system 'access control' versus one that is not.,"A password file protected by operating system 'access control' has restrictions enforced by the OS on who can read, write, or execute the file. This prevents unauthorized users or processes from directly accessing or tampering with the sensitive user names and passwords/hashes. A password file without such access control would be vulnerable to any user or process with sufficient privileges on the system, making it extremely easy for an attacker to compromise its confidentiality and integrity."
Compare the security provided by Argon2id with PBKDF2 as modern password hashing algorithms.,"Argon2id and PBKDF2 are both examples of modern hashing algorithms specifically designed for securely storing passwords. They are engineered to be slow, with configurable slowness via a 'work factor,' and automatically salt passwords. While the document highlights Argon2 as the winner of the 2015 Password Hashing Competition and bcrypt as the second choice, PBKDF2 is also listed as a modern hashing algorithm that automatically salts passwords, indicating its suitability for secure password storage alongside Argon2id and bcrypt."
What are the differences between the security provided by a password format requiring numerical symbols versus one requiring non-alphabetical symbols?,"A password format requiring 'numerical symbols' mandates the inclusion of digits (0-9). A format requiring 'non-alphabetical symbols' mandates the inclusion of characters that are not letters, which can include numerical symbols but also extends to special characters like `!@#$%^&*()`. Requiring non-alphabetical symbols generally leads to a more diverse and complex password character set than just numerical symbols, thereby increasing its strength against guessing and brute-force attacks."
Compare the security risk of a password that is easy to memorize versus one that is difficult to memorize but highly complex.,"A password that is easy to memorize, such as a 'passphrase' (sentences or long phrases), can be secure due to its length, but if it's too simple or predictable, it might be vulnerable. A password that is difficult to memorize but highly complex (e.g., mixing upper/lower case, numerical, and non-alphabetical symbols) is inherently stronger against automated attacks. However, the difficulty in memorization can lead users to write it down, creating a physical security vulnerability. The ideal balance involves length and complexity that is still manageable for the user."
Compare the security implications of a system that allows re-using a 'favourite password' versus one that forces unique passwords.,"A system that allows users to re-use their 'favourite password' across different accounts or over time significantly increases the risk of multiple account compromises if that single password is breached. An attacker only needs to discover one instance of the password to potentially gain access to many services. A system that forces unique passwords for each account and prevents re-use of old passwords ensures that a compromise of one password does not automatically jeopardize other accounts, thereby enhancing overall security."
