input,output
What is a vulnerability in the context of software security?,"A **vulnerability** is defined as a weakness within a system that allows an attacker to reduce the system's information assurance. **Information assurance** refers to the measures taken to protect and defend information and information systems by ensuring their availability, integrity, authentication, confidentiality, and non-repudiation."
Define an exploit in software security.,"An **exploit** is a technique that takes advantage of a vulnerability in a software system. It is used by an attacker to attack the system, leveraging the identified weakness to achieve a malicious objective."
What is a payload in the context of a software attack?,"A **payload** is a custom code that an attacker wants a target system to execute. This code is typically delivered as part of an exploit, and its execution allows the attacker to achieve their desired malicious outcome, such as gaining control or exfiltrating data."
What are the primary categories of vulnerabilities related to memory safety violations?,"The primary categories of vulnerabilities related to **memory safety violations** include buffer overflows and over-reads, as well as dangling pointers. A **buffer overflow** occurs when a program attempts to write data beyond the boundaries of a fixed-size buffer, potentially overwriting adjacent memory. An **over-read** is similar but involves reading beyond the buffer's boundaries. A **dangling pointer** is a pointer that does not point to a valid object of the appropriate type, often because the object it pointed to has been deallocated or moved."
List the types of input validation errors that can lead to vulnerabilities.,"Input validation errors that can lead to vulnerabilities include format string attacks, SQL injection, code injection, and cross-site scripting (XSS) in web applications. **Input validation** is the proper testing of any input supplied by a user or another program to an application. When this validation is insufficient, attackers can craft malicious inputs to manipulate the application's behavior."
Explain what race conditions are as a type of vulnerability.,"**Race conditions** are a type of vulnerability that occurs when the timing or ordering of events affects the correctness of a program. Specific examples include time-of-check-to-time-of-use (TOCTOU) bugs and symlink races. A **TOCTOU bug** happens when a program checks the state of a system resource (time-of-check) and then uses that resource (time-of-use), but the state of the resource changes between the check and the use, leading to unexpected behavior or security flaws. A **symlink race** involves an attacker creating a symbolic link to a sensitive file, hoping that a privileged program will follow the link and perform an operation on the attacker's chosen file instead of the intended one."
What are privilege-confusion bugs?,"**Privilege-confusion bugs** are a category of vulnerabilities where a program or system performs an action with higher privileges than intended, often due to confusion about the user's or process's actual permissions. Examples include cross-site request forgery (CSRF) in web applications, clickjacking, and FTP bounce attacks. **CSRF** is an attack that forces an end-user to execute unwanted actions on a web application in which they're currently authenticated. **Clickjacking** is a technique that tricks users into clicking on something different from what they perceive, often by overlaying a malicious interface over a legitimate one. An **FTP bounce attack** exploits the PORT command in FTP to scan ports or relay data to arbitrary hosts, potentially bypassing firewalls."
What is privilege escalation in software security?,"**Privilege escalation** is a type of vulnerability where an attacker gains elevated access rights or permissions beyond what they are authorized for. This allows them to perform actions that would normally be restricted to users or processes with higher security clearances, such as an administrator or root user."
Describe a side-channel attack.,"A **side-channel attack** is a type of attack that exploits information gained from the physical implementation of a computer system, rather than directly attacking the algorithm or its theoretical weaknesses. A common example is a timing attack, where an attacker analyzes the time taken to execute cryptographic algorithms or other operations to infer secret information. **Timing attacks** leverage variations in the execution time of operations to deduce sensitive data, such as cryptographic keys."
What is malware?,"**Malware** is a broad term for malicious software designed to disrupt, damage, or gain unauthorized access to a computer system. It encompasses various types of harmful programs, each with distinct characteristics and objectives."
What is a backdoor in the context of malware?,"A **backdoor** is a type of malware that allows a remote party to gain unauthorized access to a computer system, bypassing normal authentication or security controls. It essentially creates a secret entry point for the attacker."
What is Adware?,"**Adware** is a type of malware designed to display unwanted advertisements to the user. These advertisements can appear in various forms, such as pop-ups, banners, or in-text ads, often disrupting the user experience and potentially leading to other malicious content."
Define Ransomware.,"**Ransomware** is a type of malware that blocks a user's data or access to their computer system until a ransom is paid. It typically encrypts files or locks the system, demanding payment (often in cryptocurrency) for decryption or restoration of access."
What is Spyware?,"**Spyware** is a type of malware designed to gather information about the user and their activities without their knowledge or consent. This collected information is then sent to an attacker, potentially including sensitive data like browsing history, keystrokes, or personal files."
What is Crimeware?,"**Crimeware** is a type of malware specifically designed to automate cybercrime. It is developed to facilitate various illegal activities, such as financial fraud, identity theft, or data exfiltration, by providing tools and functionalities to attackers."
How do Worms propagate?,"**Worms** are a type of malware that propagate to different computers without user intervention. They are self-replicating and can spread across networks by exploiting vulnerabilities in operating systems or applications, often without needing to attach to a host program."
What is a Virus in the context of malware?,"A **virus** is a type of malware that propagates to different computers, but it needs to be triggered by a user. Unlike worms, viruses typically attach themselves to legitimate programs or documents and require user action (like opening an infected file) to execute and spread."
What are Trojans?,"**Trojans**, or Trojan horses, are a type of malware that pretend to do something useful while masking malicious behaviors. They deceive users into installing them by appearing as legitimate software, but once executed, they perform harmful actions in the background without the user's knowledge."
What is a Rootkit?,"A **rootkit** is a type of malware designed to obtain root privileges (or administrative access) to compromise a computer. It allows an attacker to maintain persistent, stealthy access to a computer while hiding its presence from the operating system and other security tools."
What are the human factors contributing to software vulnerabilities?,"The human factors contributing to software vulnerabilities include the fact that programs are developed by humans, and humans inherently make mistakes. Additionally, programmers may not always be security-aware, leading to oversights in secure coding practices. Finally, misconfigurations, often due to human error, can create opportunities for software vulnerabilities to be exploited."
How do programming language characteristics contribute to software vulnerabilities?,"Programming language characteristics contribute to software vulnerabilities when some languages are not designed well for security. This is mainly due to more flexible handling of pointers/references, a lack of strong typing, and manual memory management. These features can make it easier for programmers to make mistakes that introduce vulnerabilities, such as buffer overflows or dangling pointers, because they offer less built-in protection against common errors."
What is the 'Code' segment in the memory layout of an x86 program?,"The 'Code' segment in the memory layout of an x86 program contains the program's executable instructions. It is typically of a fixed size and is designated as read-only, meaning its contents cannot be modified during program execution, which helps prevent certain types of attacks."
Describe the 'Static data' segment in an x86 program's memory layout.,"The 'Static data' segment in an x86 program's memory layout holds statically allocated data. This includes global variables, static variables, and constants that are allocated at compile time and persist throughout the program's execution. Unlike stack or heap data, its size is fixed before runtime."
What is the purpose of the 'Stack' in an x86 program's memory layout?,"The 'Stack' in an x86 program's memory layout is used to store parameters and local variables of methods as they are invoked. Each invocation of a method creates a new frame, which is pushed onto the stack. The stack grows towards lower memory addresses, meaning new frames are added at numerically smaller addresses."
How does the 'Heap' function in an x86 program's memory layout?,"The 'Heap' in an x86 program's memory layout is used for dynamically allocated data, such as class instances and data arrays. Memory on the heap is allocated and deallocated during program execution as needed. Unlike the stack, the heap grows towards higher memory addresses, meaning new allocations are made at numerically larger addresses."
What is a buffer overflow?,"A **buffer overflow** is a type of memory safety violation where a program attempts to write data beyond the allocated boundaries of a fixed-size buffer. This can overwrite adjacent memory locations, potentially corrupting data, altering program control flow, or leading to system crashes, and is a common vector for exploits."
What is a dangling pointer?,"A **dangling pointer** is a memory safety vulnerability where a pointer still holds the memory address of a deallocated or freed object. If the program attempts to dereference this pointer, it can lead to undefined behavior, crashes, or security vulnerabilities if the memory has been reallocated for another purpose."
What is a format string attack?,"A **format string attack** is an input validation error vulnerability that occurs when an attacker provides malicious input to a function that uses a format string (like `printf` in C) without proper validation. This can allow the attacker to read from or write to arbitrary memory locations, potentially leading to information disclosure or arbitrary code execution."
How does SQL injection work as a vulnerability?,"**SQL injection** is an input validation error vulnerability where an attacker inserts or ""injects"" malicious SQL code into an input field, which is then executed by the database. This can allow the attacker to bypass authentication, retrieve sensitive data, modify database content, or even execute arbitrary commands on the database server."
What is code injection?,"**Code injection** is a general term for an input validation error vulnerability where an attacker can introduce and execute their own code within a target application. This can occur when an application processes untrusted input as part of a command or script, leading to arbitrary code execution and full compromise of the system."
What is cross-site scripting (XSS) in web applications?,"**Cross-site scripting (XSS)** is an input validation error vulnerability commonly found in web applications. It allows attackers to inject client-side scripts (typically JavaScript) into web pages viewed by other users. When a user's browser executes these malicious scripts, the attacker can bypass access controls, steal session cookies, deface websites, or redirect users to malicious sites."
What is a time-of-check-to-time-of-use (TOCTOU) bug?,"A **time-of-check-to-time-of-use (TOCTOU) bug** is a race condition vulnerability that occurs when a program checks the state of a resource (e.g., file permissions) at one point in time, but then uses that resource at a later point in time, and the state of the resource changes maliciously between the check and the use. This can lead to security bypasses or unintended operations."
What is a symlink race?,"A **symlink race** is a race condition vulnerability where an attacker exploits the time window between a program checking a file path and performing an operation on it. By creating a symbolic link (symlink) to a different, often sensitive, file, the attacker can trick the program into operating on the unintended file with its own privileges, potentially leading to unauthorized access or modification."
What is cross-site request forgery (CSRF)?,"**Cross-site request forgery (CSRF)** is a privilege-confusion bug in web applications where an attacker tricks a victim's browser into sending a forged request to a trusted site where the victim is currently authenticated. Since the browser automatically includes session cookies, the trusted site processes the request as if it were legitimately initiated by the victim, leading to unauthorized actions."
How does clickjacking work?,"**Clickjacking** is a privilege-confusion bug where an attacker overlays a transparent or opaque malicious element over a legitimate web page. This tricks users into clicking on the hidden malicious element when they intend to click on the visible, legitimate content, leading to unintended actions like authorizing transactions or changing settings."
What is an FTP bounce attack?,"An **FTP bounce attack** is a privilege-confusion bug that exploits the PORT command in the File Transfer Protocol (FTP). Attackers can use this command to instruct an FTP server to connect to an arbitrary port on another machine, effectively using the FTP server as a proxy to scan ports, relay data, or bypass firewall rules, often with the server's privileges."
Why are programmers not being security-aware a human factor in software vulnerabilities?,"Programmers not being security-aware is a human factor in software vulnerabilities because a lack of knowledge or focus on secure coding practices can lead to the introduction of flaws during the development process. If developers are not trained in identifying and mitigating common vulnerabilities, they are more likely to write insecure code, even unintentionally."
How can misconfigurations lead to software vulnerabilities?,"Misconfigurations can lead to software vulnerabilities because incorrect settings or improper setup of software, operating systems, or networks can create exploitable weaknesses. These misconfigurations, often resulting from human error or oversight, can leave systems exposed to attacks, even if the underlying software itself is free of coding flaws."
How does flexible handling of pointers/references in programming languages contribute to vulnerabilities?,"Flexible handling of pointers/references in programming languages contributes to vulnerabilities by allowing direct memory manipulation, which, if not managed carefully, can lead to errors like buffer overflows, use-after-free bugs, or null pointer dereferences. These errors can be exploited by attackers to gain control over a system or cause denial of service. **Pointers** are variables that store memory addresses, while **references** are aliases to existing variables."
What is the impact of a lack of strong typing in programming languages on security?,"A lack of strong typing in programming languages can impact security by allowing implicit type conversions or treating data of one type as another without explicit checks. This can lead to unexpected behavior, data corruption, or vulnerabilities where an attacker can manipulate data types to bypass security checks or inject malicious code. **Strong typing** enforces strict rules about how data types are used and converted, reducing the likelihood of such errors."
Why does manual memory management make it easier for programmers to make mistakes leading to vulnerabilities?,"Manual memory management makes it easier for programmers to make mistakes leading to vulnerabilities because it places the responsibility of allocating and deallocating memory entirely on the developer. Errors such as forgetting to free allocated memory (leading to memory leaks), freeing memory multiple times (double-free), or using memory after it has been freed (use-after-free) can introduce critical vulnerabilities that attackers can exploit."
"In the x86 memory layout, which segment grows towards lower addresses?","In the x86 memory layout, the **Stack** segment grows towards lower addresses. This means that as new function calls are made and new stack frames are pushed, they are placed at numerically smaller memory addresses."
"In the x86 memory layout, which segment grows towards higher addresses?","In the x86 memory layout, the **Heap** segment grows towards higher addresses. This means that as dynamic memory allocations are made, new blocks of memory are typically placed at numerically larger memory addresses."
What kind of data is stored in the 'Code' segment?,"The 'Code' segment stores the program code itself, which consists of the executable instructions that the CPU will run. This segment is typically fixed in size and marked as read-only to prevent modification during execution."
What kind of data is stored in the 'Static data' segment?,"The 'Static data' segment stores statically allocated data, which includes global variables, static variables, and constants. These data elements have a fixed size and are allocated when the program starts, persisting throughout its entire execution."
What information is stored in the 'Stack' segment?,"The 'Stack' segment stores parameters passed to functions and local variables declared within those functions. Each time a function is called, a new stack frame is created on the stack to hold these items, along with return addresses and other control information."
What information is stored in the 'Heap' segment?,"The 'Heap' segment stores dynamically allocated data, such as instances of classes (objects) and data arrays whose size is not known at compile time or needs to change during program execution. Memory on the heap is managed by the programmer or runtime system through explicit allocation and deallocation calls."
What is the primary characteristic of the 'Code' segment regarding its size and modifiability?,"The primary characteristic of the 'Code' segment is that it is of fixed size and is read-only. This means its contents, which are the program's instructions, cannot be changed during the program's execution, providing a layer of security against certain types of attacks."
What happens when a method is invoked regarding the 'Stack'?,"When a method is invoked, a new frame is created and pushed onto the 'Stack'. This frame contains the parameters passed to the method, its local variables, and other necessary information for the method's execution and eventual return."
Why is 'Computer Security' an important topic in SC3010?,"Based on the provided document, 'Computer Security' is an important topic in SC3010 as it is the subject of the course, with 'Software Security (I)' being a specific lecture within it. This indicates its foundational role in understanding how to protect computer systems and software from threats and vulnerabilities."
What is the main focus of Lecture 2 in SC3010 Computer Security?,"The main focus of Lecture 2 in SC3010 Computer Security is 'Software Security (I)', indicating an initial deep dive into the principles and practices of securing software systems."
What are the two main factors contributing to why software has vulnerabilities?,"The two main factors contributing to why software has vulnerabilities are the **human factor** and the **language factor**. The human factor encompasses mistakes made by developers, lack of security awareness, and misconfigurations. The language factor relates to programming languages not being designed well for security, often due to flexible pointer handling, lack of strong typing, and manual memory management."
What are the specific types of malware that propagate without user intervention?,"The specific type of malware that propagates without user intervention is **Worms**. Worms are self-replicating programs that can spread across networks by exploiting vulnerabilities, without needing to attach to a host program or require user action to spread."
Which type of malware is designed to block user data until a ransom is paid?,"**Ransomware** is the type of malware specifically designed to block a user's data or access to their system, typically through encryption, and then demand a payment (ransom) for its release or decryption."
What is the primary goal of Spyware?,"The primary goal of **Spyware** is to gather information about the user and their activities, and then send this collected data to an attacker. This can include sensitive personal information, browsing habits, or keystrokes."
How do Trojans differ from Viruses in their propagation mechanism?,"**Trojans** differ from **Viruses** in their propagation mechanism primarily because Trojans pretend to be useful software to trick users into installing them, but they do not self-propagate. Viruses, on the other hand, propagate to different computers but require a user to trigger their execution, often by opening an infected file."
What is the role of Rootkits in compromising a computer?,"The role of **Rootkits** in compromising a computer is to obtain root privileges, which are the highest level of administrative access. This allows them to maintain persistent, stealthy control over the compromised system, often by hiding their presence from security tools and the operating system itself."
What is the relationship between a vulnerability and an exploit?,"The relationship between a **vulnerability** and an **exploit** is that a vulnerability is a weakness in a system, while an exploit is a technique or piece of code that takes advantage of that specific weakness. An exploit leverages a vulnerability to achieve an attacker's objective, such as gaining unauthorized access or executing malicious code."
Can a program's 'Code' segment be modified during runtime in an x86 system?,"No, a program's 'Code' segment cannot be modified during runtime in an x86 system. It is designed to be of fixed size and read-only, which helps ensure the integrity of the program's instructions and prevents unauthorized alterations."
What are the implications of a 'Buffer Overflow' vulnerability?,"The implications of a **Buffer Overflow** vulnerability are significant, as it allows an attacker to write data beyond the intended memory boundaries of a buffer. This can lead to overwriting adjacent data, corrupting program state, or even injecting and executing malicious code, potentially giving the attacker control over the system."
What is the primary function of the 'Memory Layout and Function Call Convention' review?,"The primary function of the 'Memory Layout and Function Call Convention' review is to provide foundational knowledge regarding how a program's memory is organized and how functions interact. This understanding is crucial for comprehending how certain vulnerabilities, like buffer overflows, arise and can be exploited."
Why is it important for programmers to be security-aware?,"It is important for programmers to be security-aware because a lack of security awareness is a human factor that directly contributes to software vulnerabilities. Security-aware programmers are better equipped to identify potential weaknesses, implement secure coding practices, and avoid introducing exploitable flaws during the development process, thereby enhancing the overall security of the software."
What is the difference in propagation between Worms and Viruses?,"The difference in propagation between **Worms** and **Viruses** is that worms propagate to different computers without requiring user intervention, often by exploiting network vulnerabilities. Viruses, conversely, also propagate to different computers but require a user to trigger their execution, typically by opening an infected file or running an infected program."
